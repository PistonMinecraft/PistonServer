Index: net/minecraft/server/dedicated/Settings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/dedicated/Settings.java b/net/minecraft/server/dedicated/Settings.java
--- a/net/minecraft/server/dedicated/Settings.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/dedicated/Settings.java	(date 1611653827828)
@@ -89,10 +89,11 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return (s) -> {
             try {
-                return (Number) function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException numberformatexception) {
                 return null;
             }
@@ -126,25 +127,28 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     protected <V> V get(String s, Function<String, V> function, Function<V, String> function1, V v0) {
         String s1 = this.getStringRaw(s);
-        Object object = MoreObjects.firstNonNull(s1 != null ? function.apply(s1) : null, v0);
+        V object = MoreObjects.firstNonNull(s1 != null ? function.apply(s1) : null, v0);
 
         this.properties.put(s, function1.apply(object));
         return object;
     }
 
+    // PistonMC - Fix decompile errors
     protected <V> Settings<T>.MutableValue<V> getMutable(String s, Function<String, V> function, Function<V, String> function1, V v0) {
         String s1 = this.getStringRaw(s);
-        Object object = MoreObjects.firstNonNull(s1 != null ? function.apply(s1) : null, v0);
+        V object = MoreObjects.firstNonNull(s1 != null ? function.apply(s1) : null, v0);
 
         this.properties.put(s, function1.apply(object));
-        return new Settings.MutableValue<>(s, object, function1);
+        return new Settings<T>.MutableValue<>(s, object, function1);
     }
 
+    // PistonMC - Fix decompile errors
     protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryoperator, Function<V, String> function1, V v0) {
         return this.get(s, (s1) -> {
-            Object object = function.apply(s1);
+            V object = function.apply(s1);
 
             return object != null ? unaryoperator.apply(object) : null;
         }, function1, v0);
Index: net/minecraft/server/level/ChunkHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ChunkHolder.java b/net/minecraft/server/level/ChunkHolder.java
--- a/net/minecraft/server/level/ChunkHolder.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ChunkHolder.java	(date 1611585862591)
@@ -60,12 +60,13 @@
     private boolean wasAccessibleSinceLastSave;
     private boolean resendLight;
 
+    // PistonMC - Fix decompile errors
     public ChunkHolder(ChunkPos chunkpos, int i, LevelLightEngine levellightengine, ChunkHolder.LevelChangeListener chunkholder_levelchangelistener, ChunkHolder.PlayerProvider chunkholder_playerprovider) {
-        this.futures = new AtomicReferenceArray(ChunkHolder.CHUNK_STATUSES.size());
+        this.futures = new AtomicReferenceArray<>(ChunkHolder.CHUNK_STATUSES.size());
         this.fullChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
         this.tickingChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
         this.entityTickingChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
-        this.chunkToSave = CompletableFuture.completedFuture((Object) null);
+        this.chunkToSave = CompletableFuture.completedFuture(null);
         this.changedBlocksPerSection = new ShortSet[16];
         this.pos = chunkpos;
         this.lightEngine = levellightengine;
@@ -285,6 +286,7 @@
         this.ticketLevel = i;
     }
 
+    // PistonMC - Fix decompile errors
     protected void updateFutures(ChunkMap chunkmap) {
         ChunkStatus chunkstatus = getStatus(this.oldTicketLevel);
         ChunkStatus chunkstatus1 = getStatus(this.ticketLevel);
@@ -292,17 +294,16 @@
         boolean flag1 = this.ticketLevel <= ChunkMap.MAX_CHUNK_DISTANCE;
         ChunkHolder.FullChunkStatus chunkholder_fullchunkstatus = getFullChunkStatus(this.oldTicketLevel);
         ChunkHolder.FullChunkStatus chunkholder_fullchunkstatus1 = getFullChunkStatus(this.ticketLevel);
-        CompletableFuture completablefuture;
 
         if (flag) {
-            Either either = Either.right(new ChunkHolder.ChunkLoadingFailure() {
+            Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = Either.right(new ChunkHolder.ChunkLoadingFailure() {
                 public String toString() {
                     return "Unloaded ticket level " + ChunkHolder.this.pos.toString();
                 }
             });
 
             for (int i = flag1 ? chunkstatus1.getIndex() + 1 : 0; i <= chunkstatus.getIndex(); ++i) {
-                completablefuture = (CompletableFuture) this.futures.get(i);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.futures.get(i);
                 if (completablefuture != null) {
                     completablefuture.complete(either);
                 } else {
@@ -321,10 +322,10 @@
         }
 
         if (flag2 && !flag3) {
-            completablefuture = this.fullChunkFuture;
+            CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.fullChunkFuture;
             this.fullChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
             this.updateChunkToSave(completablefuture.thenApply((either1) -> {
-                chunkmap.getClass();
+//                chunkmap.getClass();
                 return either1.ifLeft(chunkmap::packTicks);
             }));
         }
@@ -347,7 +348,7 @@
 
         if (!flag6 && flag7) {
             if (this.entityTickingChunkFuture != ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE) {
-                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException());
+                throw Util.pauseInIde(new IllegalStateException());
             }
 
             this.entityTickingChunkFuture = chunkmap.getEntityTickingRangeFuture(this.pos);
Index: net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
--- a/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java	(date 1611603678323)
@@ -57,23 +57,21 @@
         return new ChunkTaskPriorityQueueSorter.Release(runnable, i, flag);
     }
 
+    // PistonMC - Fix decompile errors
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorhandle, boolean flag) {
-        return (ProcessorHandle) this.mailbox.ask((processorhandle1) -> {
+        return this.mailbox.<ProcessorHandle<Message<T>>>ask((processorhandle1) -> {
             return new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(processorhandle);
-                processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (chunktaskpriorityqueuesorter_message) -> {
-                    this.submit(processorhandle, chunktaskpriorityqueuesorter_message.task, chunktaskpriorityqueuesorter_message.pos, chunktaskpriorityqueuesorter_message.level, flag);
-                }));
+                processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (chunktaskpriorityqueuesorter_message) -> this.submit(processorhandle, chunktaskpriorityqueuesorter_message.task, chunktaskpriorityqueuesorter_message.pos, chunktaskpriorityqueuesorter_message.level, flag)));
             });
         }).join();
     }
 
+    // PistonMC - Fix decompile errors
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorhandle) {
-        return (ProcessorHandle) this.mailbox.ask((processorhandle1) -> {
+        return this.mailbox.<ProcessorHandle<Release>>ask((processorhandle1) -> {
             return new StrictQueue.IntRunnable(0, () -> {
-                processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (chunktaskpriorityqueuesorter_release) -> {
-                    this.release(processorhandle, chunktaskpriorityqueuesorter_release.pos, chunktaskpriorityqueuesorter_release.task, chunktaskpriorityqueuesorter_release.clearQueue);
-                }));
+                processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (chunktaskpriorityqueuesorter_release) -> this.release(processorhandle, chunktaskpriorityqueuesorter_release.pos, chunktaskpriorityqueuesorter_release.task, chunktaskpriorityqueuesorter_release.clearQueue)));
             });
         }).join();
     }
@@ -120,21 +118,20 @@
         }));
     }
 
+    // PistonMC - Fix decompile errors
     private <T> void pollTask(ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> chunktaskpriorityqueue, ProcessorHandle<T> processorhandle) {
         this.mailbox.tell(new StrictQueue.IntRunnable(3, () -> {
-            Stream stream = chunktaskpriorityqueue.pop();
+            Stream<com.mojang.datafixers.util.Either<Function<ProcessorHandle<Unit>, T>, Runnable>> stream = chunktaskpriorityqueue.pop();
 
             if (stream == null) {
                 this.sleeping.add(processorhandle);
             } else {
-                Util.sequence((List) stream.map((either) -> {
-                    return (CompletableFuture) either.map(processorhandle::ask, (runnable) -> {
+                Util.sequence(stream.map((either) -> {
+                    return either.map(processorhandle::ask, (runnable) -> {
                         runnable.run();
                         return CompletableFuture.completedFuture(Unit.INSTANCE);
                     });
-                }).collect(Collectors.toList())).thenAccept((list) -> {
-                    this.pollTask(chunktaskpriorityqueue, processorhandle);
-                });
+                }).collect(Collectors.toList())).thenAccept((list) -> this.pollTask(chunktaskpriorityqueue, processorhandle));
             }
 
         }));
Index: net/minecraft/server/level/ChunkMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
--- a/net/minecraft/server/level/ChunkMap.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ChunkMap.java	(date 1611603678502)
@@ -209,8 +209,9 @@
         };
     }
 
+    // PistonMC - Fix decompile errors
     private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos chunkpos, int i, IntFunction<ChunkStatus> intfunction) {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> arraylist = Lists.newArrayList();
         int j = chunkpos.x;
         int k = chunkpos.z;
 
@@ -229,27 +230,28 @@
                     }));
                 }
 
-                ChunkStatus chunkstatus = (ChunkStatus) intfunction.apply(j1);
-                CompletableFuture completablefuture = chunkholder.getOrScheduleFuture(chunkstatus, this);
+                ChunkStatus chunkstatus = intfunction.apply(j1);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.getOrScheduleFuture(chunkstatus, this);
 
                 arraylist.add(completablefuture);
             }
         }
 
-        CompletableFuture completablefuture1 = Util.sequence(arraylist);
+        CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completablefuture1 = Util.sequence(arraylist);
 
         return completablefuture1.thenApply((list) -> {
-            ArrayList arraylist1 = Lists.newArrayList();
-            final int l1 = 0;
+            ArrayList<ChunkAccess> arraylist1 = Lists.newArrayList();
+            int l1 = 0;
 
-            for (Iterator iterator = list.iterator(); iterator.hasNext(); ++l1) {
-                final Either either = (Either) iterator.next();
-                Optional optional = either.left();
+            for (Iterator<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> iterator = list.iterator(); iterator.hasNext(); ++l1) {
+                final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = iterator.next();
+                Optional<ChunkAccess> optional = either.left();
 
                 if (!optional.isPresent()) {
+                    int finalL = l1;
                     return Either.right(new ChunkHolder.ChunkLoadingFailure() {
                         public String toString() {
-                            return "Unloaded " + new ChunkPos(j + l1 % (i * 2 + 1), k + l1 / (i * 2 + 1)) + " " + ((ChunkHolder.ChunkLoadingFailure) either.right().get()).toString();
+                            return "Unloaded " + new ChunkPos(j + finalL % (i * 2 + 1), k + finalL / (i * 2 + 1)) + " " + ((ChunkHolder.ChunkLoadingFailure) either.right().get()).toString();
                         }
                     });
                 }
@@ -315,37 +317,32 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     protected void saveAllChunks(boolean flag) {
         if (flag) {
-            List list = (List) this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList());
+            List<ChunkHolder> list = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList());
             MutableBoolean mutableboolean = new MutableBoolean();
 
             do {
                 mutableboolean.setFalse();
                 list.stream().map((chunkholder) -> {
-                    CompletableFuture completablefuture;
+                    CompletableFuture<ChunkAccess> completablefuture;
 
                     do {
                         completablefuture = chunkholder.getChunkToSave();
                         this.mainThreadExecutor.managedBlock(completablefuture::isDone);
                     } while (completablefuture != chunkholder.getChunkToSave());
 
-                    return (ChunkAccess) completablefuture.join();
-                }).filter((chunkaccess) -> {
-                    return chunkaccess instanceof ImposterProtoChunk || chunkaccess instanceof LevelChunk;
-                }).filter(this::save).forEach((chunkaccess) -> {
-                    mutableboolean.setTrue();
-                });
+                    return completablefuture.join();
+                }).filter((chunkaccess) -> chunkaccess instanceof ImposterProtoChunk || chunkaccess instanceof LevelChunk).filter(this::save).forEach((chunkaccess) -> mutableboolean.setTrue());
             } while (mutableboolean.isTrue());
 
-            this.processUnloads(() -> {
-                return true;
-            });
+            this.processUnloads(() -> true);
             this.flushWorker();
             ChunkMap.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.storageFolder.getName());
         } else {
             this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).forEach((chunkholder) -> {
-                ChunkAccess chunkaccess = (ChunkAccess) chunkholder.getChunkToSave().getNow((Object) null);
+                ChunkAccess chunkaccess = chunkholder.getChunkToSave().getNow(null);
 
                 if (chunkaccess instanceof ImposterProtoChunk || chunkaccess instanceof LevelChunk) {
                     this.save(chunkaccess);
@@ -393,10 +390,11 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private void scheduleUnload(long i, ChunkHolder chunkholder) {
-        CompletableFuture completablefuture = chunkholder.getChunkToSave();
-        Consumer consumer = (chunkaccess) -> {
-            CompletableFuture completablefuture1 = chunkholder.getChunkToSave();
+        CompletableFuture<ChunkAccess> completablefuture = chunkholder.getChunkToSave();
+        Consumer<ChunkAccess> consumer = (chunkaccess) -> {
+            CompletableFuture<ChunkAccess> completablefuture1 = chunkholder.getChunkToSave();
 
             if (completablefuture1 != completablefuture) {
                 this.scheduleUnload(i, chunkholder);
@@ -415,14 +413,14 @@
 
                     this.lightEngine.updateChunkStatus(chunkaccess.getPos());
                     this.lightEngine.tryScheduleUpdate();
-                    this.progressListener.onStatusChange(chunkaccess.getPos(), (ChunkStatus) null);
+                    this.progressListener.onStatusChange(chunkaccess.getPos(), null);
                 }
 
             }
         };
-        Queue queue = this.unloadQueue;
+        Queue<Runnable> queue = this.unloadQueue;
 
-        this.unloadQueue.getClass();
+//        this.unloadQueue.getClass();
         completablefuture.thenAcceptAsync(consumer, queue::add).whenComplete((ovoid, throwable) -> {
             if (throwable != null) {
                 ChunkMap.LOGGER.error("Failed to save chunk " + chunkholder.getPos(), throwable);
@@ -441,16 +439,17 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> schedule(ChunkHolder chunkholder, ChunkStatus chunkstatus) {
         ChunkPos chunkpos = chunkholder.getPos();
 
         if (chunkstatus == ChunkStatus.EMPTY) {
             return this.scheduleChunkLoad(chunkpos);
         } else {
-            CompletableFuture completablefuture = chunkholder.getOrScheduleFuture(chunkstatus.getParent(), this);
+            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.getOrScheduleFuture(chunkstatus.getParent(), this);
 
             return completablefuture.thenComposeAsync((either) -> {
-                Optional optional = either.left();
+                Optional<ChunkAccess> optional = either.left();
 
                 if (!optional.isPresent()) {
                     return CompletableFuture.completedFuture(either);
@@ -459,17 +458,16 @@
                         this.distanceManager.addTicket(TicketType.LIGHT, chunkpos, 33 + ChunkStatus.getDistance(ChunkStatus.FEATURES), chunkpos);
                     }
 
-                    ChunkAccess chunkaccess = (ChunkAccess) optional.get();
+                    ChunkAccess chunkaccess = optional.get();
 
                     if (chunkaccess.getStatus().isOrAfter(chunkstatus)) {
-                        CompletableFuture completablefuture1;
+                        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture1;
 
                         if (chunkstatus == ChunkStatus.LIGHT) {
                             completablefuture1 = this.scheduleChunkGeneration(chunkholder, chunkstatus);
                         } else {
-                            completablefuture1 = chunkstatus.load(this.level, this.structureManager, this.lightEngine, (chunkaccess1) -> {
-                                return this.protoChunkToFullChunk(chunkholder);
-                            }, chunkaccess);
+                            completablefuture1 = chunkstatus.load(this.level, this.structureManager, this.lightEngine,
+                                    (chunkaccess1) -> this.protoChunkToFullChunk(chunkholder), chunkaccess);
                         }
 
                         this.progressListener.onStatusChange(chunkpos, chunkstatus);
@@ -527,21 +525,17 @@
         return this.chunkTypeCache.put(chunkpos.toLong(), (byte) (chunkstatus_chunktype == ChunkStatus.ChunkType.PROTOCHUNK ? -1 : 1));
     }
 
+    // PistonMC - Fix decompile errors
     private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkGeneration(ChunkHolder chunkholder, ChunkStatus chunkstatus) {
         ChunkPos chunkpos = chunkholder.getPos();
-        CompletableFuture completablefuture = this.getChunkRangeFuture(chunkpos, chunkstatus.getRange(), (i) -> {
-            return this.getDependencyStatus(chunkstatus, i);
-        });
+        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkRangeFuture(chunkpos, chunkstatus.getRange(), (i) -> this.getDependencyStatus(chunkstatus, i));
 
-        this.level.getProfiler().incrementCounter(() -> {
-            return "chunkGenerate " + chunkstatus.getName();
-        });
+        this.level.getProfiler().incrementCounter(() -> "chunkGenerate " + chunkstatus.getName());
         return completablefuture.thenComposeAsync((either) -> {
-            return (CompletableFuture) either.map((list) -> {
+            return either.map((list) -> {
                 try {
-                    CompletableFuture completablefuture1 = chunkstatus.generate(this.level, this.generator, this.structureManager, this.lightEngine, (chunkaccess) -> {
-                        return this.protoChunkToFullChunk(chunkholder);
-                    }, list);
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture1 = chunkstatus.generate(this.level, this.generator, this.structureManager, this.lightEngine,
+                            (chunkaccess) -> this.protoChunkToFullChunk(chunkholder), list);
 
                     this.progressListener.onStatusChange(chunkpos, chunkstatus);
                     return completablefuture1;
@@ -549,18 +543,16 @@
                     CrashReport crashreport = CrashReport.forThrowable(exception, "Exception generating new chunk");
                     CrashReportCategory crashreportcategory = crashreport.addCategory("Chunk to be generated");
 
-                    crashreportcategory.setDetail("Location", (Object) String.format("%d,%d", chunkpos.x, chunkpos.z));
-                    crashreportcategory.setDetail("Position hash", (Object) ChunkPos.asLong(chunkpos.x, chunkpos.z));
-                    crashreportcategory.setDetail("Generator", (Object) this.generator);
+                    crashreportcategory.setDetail("Location", String.format("%d,%d", chunkpos.x, chunkpos.z));
+                    crashreportcategory.setDetail("Position hash", ChunkPos.asLong(chunkpos.x, chunkpos.z));
+                    crashreportcategory.setDetail("Generator", this.generator);
                     throw new ReportedException(crashreport);
                 }
             }, (chunkholder_chunkloadingfailure) -> {
                 this.releaseLightTicket(chunkpos);
                 return CompletableFuture.completedFuture(Either.right(chunkholder_chunkloadingfailure));
             });
-        }, (runnable) -> {
-            this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable));
-        });
+        }, (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable)));
     }
 
     protected void releaseLightTicket(ChunkPos chunkpos) {
@@ -583,8 +575,9 @@
         return chunkstatus1;
     }
 
+    // PistonMC - Fix decompile errors
     private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> protoChunkToFullChunk(ChunkHolder chunkholder) {
-        CompletableFuture completablefuture = chunkholder.getFutureIfPresentUnchecked(ChunkStatus.FULL.getParent());
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.getFutureIfPresentUnchecked(ChunkStatus.FULL.getParent());
 
         return completablefuture.thenApplyAsync((either) -> {
             ChunkStatus chunkstatus = ChunkHolder.getStatus(chunkholder.getTicketLevel());
@@ -600,27 +593,17 @@
                     chunkholder.replaceProtoChunk(new ImposterProtoChunk(levelchunk));
                 }
 
-                levelchunk.setFullStatus(() -> {
-                    return ChunkHolder.getFullChunkStatus(chunkholder.getTicketLevel());
-                });
+                levelchunk.setFullStatus(() -> ChunkHolder.getFullChunkStatus(chunkholder.getTicketLevel()));
                 levelchunk.runPostLoad();
                 if (this.entitiesInLevel.add(chunkpos.toLong())) {
                     levelchunk.setLoaded(true);
                     this.level.addAllPendingBlockEntities(levelchunk.getBlockEntities().values());
-                    ArrayList arraylist = null;
-                    ClassInstanceMultiMap[] aclassinstancemultimap = levelchunk.getEntitySections();
-                    int i = aclassinstancemultimap.length;
-
-                    for (int j = 0; j < i; ++j) {
-                        ClassInstanceMultiMap classinstancemultimap = aclassinstancemultimap[j];
-                        Iterator iterator = classinstancemultimap.iterator();
-
-                        while (iterator.hasNext()) {
-                            Entity entity = (Entity) iterator.next();
-
+                    ArrayList<Entity> arraylist = null;
+                    for(ClassInstanceMultiMap<Entity> classinstancemultimap : levelchunk.getEntitySections()) {
+                        for(Entity entity : classinstancemultimap) {
                             if (!(entity instanceof Player) && !this.level.loadFromChunk(entity)) {
                                 if (arraylist == null) {
-                                    arraylist = Lists.newArrayList(new Entity[]{entity});
+                                    arraylist = Lists.newArrayList(entity);
                                 } else {
                                     arraylist.add(entity);
                                 }
@@ -644,35 +627,28 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> postProcess(ChunkHolder chunkholder) {
         ChunkPos chunkpos = chunkholder.getPos();
-        CompletableFuture completablefuture = this.getChunkRangeFuture(chunkpos, 1, (i) -> {
-            return ChunkStatus.FULL;
-        });
-        CompletableFuture completablefuture1 = completablefuture.thenApplyAsync((either) -> {
+        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkRangeFuture(chunkpos, 1, (i) -> ChunkStatus.FULL);
+        CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture1 = completablefuture.thenApplyAsync((either) -> {
             return either.flatMap((list) -> {
                 LevelChunk levelchunk = (LevelChunk) list.get(list.size() / 2);
 
                 levelchunk.postProcessGeneration();
                 return Either.left(levelchunk);
             });
-        }, (runnable) -> {
-            this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable));
-        });
+        }, (runnable) -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable)));
 
         completablefuture1.thenAcceptAsync((either) -> {
             either.mapLeft((levelchunk) -> {
                 this.tickingGenerated.getAndIncrement();
                 Packet[] apacket = new Packet[2];
 
-                this.getPlayers(chunkpos, false).forEach((serverplayer) -> {
-                    this.playerLoadedChunk(serverplayer, apacket, levelchunk);
-                });
+                this.getPlayers(chunkpos, false).forEach((serverplayer) -> this.playerLoadedChunk(serverplayer, apacket, levelchunk));
                 return Either.left(levelchunk);
             });
-        }, (runnable) -> {
-            this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable));
-        });
+        }, (runnable) -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkholder, runnable)));
         return completablefuture1;
     }
 
@@ -816,37 +792,26 @@
         return Iterables.unmodifiableIterable(this.visibleChunkMap.values());
     }
 
+    // PistonMC - Fix decompile errors
     void dumpChunks(Writer writer) throws IOException {
         CsvOutput csvoutput = CsvOutput.builder().addColumn("x").addColumn("z").addColumn("level").addColumn("in_memory").addColumn("status").addColumn("full_status").addColumn("accessible_ready").addColumn("ticking_ready").addColumn("entity_ticking_ready").addColumn("ticket").addColumn("spawning").addColumn("entity_count").addColumn("block_entity_count").build(writer);
-        ObjectBidirectionalIterator objectbidirectionaliterator = this.visibleChunkMap.long2ObjectEntrySet().iterator();
-
-        while (objectbidirectionaliterator.hasNext()) {
-            Entry entry = (Entry) objectbidirectionaliterator.next();
+        for(Entry<ChunkHolder> entry : this.visibleChunkMap.long2ObjectEntrySet()) {
             ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
-            ChunkHolder chunkholder = (ChunkHolder) entry.getValue();
-            Optional optional = Optional.ofNullable(chunkholder.getLastAvailable());
-            Optional optional1 = optional.flatMap((chunkaccess) -> {
-                return chunkaccess instanceof LevelChunk ? Optional.of((LevelChunk) chunkaccess) : Optional.empty();
-            });
+            ChunkHolder chunkholder = entry.getValue();
+            Optional<ChunkAccess> optional = Optional.ofNullable(chunkholder.getLastAvailable());
+            Optional<LevelChunk> optional1 = optional.flatMap((chunkaccess) -> chunkaccess instanceof LevelChunk ? Optional.of((LevelChunk) chunkaccess) : Optional.empty());
 
-            csvoutput.writeRow(chunkpos.x, chunkpos.z, chunkholder.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse((Object) null), optional1.map(LevelChunk::getFullStatus).orElse((Object) null), printFuture(chunkholder.getFullChunkFuture()), printFuture(chunkholder.getTickingChunkFuture()), printFuture(chunkholder.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(entry.getLongKey()), !this.noPlayersCloseForSpawning(chunkpos), optional1.map((levelchunk) -> {
-                return Stream.of(levelchunk.getEntitySections()).mapToInt(ClassInstanceMultiMap::size).sum();
-            }).orElse(0), optional1.map((levelchunk) -> {
-                return levelchunk.getBlockEntities().size();
-            }).orElse(0));
+            csvoutput.writeRow(chunkpos.x, chunkpos.z, chunkholder.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse(null), optional1.map(LevelChunk::getFullStatus).orElse(null), printFuture(chunkholder.getFullChunkFuture()), printFuture(chunkholder.getTickingChunkFuture()), printFuture(chunkholder.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(entry.getLongKey()), !this.noPlayersCloseForSpawning(chunkpos), optional1.map((levelchunk) -> Stream.of(levelchunk.getEntitySections()).mapToInt(ClassInstanceMultiMap::size).sum()).orElse(0), optional1.map((levelchunk) -> levelchunk.getBlockEntities().size()).orElse(0));
         }
 
     }
 
+    // PistonMC - Fix decompile errors
     private static String printFuture(CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture) {
         try {
-            Either either = (Either) completablefuture.getNow((Object) null);
+            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = completablefuture.getNow(null);
 
-            return either != null ? (String) either.map((levelchunk) -> {
-                return "done";
-            }, (chunkholder_chunkloadingfailure) -> {
-                return "unloaded";
-            }) : "not completed";
+            return either != null ? either.map((levelchunk) -> "done", (chunkholder_chunkloadingfailure) -> "unloaded") : "not completed";
         } catch (CompletionException completionexception) {
             return "failed " + completionexception.getCause().getMessage();
         } catch (CancellationException cancellationexception) {
Index: net/minecraft/server/level/DistanceManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/DistanceManager.java b/net/minecraft/server/level/DistanceManager.java
--- a/net/minecraft/server/level/DistanceManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/DistanceManager.java	(date 1611603678409)
@@ -56,20 +56,19 @@
         this.mainThreadExecutor = executor1;
     }
 
+    // PistonMC - Fix decompile errors
     protected void purgeStaleTickets() {
         ++this.ticketTickCounter;
-        ObjectIterator objectiterator = this.tickets.long2ObjectEntrySet().fastIterator();
+        ObjectIterator<Entry<SortedArraySet<Ticket<?>>>> objectiterator = this.tickets.long2ObjectEntrySet().fastIterator();
 
         while (objectiterator.hasNext()) {
-            Entry entry = (Entry) objectiterator.next();
+            Entry<SortedArraySet<Ticket<?>>> entry = objectiterator.next();
 
-            if (((SortedArraySet) entry.getValue()).removeIf((ticket) -> {
-                return ticket.timedOut(this.ticketTickCounter);
-            })) {
-                this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt((SortedArraySet) entry.getValue()), false);
+            if (entry.getValue().removeIf((ticket) -> ticket.timedOut(this.ticketTickCounter))) {
+                this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt(entry.getValue()), false);
             }
 
-            if (((SortedArraySet) entry.getValue()).isEmpty()) {
+            if (entry.getValue().isEmpty()) {
                 objectiterator.remove();
             }
         }
Index: net/minecraft/server/level/ServerEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ServerEntity.java b/net/minecraft/server/level/ServerEntity.java
--- a/net/minecraft/server/level/ServerEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ServerEntity.java	(date 1611603678539)
@@ -129,7 +129,8 @@
                 j = Mth.floor(this.entity.xRot * 256.0F / 360.0F);
                 Vec3 vec3 = this.entity.position().subtract(ClientboundMoveEntityPacket.packetToEntity(this.xp, this.yp, this.zp));
                 boolean flag1 = vec3.lengthSqr() >= 7.62939453125E-6D;
-                Object object = null;
+                // PistonMC - Fix decompile errors
+                Packet<?> object = null;
                 boolean flag2 = flag1 || this.tickCount % 60 == 0;
                 boolean flag3 = Math.abs(i - this.yRotp) >= 1 || Math.abs(j - this.xRotp) >= 1;
 
Index: net/minecraft/world/level/block/state/properties/EnumProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/state/properties/EnumProperty.java b/net/minecraft/world/level/block/state/properties/EnumProperty.java
--- a/net/minecraft/world/level/block/state/properties/EnumProperty.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/state/properties/EnumProperty.java	(date 1611649162132)
@@ -18,14 +18,12 @@
     private final ImmutableSet<T> values;
     private final Map<String, T> names = Maps.newHashMap();
 
+    // PistonMC - Fix decompile errors
     protected EnumProperty(String s, Class<T> oclass, Collection<T> collection) {
         super(s, oclass);
         this.values = ImmutableSet.copyOf(collection);
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Enum oenum = (Enum) iterator.next();
-            String s1 = ((StringRepresentable) oenum).getSerializedName();
+        for(T oenum : collection) {
+            String s1 = oenum.getSerializedName();
 
             if (this.names.containsKey(s1)) {
                 throw new IllegalArgumentException("Multiple values have the same name '" + s1 + "'");
Index: net/minecraft/server/level/ServerChunkCache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
--- a/net/minecraft/server/level/ServerChunkCache.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ServerChunkCache.java	(date 1611648128183)
@@ -148,6 +148,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     @Override
     public LevelChunk getChunkNow(int i, int j) {
@@ -170,12 +171,10 @@
             if (chunkholder == null) {
                 return null;
             } else {
-                Either either = (Either) chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow((Object) null);
-
-                if (either == null) {
-                    return null;
-                } else {
-                    ChunkAccess chunkaccess1 = (ChunkAccess) either.left().orElse((Object) null);
+                Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow(null);
+
+                if (either != null) {
+                    ChunkAccess chunkaccess1 = either.left().orElse(null);
 
                     if (chunkaccess1 != null) {
                         this.storeInCache(k, chunkaccess1, ChunkStatus.FULL);
@@ -184,8 +183,8 @@
                         }
                     }
 
-                    return null;
-                }
+                }
+                return null;
             }
         }
     }
@@ -335,6 +334,7 @@
         this.clearCache();
     }
 
+    // PistonMC - Fix decompile errors
     private void tickChunks() {
         long i = this.level.getGameTime();
         long j = i - this.lastInhabitedUpdate;
@@ -355,20 +355,20 @@
 
             this.lastSpawnState = naturalspawner_spawnstate;
             this.level.getProfiler().pop();
-            ArrayList arraylist = Lists.newArrayList(this.chunkMap.getChunks());
+            ArrayList<ChunkHolder> arraylist = Lists.newArrayList(this.chunkMap.getChunks());
 
             Collections.shuffle(arraylist);
             arraylist.forEach((chunkholder) -> {
-                Optional optional = ((Either) chunkholder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
+                Optional<LevelChunk> optional = chunkholder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
 
                 if (optional.isPresent()) {
                     this.level.getProfiler().push("broadcast");
-                    chunkholder.broadcastChanges((LevelChunk) optional.get());
+                    chunkholder.broadcastChanges(optional.get());
                     this.level.getProfiler().pop();
-                    Optional optional1 = ((Either) chunkholder.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
+                    Optional<LevelChunk> optional1 = chunkholder.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
 
                     if (optional1.isPresent()) {
-                        LevelChunk levelchunk = (LevelChunk) optional1.get();
+                        LevelChunk levelchunk = optional1.get();
                         ChunkPos chunkpos = chunkholder.getPos();
 
                         if (!this.chunkMap.noPlayersCloseForSpawning(chunkpos)) {
Index: net/minecraft/world/level/block/RespawnAnchorBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/RespawnAnchorBlock.java b/net/minecraft/world/level/block/RespawnAnchorBlock.java
--- a/net/minecraft/world/level/block/RespawnAnchorBlock.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/RespawnAnchorBlock.java	(date 1611660380248)
@@ -112,14 +112,13 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private void explode(BlockState blockstate, Level level, final BlockPos blockpos) {
         level.removeBlock(blockpos, false);
-        Stream stream = Direction.Plane.HORIZONTAL.stream();
+        Stream<Direction> stream = Direction.Plane.HORIZONTAL.stream();
 
-        blockpos.getClass();
-        boolean flag = stream.map(blockpos::relative).anyMatch((blockpos1) -> {
-            return isWaterThatWouldFlow(blockpos1, level);
-        });
+//        blockpos.getClass();
+        boolean flag = stream.map(blockpos::relative).anyMatch((blockpos1) -> isWaterThatWouldFlow(blockpos1, level));
         final boolean flag1 = flag || level.getFluidState(blockpos.above()).is(FluidTags.WATER);
         ExplosionDamageCalculator explosiondamagecalculator = new ExplosionDamageCalculator() {
             @Override
@@ -128,7 +127,7 @@
             }
         };
 
-        level.explode((Entity) null, DamageSource.badRespawnPointExplosion(), explosiondamagecalculator, (double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.5D, (double) blockpos.getZ() + 0.5D, 5.0F, true, Explosion.BlockInteraction.DESTROY);
+        level.explode(null, DamageSource.badRespawnPointExplosion(), explosiondamagecalculator, blockpos.getX() + 0.5D, blockpos.getY() + 0.5D, blockpos.getZ() + 0.5D, 5.0F, true, Explosion.BlockInteraction.DESTROY);
     }
 
     public static boolean canSetSpawn(Level level) {
Index: net/minecraft/server/level/ServerPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
--- a/net/minecraft/server/level/ServerPlayer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ServerPlayer.java	(date 1611509215398)
@@ -27,6 +27,7 @@
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
@@ -281,6 +282,7 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void addAdditionalSaveData(CompoundTag compoundtag) {
         super.addAdditionalSaveData(compoundtag);
@@ -317,13 +319,11 @@
             compoundtag.putInt("SpawnZ", this.respawnPosition.getZ());
             compoundtag.putBoolean("SpawnForced", this.respawnForced);
             compoundtag.putFloat("SpawnAngle", this.respawnAngle);
-            DataResult dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location());
+            DataResult<Tag> dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location());
             Logger logger = ServerPlayer.LOGGER;
 
-            logger.getClass();
-            dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-                compoundtag.put("SpawnDimension", tag);
-            });
+//            logger.getClass();
+            dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("SpawnDimension", tag));
         }
 
     }
Index: net/minecraft/server/level/ServerLevel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
--- a/net/minecraft/server/level/ServerLevel.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ServerLevel.java	(date 1611508050346)
@@ -448,10 +448,9 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private void wakeUpAllPlayers() {
-        ((List) this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayer) -> {
-            serverplayer.stopSleepInBed(false, false);
-        });
+        this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList()).forEach((serverplayer) -> serverplayer.stopSleepInBed(false, false));
     }
 
     public void tickChunk(LevelChunk levelchunk, int i) {
@@ -1325,10 +1324,11 @@
         return this.players;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void onBlockStateChange(BlockPos blockpos, BlockState blockstate, BlockState blockstate1) {
-        Optional optional = PoiType.forState(blockstate);
-        Optional optional1 = PoiType.forState(blockstate1);
+        Optional<PoiType> optional = PoiType.forState(blockstate);
+        Optional<PoiType> optional1 = PoiType.forState(blockstate1);
 
         if (!Objects.equals(optional, optional1)) {
             BlockPos blockpos1 = blockpos.immutable();
@@ -1611,21 +1611,17 @@
         }), this.getBlockTicks().size(), this.getLiquidTicks().size(), this.gatherChunkSourceStats());
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> String getTypeCount(Collection<T> collection, Function<T, ResourceLocation> function) {
         try {
-            Object2IntOpenHashMap object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                Object object = iterator.next();
-                ResourceLocation resourcelocation = (ResourceLocation) function.apply(object);
+            Object2IntOpenHashMap<ResourceLocation> object2intopenhashmap = new Object2IntOpenHashMap();
+            for(T object : collection) {
+                ResourceLocation resourcelocation = function.apply(object);
 
                 object2intopenhashmap.addTo(resourcelocation, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue).reversed()).limit(5L).map((it_unimi_dsi_fastutil_objects_object2intmap_entry) -> {
-                return it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey() + ":" + it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue();
-            }).collect(Collectors.joining(","));
+            return object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<ResourceLocation>::getIntValue).reversed()).limit(5L).map((it_unimi_dsi_fastutil_objects_object2intmap_entry) -> it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey() + ":" + it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()).collect(Collectors.joining(","));
         } catch (Exception exception) {
             return "";
         }
Index: net/minecraft/server/level/ChunkTaskPriorityQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/net/minecraft/server/level/ChunkTaskPriorityQueue.java
--- a/net/minecraft/server/level/ChunkTaskPriorityQueue.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/ChunkTaskPriorityQueue.java	(date 1611603678456)
@@ -62,20 +62,16 @@
         this.firstQueue = Math.min(this.firstQueue, j);
     }
 
+    // PistonMC - Fix decompile errors
     protected void release(long i, boolean flag) {
-        Iterator iterator = this.taskQueue.iterator();
-
-        while (iterator.hasNext()) {
-            Long2ObjectLinkedOpenHashMap long2objectlinkedopenhashmap = (Long2ObjectLinkedOpenHashMap) iterator.next();
-            List list = (List) long2objectlinkedopenhashmap.get(i);
+        for(Long2ObjectLinkedOpenHashMap<List<Optional<T>>> long2objectlinkedopenhashmap : this.taskQueue) {
+            List<Optional<T>> list = long2objectlinkedopenhashmap.get(i);
 
             if (list != null) {
                 if (flag) {
                     list.clear();
                 } else {
-                    list.removeIf((optional) -> {
-                        return !optional.isPresent();
-                    });
+                    list.removeIf((optional) -> !optional.isPresent());
                 }
 
                 if (list.isEmpty()) {
@@ -84,7 +80,7 @@
             }
         }
 
-        while (this.firstQueue < ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT && ((Long2ObjectLinkedOpenHashMap) this.taskQueue.get(this.firstQueue)).isEmpty()) {
+        while (this.firstQueue < ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT && this.taskQueue.get(this.firstQueue).isEmpty()) {
             ++this.firstQueue;
         }
 
@@ -97,6 +93,7 @@
         };
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public Stream<Either<T, Runnable>> pop() {
         if (this.acquired.size() >= this.maxTasks) {
@@ -105,20 +102,16 @@
             return null;
         } else {
             int i = this.firstQueue;
-            Long2ObjectLinkedOpenHashMap long2objectlinkedopenhashmap = (Long2ObjectLinkedOpenHashMap) this.taskQueue.get(i);
+            Long2ObjectLinkedOpenHashMap<List<Optional<T>>> long2objectlinkedopenhashmap = this.taskQueue.get(i);
             long j = long2objectlinkedopenhashmap.firstLongKey();
 
-            List list;
+            List<Optional<T>> list = long2objectlinkedopenhashmap.removeFirst();
 
-            for (list = (List) long2objectlinkedopenhashmap.removeFirst(); this.firstQueue < ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT && ((Long2ObjectLinkedOpenHashMap) this.taskQueue.get(this.firstQueue)).isEmpty(); ++this.firstQueue) {
-                ;
+            while(this.firstQueue < ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT && this.taskQueue.get(this.firstQueue).isEmpty()) {
+                ++this.firstQueue;
             }
 
-            return list.stream().map((optional) -> {
-                return (Either) optional.map(Either::left).orElseGet(() -> {
-                    return Either.right(this.acquire(j));
-                });
-            });
+            return list.stream().map((optional) -> optional.map(Either::<T, Runnable>left).orElseGet(() -> Either.<T, Runnable>right(this.acquire(j))));
         }
     }
 
Index: net/minecraft/commands/arguments/NbtPathArgument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/arguments/NbtPathArgument.java b/net/minecraft/commands/arguments/NbtPathArgument.java
--- a/net/minecraft/commands/arguments/NbtPathArgument.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/arguments/NbtPathArgument.java	(date 1611660380225)
@@ -461,10 +461,11 @@
             this.index = i;
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public void getTag(Tag tag, List<Tag> list) {
             if (tag instanceof CollectionTag) {
-                CollectionTag collectiontag = (CollectionTag) tag;
+                CollectionTag<Tag> collectiontag = (CollectionTag) tag;
                 int i = collectiontag.size();
                 int j = this.index < 0 ? i + this.index : this.index;
 
Index: net/minecraft/server/network/ServerConnectionListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/network/ServerConnectionListener.java b/net/minecraft/server/network/ServerConnectionListener.java
--- a/net/minecraft/server/network/ServerConnectionListener.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/network/ServerConnectionListener.java	(date 1611648128169)
@@ -57,12 +57,13 @@
         this.running = true;
     }
 
+    // PistonMC - Fix decompile errors
     public void startTcpServerListener(@Nullable InetAddress inetaddress, int i) throws IOException {
-        List list = this.channels;
+        List<ChannelFuture> list = this.channels;
 
         synchronized (this.channels) {
-            Class oclass;
-            LazyLoadedValue lazyloadedvalue;
+            Class<? extends io.netty.channel.socket.ServerSocketChannel> oclass;
+            LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
 
             if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
                 oclass = EpollServerSocketChannel.class;
@@ -74,7 +75,7 @@
                 ServerConnectionListener.LOGGER.info("Using default channel type");
             }
 
-            this.channels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
+            this.channels.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) throws Exception {
                     try {
                         channel.config().setOption(ChannelOption.TCP_NODELAY, true);
@@ -84,13 +85,13 @@
 
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.SERVERBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.CLIENTBOUND));
                     int j = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
-                    Object object = j > 0 ? new RateKickingConnection(j) : new Connection(PacketFlow.SERVERBOUND);
+                    Connection object = j > 0 ? new RateKickingConnection(j) : new Connection(PacketFlow.SERVERBOUND);
 
                     ServerConnectionListener.this.connections.add(object);
-                    channel.pipeline().addLast("packet_handler", (ChannelHandler) object);
-                    ((Connection) object).setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, (Connection) object));
+                    channel.pipeline().addLast("packet_handler", object);
+                    object.setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, object));
                 }
-            }).group((EventLoopGroup) lazyloadedvalue.get()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+            }).group(lazyloadedvalue.get()).localAddress(inetaddress, i).bind().syncUninterruptibly());
         }
     }
 
Index: net/minecraft/server/level/Ticket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/level/Ticket.java b/net/minecraft/server/level/Ticket.java
--- a/net/minecraft/server/level/Ticket.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/level/Ticket.java	(date 1611604039586)
@@ -15,6 +15,7 @@
         this.key = t0;
     }
 
+    // PistonMC - Fix decompile errors
     public int compareTo(Ticket<?> ticket) {
         int i = Integer.compare(this.ticketLevel, ticket.ticketLevel);
 
@@ -23,7 +24,7 @@
         } else {
             int j = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
 
-            return j != 0 ? j : this.type.getComparator().compare(this.key, ticket.key);
+            return j != 0 ? j : this.type.getComparator().compare(this.key, (T) ticket.key);
         }
     }
 
Index: net/minecraft/server/packs/AbstractPackResources.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/packs/AbstractPackResources.java b/net/minecraft/server/packs/AbstractPackResources.java
--- a/net/minecraft/server/packs/AbstractPackResources.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/packs/AbstractPackResources.java	(date 1611656677015)
@@ -51,35 +51,14 @@
         AbstractPackResources.LOGGER.warn("ResourcePack: ignored non-lowercase namespace: {} in {}", s, this.file);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     @Override
     public <T> T getMetadataSection(MetadataSectionSerializer<T> metadatasectionserializer) throws IOException {
-        InputStream inputstream = this.getResource("pack.mcmeta");
-        Throwable throwable = null;
-
-        Object object;
-
-        try {
-            object = getMetadataFromStream(metadatasectionserializer, inputstream);
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (inputstream != null) {
-                if (throwable != null) {
-                    try {
-                        inputstream.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    inputstream.close();
-                }
-            }
-
-        }
-
-        return object;
+        try(InputStream inputstream = this.getResource("pack.mcmeta")) {
+            T object = getMetadataFromStream(metadatasectionserializer, inputstream);
+            return object;
+        }
     }
 
     @Nullable
Index: net/minecraft/server/network/ServerGamePacketListenerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java	(date 1611645202446)
@@ -308,9 +308,10 @@
         minecraftserver.executeBlocking(connection::handleDisconnection);
     }
 
+    // PistonMC - Fix decompile errors
     private <T> void filterTextPacket(T t0, Consumer<T> consumer, BiFunction<TextFilter, T, CompletableFuture<Optional<T>>> bifunction) {
         MinecraftServer minecraftserver = this.player.getLevel().getServer();
-        Consumer consumer1 = (object) -> {
+        Consumer<T> consumer1 = (object) -> {
             if (this.getConnection().isConnected()) {
                 consumer.accept(object);
             } else {
@@ -321,13 +322,9 @@
         TextFilter textfilter = this.player.getTextFilter();
 
         if (textfilter != null) {
-            ((CompletableFuture) bifunction.apply(textfilter, t0)).thenAcceptAsync((optional) -> {
-                optional.ifPresent(consumer1);
-            }, minecraftserver);
+            bifunction.apply(textfilter, t0).thenAcceptAsync((optional) -> optional.ifPresent(consumer1), minecraftserver);
         } else {
-            minecraftserver.execute(() -> {
-                consumer1.accept(t0);
-            });
+            minecraftserver.execute(() -> consumer1.accept(t0));
         }
 
     }
@@ -448,10 +445,11 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void handleRecipeBookSeenRecipePacket(ServerboundRecipeBookSeenRecipePacket serverboundrecipebookseenrecipepacket) {
         PacketUtils.ensureRunningOnSameThread(serverboundrecipebookseenrecipepacket, this, this.player.getLevel());
-        Optional optional = this.server.getRecipeManager().byKey(serverboundrecipebookseenrecipepacket.getRecipe());
+        Optional<? extends net.minecraft.world.item.crafting.Recipe<?>> optional = this.server.getRecipeManager().byKey(serverboundrecipebookseenrecipepacket.getRecipe());
         ServerRecipeBook serverrecipebook = this.player.getRecipeBook();
 
         optional.ifPresent(serverrecipebook::removeHighlight);
@@ -477,6 +475,7 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void handleCustomCommandSuggestions(ServerboundCommandSuggestionPacket serverboundcommandsuggestionpacket) {
         PacketUtils.ensureRunningOnSameThread(serverboundcommandsuggestionpacket, this, this.player.getLevel());
@@ -486,11 +485,9 @@
             stringreader.skip();
         }
 
-        ParseResults parseresults = this.server.getCommands().getDispatcher().parse(stringreader, this.player.createCommandSourceStack());
+        ParseResults<net.minecraft.commands.CommandSourceStack> parseresults = this.server.getCommands().getDispatcher().parse(stringreader, this.player.createCommandSourceStack());
 
-        this.server.getCommands().getDispatcher().getCompletionSuggestions(parseresults).thenAccept((suggestions) -> {
-            this.connection.send(new ClientboundCommandSuggestionsPacket(serverboundcommandsuggestionpacket.getId(), suggestions));
-        });
+        this.server.getCommands().getDispatcher().getCompletionSuggestions(parseresults).thenAccept((suggestions) -> this.connection.send(new ClientboundCommandSuggestionsPacket(serverboundcommandsuggestionpacket.getId(), suggestions)));
     }
 
     @Override
@@ -724,6 +721,7 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void handleEditBook(ServerboundEditBookPacket serverboundeditbookpacket) {
         ItemStack itemstack = serverboundeditbookpacket.getBook();
@@ -732,7 +730,7 @@
             CompoundTag compoundtag = itemstack.getTag();
 
             if (WritableBookItem.makeSureTagIsValid(compoundtag)) {
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList<String> arraylist = Lists.newArrayList();
                 boolean flag = serverboundeditbookpacket.isSigning();
 
                 if (flag) {
@@ -741,19 +739,13 @@
 
                 ListTag listtag = compoundtag.getList("pages", 8);
 
-                int i;
-
-                for (i = 0; i < listtag.size(); ++i) {
+                for (int i = 0; i < listtag.size(); ++i) {
                     arraylist.add(listtag.getString(i));
                 }
 
-                i = serverboundeditbookpacket.getSlot();
+                int i = serverboundeditbookpacket.getSlot();
                 if (Inventory.isHotbarSlot(i) || i == 40) {
-                    this.filterTextPacket((List) arraylist, flag ? (list) -> {
-                        this.signBook((String) list.get(0), list.subList(1, list.size()), i);
-                    } : (list) -> {
-                        this.updateBookContents(list, i);
-                    });
+                    this.filterTextPacket(arraylist, flag ? (list) -> this.signBook(list.get(0), list.subList(1, list.size()), i) : (list) -> this.updateBookContents(list, i));
                 }
             }
         }
@@ -942,15 +934,12 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private boolean isPlayerCollidingWithAnythingNew(LevelReader levelreader, AABB aabb) {
-        Stream stream = levelreader.getCollisions(this.player, this.player.getBoundingBox().deflate(9.999999747378752E-6D), (entity) -> {
-            return true;
-        });
+        Stream<VoxelShape> stream = levelreader.getCollisions(this.player, this.player.getBoundingBox().deflate(9.999999747378752E-6D), (entity) -> true);
         VoxelShape voxelshape = Shapes.create(aabb.deflate(9.999999747378752E-6D));
 
-        return stream.anyMatch((voxelshape1) -> {
-            return !Shapes.joinIsNotEmpty(voxelshape1, voxelshape, BooleanOp.AND);
-        });
+        return stream.anyMatch((voxelshape1) -> !Shapes.joinIsNotEmpty(voxelshape1, voxelshape, BooleanOp.AND));
     }
 
     public void teleport(double d0, double d1, double d2, float f, float f1) {
Index: net/minecraft/server/packs/VanillaPackResources.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/packs/VanillaPackResources.java b/net/minecraft/server/packs/VanillaPackResources.java
--- a/net/minecraft/server/packs/VanillaPackResources.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/packs/VanillaPackResources.java	(date 1611661946548)
@@ -168,33 +168,11 @@
         return hashset;
     }
 
+    // PistonMC - Fix decompile errors
     private static void getResources(Collection<ResourceLocation> collection, int i, String s, Path path, String s1, Predicate<String> predicate) throws IOException {
         Path path1 = path.resolve(s);
-        Stream stream = Files.walk(path1.resolve(s1), i, new FileVisitOption[0]);
-        Throwable throwable = null;
-
-        try {
-            stream.filter((path2) -> {
-                return !path2.endsWith(".mcmeta") && Files.isRegularFile(path2, new LinkOption[0]) && predicate.test(path2.getFileName().toString());
-            }).map((path2) -> {
-                return new ResourceLocation(s, path1.relativize(path2).toString().replaceAll("\\\\", "/"));
-            }).forEach(collection::add);
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (stream != null) {
-                if (throwable != null) {
-                    try {
-                        stream.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    stream.close();
-                }
-            }
-
+        try(Stream<Path> stream = Files.walk(path1.resolve(s1), i)) {
+            stream.filter((path2) -> !path2.endsWith(".mcmeta") && Files.isRegularFile(path2) && predicate.test(path2.getFileName().toString())).map((path2) -> new ResourceLocation(s, path1.relativize(path2).toString().replaceAll("\\\\", "/"))).forEach(collection::add);
         }
 
     }
@@ -263,35 +241,12 @@
         return this.namespaces;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     @Override
     public <T> T getMetadataSection(MetadataSectionSerializer<T> metadatasectionserializer) throws IOException {
-        try {
-            InputStream inputstream = this.getRootResource("pack.mcmeta");
-            Throwable throwable = null;
-
-            Object object;
-
-            try {
-                object = AbstractPackResources.getMetadataFromStream(metadatasectionserializer, inputstream);
-            } catch (Throwable throwable1) {
-                throwable = throwable1;
-                throw throwable1;
-            } finally {
-                if (inputstream != null) {
-                    if (throwable != null) {
-                        try {
-                            inputstream.close();
-                        } catch (Throwable throwable2) {
-                            throwable.addSuppressed(throwable2);
-                        }
-                    } else {
-                        inputstream.close();
-                    }
-                }
-
-            }
-
+        try(InputStream inputstream = this.getRootResource("pack.mcmeta")) {
+            T object = AbstractPackResources.getMetadataFromStream(metadatasectionserializer, inputstream);
             return object;
         } catch (FileNotFoundException | RuntimeException runtimeexception) {
             return null;
Index: net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java b/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
--- a/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java	(date 1611648888640)
@@ -6,12 +6,13 @@
 
 public interface AreaTransformer1 extends DimensionTransformer {
 
+    // PistonMC - Fix decompile errors
     default <R extends Area> AreaFactory<R> run(BigContext<R> bigcontext, AreaFactory<R> areafactory) {
         return () -> {
-            Area area = areafactory.make();
+            R area = areafactory.make();
 
             return bigcontext.createResult((i, j) -> {
-                bigcontext.initRandom((long) i, (long) j);
+                bigcontext.initRandom(i, j);
                 return this.applyPixel(bigcontext, area, i, j);
             }, area);
         };
Index: net/minecraft/world/level/block/state/properties/Property.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/state/properties/Property.java b/net/minecraft/world/level/block/state/properties/Property.java
--- a/net/minecraft/world/level/block/state/properties/Property.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/state/properties/Property.java	(date 1611565689827)
@@ -16,12 +16,10 @@
     private final Codec<T> codec;
     private final Codec<Property.Value<T>> valueCodec;
 
+    // PistonMC - Fix decompile errors
     protected Property(String s, Class<T> oclass) {
-        this.codec = Codec.STRING.comapFlatMap((s1) -> {
-            return (DataResult) this.getValue(s1).map(DataResult::success).orElseGet(() -> {
-                return DataResult.error("Unable to read property: " + this + " with value: " + s1);
-            });
-        }, this::getName);
+        this.codec = Codec.STRING.comapFlatMap((s1) -> this.getValue(s1).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + s1)),
+                this::getName);
         this.valueCodec = this.codec.xmap(this::value, Property.Value::value);
         this.clazz = oclass;
         this.name = s;
Index: net/minecraft/server/packs/FolderPackResources.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/packs/FolderPackResources.java b/net/minecraft/server/packs/FolderPackResources.java
--- a/net/minecraft/server/packs/FolderPackResources.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/packs/FolderPackResources.java	(date 1611657623547)
@@ -3,10 +3,8 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
+
+import java.io.*;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -73,18 +71,15 @@
         return null;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Set<String> getNamespaces(PackType packtype) {
-        HashSet hashset = Sets.newHashSet();
+        HashSet<String> hashset = Sets.newHashSet();
         File file = new File(this.file, packtype.getDirectory());
-        File[] afile = file.listFiles(DirectoryFileFilter.DIRECTORY);
+        File[] afile = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
 
         if (afile != null) {
-            File[] afile1 = afile;
-            int i = afile.length;
-
-            for (int j = 0; j < i; ++j) {
-                File file1 = afile1[j];
+            for(File file1 : afile) {
                 String s = getRelativePath(file, file1);
 
                 if (s.equals(s.toLowerCase(Locale.ROOT))) {
Index: net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java b/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
--- a/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java	(date 1611652755057)
@@ -7,13 +7,14 @@
 
 public interface AreaTransformer2 extends DimensionTransformer {
 
+    // PistonMC - Fix decompile errors
     default <R extends Area> AreaFactory<R> run(BigContext<R> bigcontext, AreaFactory<R> areafactory, AreaFactory<R> areafactory1) {
         return () -> {
-            Area area = areafactory.make();
-            Area area1 = areafactory1.make();
+            R area = areafactory.make();
+            R area1 = areafactory1.make();
 
             return bigcontext.createResult((i, j) -> {
-                bigcontext.initRandom((long) i, (long) j);
+                bigcontext.initRandom(i, j);
                 return this.applyPixel(bigcontext, area, area1, i, j);
             }, area, area1);
         };
Index: net/minecraft/server/players/PlayerList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
--- a/net/minecraft/server/players/PlayerList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/players/PlayerList.java	(date 1611645202510)
@@ -659,8 +659,9 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public void deop(GameProfile gameprofile) {
-        this.ops.remove((Object) gameprofile);
+        this.ops.remove(gameprofile);
         ServerPlayer serverplayer = this.getPlayer(gameprofile.getId());
 
         if (serverplayer != null) {
Index: net/minecraft/util/thread/ProcessorHandle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/thread/ProcessorHandle.java b/net/minecraft/util/thread/ProcessorHandle.java
--- a/net/minecraft/util/thread/ProcessorHandle.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/thread/ProcessorHandle.java	(date 1611508395017)
@@ -13,19 +13,21 @@
 
     default void close() {}
 
+    // PistonMC - Fix decompile errors
     default <Source> CompletableFuture<Source> ask(Function<? super ProcessorHandle<Source>, ? extends Msg> function) {
-        CompletableFuture completablefuture = new CompletableFuture();
+        CompletableFuture<Source> completablefuture = new CompletableFuture();
 
-        completablefuture.getClass();
-        Object object = function.apply(of("ask future procesor handle", completablefuture::complete));
+//        completablefuture.getClass();
+        Msg object = function.apply(of("ask future procesor handle", completablefuture::complete));
 
         this.tell(object);
         return completablefuture;
     }
 
+    // PistonMC - Fix decompile errors
     default <Source> CompletableFuture<Source> askEither(Function<? super ProcessorHandle<Either<Source, Exception>>, ? extends Msg> function) {
-        CompletableFuture completablefuture = new CompletableFuture();
-        Object object = function.apply(of("ask future procesor handle", (either) -> {
+        CompletableFuture<Source> completablefuture = new CompletableFuture<>();
+        Msg object = function.apply(of("ask future procesor handle", (either) -> {
             either.ifLeft(completablefuture::complete);
             either.ifRight(completablefuture::completeExceptionally);
         }));
Index: net/minecraft/server/players/StoredUserList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/players/StoredUserList.java b/net/minecraft/server/players/StoredUserList.java
--- a/net/minecraft/server/players/StoredUserList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/players/StoredUserList.java	(date 1611645202475)
@@ -49,10 +49,11 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public V get(K k0) {
         this.removeExpired();
-        return (StoredUserEntry) this.map.get(this.getKeyForUser(k0));
+        return this.map.get(this.getKeyForUser(k0));
     }
 
     public void remove(K k0) {
@@ -86,23 +87,16 @@
         return this.map.containsKey(this.getKeyForUser(k0));
     }
 
+    // PistonMC - Fix decompile errors
     private void removeExpired() {
-        ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.map.values().iterator();
-
-        while (iterator.hasNext()) {
-            StoredUserEntry storeduserentry = (StoredUserEntry) iterator.next();
-
+        ArrayList<K> arraylist = Lists.newArrayList();
+        for(V storeduserentry : this.map.values()) {
             if (storeduserentry.hasExpired()) {
                 arraylist.add(storeduserentry.getUser());
             }
         }
 
-        iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            Object object = iterator.next();
-
+        for(K object : arraylist) {
             this.map.remove(this.getKeyForUser(object));
         }
 
@@ -148,42 +142,21 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public void load() throws IOException {
         if (this.file.exists()) {
-            BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8);
-            Throwable throwable = null;
-
-            try {
-                JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
+            try(BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8)) {
+                JsonArray jsonarray = StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
 
                 this.map.clear();
-                Iterator iterator = jsonarray.iterator();
-
-                while (iterator.hasNext()) {
-                    JsonElement jsonelement = (JsonElement) iterator.next();
+                for(JsonElement jsonelement : jsonarray) {
                     JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "entry");
-                    StoredUserEntry storeduserentry = this.createEntry(jsonobject);
+                    StoredUserEntry<K> storeduserentry = this.createEntry(jsonobject);
 
                     if (storeduserentry.getUser() != null) {
-                        this.map.put(this.getKeyForUser(storeduserentry.getUser()), storeduserentry);
+                        this.map.put(this.getKeyForUser(storeduserentry.getUser()), (V) storeduserentry);
                     }
                 }
-            } catch (Throwable throwable1) {
-                throwable = throwable1;
-                throw throwable1;
-            } finally {
-                if (bufferedreader != null) {
-                    if (throwable != null) {
-                        try {
-                            bufferedreader.close();
-                        } catch (Throwable throwable2) {
-                            throwable.addSuppressed(throwable2);
-                        }
-                    } else {
-                        bufferedreader.close();
-                    }
-                }
-
             }
 
         }
Index: net/minecraft/util/thread/BlockableEventLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/thread/BlockableEventLoop.java b/net/minecraft/util/thread/BlockableEventLoop.java
--- a/net/minecraft/util/thread/BlockableEventLoop.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/thread/BlockableEventLoop.java	(date 1611508050303)
@@ -50,13 +50,13 @@
         }, this);
     }
 
+    // PistonMC - Fix decompile errors
     public CompletableFuture<Void> submit(Runnable runnable) {
         if (this.scheduleExecutables()) {
             return this.submitAsync(runnable);
-        } else {
-            runnable.run();
-            return CompletableFuture.completedFuture((Object) null);
-        }
+        }
+        runnable.run();
+        return CompletableFuture.completedFuture(null);
     }
 
     public void executeBlocking(Runnable runnable) {
@@ -89,15 +89,16 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     protected boolean pollTask() {
-        Runnable runnable = (Runnable) this.pendingRunnables.peek();
+        R runnable = this.pendingRunnables.peek();
 
         if (runnable == null) {
             return false;
         } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
             return false;
         } else {
-            this.doRunTask((Runnable) this.pendingRunnables.remove());
+            this.doRunTask(this.pendingRunnables.remove());
             return true;
         }
     }
Index: net/minecraft/commands/synchronization/SuggestionProviders.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/synchronization/SuggestionProviders.java b/net/minecraft/commands/synchronization/SuggestionProviders.java
--- a/net/minecraft/commands/synchronization/SuggestionProviders.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/synchronization/SuggestionProviders.java	(date 1611662945850)
@@ -38,12 +38,13 @@
         });
     });
 
+    // PistonMC - Fix decompile errors
     public static <S extends SharedSuggestionProvider> SuggestionProvider<S> register(ResourceLocation resourcelocation, SuggestionProvider<SharedSuggestionProvider> suggestionprovider) {
         if (SuggestionProviders.PROVIDERS_BY_NAME.containsKey(resourcelocation)) {
             throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourcelocation);
         } else {
             SuggestionProviders.PROVIDERS_BY_NAME.put(resourcelocation, suggestionprovider);
-            return new SuggestionProviders.Wrapper(resourcelocation, suggestionprovider);
+            return (SuggestionProvider<S>) new SuggestionProviders.Wrapper(resourcelocation, suggestionprovider);
         }
     }
 
Index: net/minecraft/world/level/chunk/PalettedContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/PalettedContainer.java b/net/minecraft/world/level/chunk/PalettedContainer.java
--- a/net/minecraft/world/level/chunk/PalettedContainer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/PalettedContainer.java	(date 1611605183236)
@@ -82,18 +82,19 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public int onResize(int i, T t0) {
         this.acquire();
         BitStorage bitstorage = this.storage;
-        Palette palette = this.palette;
+        Palette<T> palette = this.palette;
 
         this.setBits(i);
 
         int j;
 
         for (j = 0; j < bitstorage.getSize(); ++j) {
-            Object object = palette.valueFor(bitstorage.get(j));
+            T object = palette.valueFor(bitstorage.get(j));
 
             if (object != null) {
                 this.set(j, object);
@@ -105,9 +106,10 @@
         return j;
     }
 
+    // PistonMC - Fix decompile errors
     public T getAndSet(int i, int j, int k, T t0) {
         this.acquire();
-        Object object = this.getAndSet(getIndex(i, j, k), t0);
+        T object = this.getAndSet(getIndex(i, j, k), t0);
 
         this.release();
         return object;
@@ -117,10 +119,11 @@
         return this.getAndSet(getIndex(i, j, k), t0);
     }
 
+    // PistonMC - Fix decompile errors
     protected T getAndSet(int i, T t0) {
         int j = this.palette.idFor(t0);
         int k = this.storage.getAndSet(i, j);
-        Object object = this.palette.valueFor(k);
+        T object = this.palette.valueFor(k);
 
         return object == null ? this.defaultValue : object;
     }
@@ -135,8 +138,9 @@
         return this.get(getIndex(i, j, k));
     }
 
+    // PistonMC - Fix decompile errors
     protected T get(int i) {
-        Object object = this.palette.valueFor(this.storage.get(i));
+        T object = this.palette.valueFor(this.storage.get(i));
 
         return object == null ? this.defaultValue : object;
     }
@@ -149,6 +153,7 @@
         this.release();
     }
 
+    // PistonMC - Fix decompile errors
     public void read(ListTag listtag, long[] along) {
         this.acquire();
         int i = Math.max(4, Mth.ceillog2(listtag.size()));
@@ -161,7 +166,7 @@
         int j = along.length * 64 / 4096;
 
         if (this.palette == this.globalPalette) {
-            HashMapPalette hashmappalette = new HashMapPalette<>(this.registry, i, this.dummyPaletteResize, this.reader, this.writer);
+            HashMapPalette<T> hashmappalette = new HashMapPalette<>(this.registry, i, this.dummyPaletteResize, this.reader, this.writer);
 
             hashmappalette.read(listtag);
             BitStorage bitstorage = new BitStorage(i, 4096, along);
Index: net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java	(date 1611575329308)
@@ -237,6 +237,7 @@
         return compoundtag;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void tick() {
         boolean flag = this.isLit();
@@ -247,14 +248,14 @@
         }
 
         if (!this.level.isClientSide) {
-            ItemStack itemstack = (ItemStack) this.items.get(1);
+            ItemStack itemstack = this.items.get(1);
 
-            if (!this.isLit() && (itemstack.isEmpty() || ((ItemStack) this.items.get(0)).isEmpty())) {
+            if (!this.isLit() && (itemstack.isEmpty() || this.items.get(0).isEmpty())) {
                 if (!this.isLit() && this.cookingProgress > 0) {
                     this.cookingProgress = Mth.clamp(this.cookingProgress - 2, 0, this.cookingTotalTime);
                 }
             } else {
-                Recipe recipe = (Recipe) this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse((Object) null);
+                Recipe<net.minecraft.world.Container> recipe = this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse(null);
 
                 if (!this.isLit() && this.canBurn(recipe)) {
                     this.litTime = this.getBurnDuration(itemstack);
@@ -289,7 +290,7 @@
 
             if (flag != this.isLit()) {
                 flag1 = true;
-                this.level.setBlock(this.worldPosition, (BlockState) this.level.getBlockState(this.worldPosition).setValue(AbstractFurnaceBlock.LIT, this.isLit()), 3);
+                this.level.setBlock(this.worldPosition, this.level.getBlockState(this.worldPosition).setValue(AbstractFurnaceBlock.LIT, this.isLit()), 3);
             }
         }
 
Index: net/minecraft/tags/Tag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/tags/Tag.java b/net/minecraft/tags/Tag.java
--- a/net/minecraft/tags/Tag.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/tags/Tag.java	(date 1611555536109)
@@ -22,24 +22,19 @@
 
 public interface Tag<T> {
 
+    // PistonMC - Fix decompile errors
     static <T> Codec<Tag<T>> codec(Supplier<TagCollection<T>> supplier) {
-        return ResourceLocation.CODEC.flatXmap((resourcelocation) -> {
-            return (DataResult) Optional.ofNullable(((TagCollection) supplier.get()).getTag(resourcelocation)).map(DataResult::success).orElseGet(() -> {
-                return DataResult.error("Unknown tag: " + resourcelocation);
-            });
-        }, (tag) -> {
-            return (DataResult) Optional.ofNullable(((TagCollection) supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> {
-                return DataResult.error("Unknown tag: " + tag);
-            });
-        });
+        return ResourceLocation.CODEC.flatXmap((resourcelocation) -> Optional.ofNullable(supplier.get().getTag(resourcelocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourcelocation)),
+                (tag) -> Optional.ofNullable(supplier.get().getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
     }
 
     boolean contains(T t0);
 
     List<T> getValues();
 
+    // PistonMC - Fix decompile errors
     default T getRandomElement(Random random) {
-        List list = this.getValues();
+        List<T> list = this.getValues();
 
         return list.get(random.nextInt(list.size()));
     }
@@ -124,9 +119,10 @@
             this.id = resourcelocation;
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public <T> boolean build(Function<ResourceLocation, Tag<T>> function, Function<ResourceLocation, T> function1, Consumer<T> consumer) {
-            Object object = function1.apply(this.id);
+            T object = function1.apply(this.id);
 
             if (object != null) {
                 consumer.accept(object);
@@ -157,9 +153,10 @@
             this.id = resourcelocation;
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public <T> boolean build(Function<ResourceLocation, Tag<T>> function, Function<ResourceLocation, T> function1, Consumer<T> consumer) {
-            Object object = function1.apply(this.id);
+            T object = function1.apply(this.id);
 
             if (object == null) {
                 return false;
@@ -244,14 +241,11 @@
             });
         }
 
+        // PistonMC - Fix decompile errors
         public Tag.Builder addFromJson(JsonObject jsonobject, String s) {
             JsonArray jsonarray = GsonHelper.getAsJsonArray(jsonobject, "values");
-            ArrayList arraylist = Lists.newArrayList();
-            Iterator iterator = jsonarray.iterator();
-
-            while (iterator.hasNext()) {
-                JsonElement jsonelement = (JsonElement) iterator.next();
-
+            ArrayList<Entry> arraylist = Lists.newArrayList();
+            for(JsonElement jsonelement : jsonarray) {
                 arraylist.add(parseEntry(jsonelement));
             }
 
@@ -259,9 +253,7 @@
                 this.entries.clear();
             }
 
-            arraylist.forEach((tag_entry) -> {
-                this.entries.add(new Tag.BuilderEntry(tag_entry, s));
-            });
+            arraylist.forEach((tag_entry) -> this.entries.add(new BuilderEntry(tag_entry, s)));
             return this;
         }
 
Index: net/minecraft/world/level/block/entity/BellBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/entity/BellBlockEntity.java b/net/minecraft/world/level/block/entity/BellBlockEntity.java
--- a/net/minecraft/world/level/block/entity/BellBlockEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/entity/BellBlockEntity.java	(date 1611575329287)
@@ -93,6 +93,7 @@
         this.level.blockEvent(blockpos, this.getBlockState().getBlock(), 1, direction.get3DDataValue());
     }
 
+    // PistonMC - Fix decompile errors
     private void updateEntities() {
         BlockPos blockpos = this.getBlockPos();
 
@@ -104,13 +105,9 @@
         }
 
         if (!this.level.isClientSide) {
-            Iterator iterator = this.nearbyEntities.iterator();
-
-            while (iterator.hasNext()) {
-                LivingEntity livingentity = (LivingEntity) iterator.next();
-
-                if (livingentity.isAlive() && !livingentity.removed && blockpos.closerThan((Position) livingentity.position(), 32.0D)) {
-                    livingentity.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, (Object) this.level.getGameTime());
+            for(LivingEntity livingentity : this.nearbyEntities) {
+                if (livingentity.isAlive() && !livingentity.removed && blockpos.closerThan(livingentity.position(), 32.0D)) {
+                    livingentity.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.level.getGameTime());
                 }
             }
         }
Index: net/minecraft/world/level/timers/TimerQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/timers/TimerQueue.java b/net/minecraft/world/level/timers/TimerQueue.java
--- a/net/minecraft/world/level/timers/TimerQueue.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/timers/TimerQueue.java	(date 1611589198770)
@@ -25,12 +25,10 @@
     private UnsignedLong sequentialId;
     private final Table<String, Long, TimerQueue.Event<T>> events;
 
+    // PistonMC - Fix decompile errors
     private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-        return Comparator.comparingLong((timerqueue_event) -> {
-            return timerqueue_event.triggerTime;
-        }).thenComparing((timerqueue_event) -> {
-            return timerqueue_event.sequentialId;
-        });
+        return Comparator.<TimerQueue.Event<T>>comparingLong((timerqueue_event) -> timerqueue_event.triggerTime)
+                .thenComparing((timerqueue_event) -> timerqueue_event.sequentialId);
     }
 
     public TimerQueue(TimerCallbacks<T> timercallbacks, Stream<Dynamic<Tag>> stream) {
Index: net/minecraft/world/level/block/entity/BlockEntityType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/entity/BlockEntityType.java b/net/minecraft/world/level/block/entity/BlockEntityType.java
--- a/net/minecraft/world/level/block/entity/BlockEntityType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/entity/BlockEntityType.java	(date 1611575329303)
@@ -78,20 +78,22 @@
         this.dataType = type;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public T create() {
-        return (BlockEntity) this.factory.get();
+        return this.factory.get();
     }
 
     public boolean isValid(Block block) {
         return this.validBlocks.contains(block);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public T getBlockEntity(BlockGetter blockgetter, BlockPos blockpos) {
         BlockEntity blockentity = blockgetter.getBlockEntity(blockpos);
 
-        return blockentity != null && blockentity.getType() == this ? blockentity : null;
+        return blockentity != null && blockentity.getType() == this ? (T) blockentity : null;
     }
 
     public static final class Builder<T extends BlockEntity> {
Index: net/minecraft/tags/TagCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/tags/TagCollection.java b/net/minecraft/tags/TagCollection.java
--- a/net/minecraft/tags/TagCollection.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/tags/TagCollection.java	(date 1611634049252)
@@ -43,22 +43,15 @@
         return this.getAllTags().keySet();
     }
 
+    // PistonMC - Fix decompile errors
     default void serializeToNetwork(FriendlyByteBuf friendlybytebuf, DefaultedRegistry<T> defaultedregistry) {
-        Map map = this.getAllTags();
+        Map<ResourceLocation, Tag<T>> map = this.getAllTags();
 
         friendlybytebuf.writeVarInt(map.size());
-        Iterator iterator = map.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-
-            friendlybytebuf.writeResourceLocation((ResourceLocation) entry.getKey());
-            friendlybytebuf.writeVarInt(((Tag) entry.getValue()).getValues().size());
-            Iterator iterator1 = ((Tag) entry.getValue()).getValues().iterator();
-
-            while (iterator1.hasNext()) {
-                Object object = iterator1.next();
-
+        for(Entry<ResourceLocation, Tag<T>> entry : map.entrySet()) {
+            friendlybytebuf.writeResourceLocation(entry.getKey());
+            friendlybytebuf.writeVarInt(entry.getValue().getValues().size());
+            for(T object : entry.getValue().getValues()) {
                 friendlybytebuf.writeVarInt(defaultedregistry.getId(object));
             }
         }
Index: net/minecraft/tags/TagManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/tags/TagManager.java b/net/minecraft/tags/TagManager.java
--- a/net/minecraft/tags/TagManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/tags/TagManager.java	(date 1611648128158)
@@ -6,6 +6,7 @@
 import java.util.concurrent.Executor;
 import java.util.stream.Collectors;
 import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -34,27 +35,26 @@
         return this.tags;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier preparablereloadlistener_preparationbarrier, ResourceManager resourcemanager, ProfilerFiller profilerfiller, ProfilerFiller profilerfiller1, Executor executor, Executor executor1) {
-        CompletableFuture completablefuture = this.blocks.prepare(resourcemanager, executor);
-        CompletableFuture completablefuture1 = this.items.prepare(resourcemanager, executor);
-        CompletableFuture completablefuture2 = this.fluids.prepare(resourcemanager, executor);
-        CompletableFuture completablefuture3 = this.entityTypes.prepare(resourcemanager, executor);
-        CompletableFuture completablefuture4 = CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3);
+        CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture = this.blocks.prepare(resourcemanager, executor);
+        CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture1 = this.items.prepare(resourcemanager, executor);
+        CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture2 = this.fluids.prepare(resourcemanager, executor);
+        CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture3 = this.entityTypes.prepare(resourcemanager, executor);
+        CompletableFuture<Void> completablefuture4 = CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3);
 
-        preparablereloadlistener_preparationbarrier.getClass();
+//        preparablereloadlistener_preparationbarrier.getClass();
         return completablefuture4.thenCompose(preparablereloadlistener_preparationbarrier::wait).thenAcceptAsync((ovoid) -> {
-            TagCollection tagcollection = this.blocks.load((Map) completablefuture.join());
-            TagCollection tagcollection1 = this.items.load((Map) completablefuture1.join());
-            TagCollection tagcollection2 = this.fluids.load((Map) completablefuture2.join());
-            TagCollection tagcollection3 = this.entityTypes.load((Map) completablefuture3.join());
+            TagCollection<Block> tagcollection = this.blocks.load(completablefuture.join());
+            TagCollection<Item> tagcollection1 = this.items.load(completablefuture1.join());
+            TagCollection<Fluid> tagcollection2 = this.fluids.load(completablefuture2.join());
+            TagCollection<EntityType<?>> tagcollection3 = this.entityTypes.load(completablefuture3.join());
             TagContainer tagcontainer = TagContainer.of(tagcollection, tagcollection1, tagcollection2, tagcollection3);
-            Multimap multimap = StaticTags.getAllMissingTags(tagcontainer);
+            Multimap<ResourceLocation, ResourceLocation> multimap = StaticTags.getAllMissingTags(tagcontainer);
 
             if (!multimap.isEmpty()) {
-                throw new IllegalStateException("Missing required tags: " + (String) multimap.entries().stream().map((entry) -> {
-                    return entry.getKey() + ":" + entry.getValue();
-                }).sorted().collect(Collectors.joining(",")));
+                throw new IllegalStateException("Missing required tags: " + multimap.entries().stream().map((entry) -> entry.getKey() + ":" + entry.getValue()).sorted().collect(Collectors.joining(",")));
             } else {
                 SerializationTags.bind(tagcontainer);
                 this.tags = tagcontainer;
Index: net/minecraft/tags/TagLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/tags/TagLoader.java b/net/minecraft/tags/TagLoader.java
--- a/net/minecraft/tags/TagLoader.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/tags/TagLoader.java	(date 1611634049257)
@@ -127,20 +127,17 @@
         }, executor);
     }
 
+    // PistonMC - Fix decompile errors
     public TagCollection<T> load(Map<ResourceLocation, Tag.Builder> map) {
-        HashMap hashmap = Maps.newHashMap();
-        Function function = hashmap::get;
-        Function function1 = (resourcelocation) -> {
-            return ((Optional) this.idToValue.apply(resourcelocation)).orElse((Object) null);
-        };
+        HashMap<ResourceLocation, Tag<T>> hashmap = Maps.newHashMap();
+        Function<ResourceLocation, Tag<T>> function = hashmap::get;
+        Function<ResourceLocation, T> function1 = (resourcelocation) -> this.idToValue.apply(resourcelocation).orElse(null);
 
         while (!map.isEmpty()) {
             boolean flag = false;
-            Iterator iterator = map.entrySet().iterator();
-
-            while (iterator.hasNext()) {
-                Entry entry = (Entry) iterator.next();
-                Optional optional = ((Tag.Builder) entry.getValue()).build(function, function1);
+            for(Iterator<Entry<ResourceLocation, Tag.Builder>> iterator = map.entrySet().iterator(); iterator.hasNext(); ) {
+                Entry<ResourceLocation, Tag.Builder> entry = iterator.next();
+                Optional<Tag<T>> optional = entry.getValue().build(function, function1);
 
                 if (optional.isPresent()) {
                     hashmap.put(entry.getKey(), optional.get());
@@ -154,9 +151,7 @@
             }
         }
 
-        map.forEach((resourcelocation, tag_builder) -> {
-            TagLoader.LOGGER.error("Couldn't load {} tag {} as it is missing following references: {}", this.name, resourcelocation, tag_builder.getUnresolvedEntries(function, function1).map(Objects::toString).collect(Collectors.joining(",")));
-        });
+        map.forEach((resourcelocation, tag_builder) -> TagLoader.LOGGER.error("Couldn't load {} tag {} as it is missing following references: {}", this.name, resourcelocation, tag_builder.getUnresolvedEntries(function, function1).map(Objects::toString).collect(Collectors.joining(","))));
         return TagCollection.of(hashmap);
     }
 }
Index: net/minecraft/world/level/pathfinder/PathFinder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/pathfinder/PathFinder.java b/net/minecraft/world/level/pathfinder/PathFinder.java
--- a/net/minecraft/world/level/pathfinder/PathFinder.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/pathfinder/PathFinder.java	(date 1611635217279)
@@ -43,19 +43,20 @@
         return path;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     private Path findPath(Node node, Map<Target, BlockPos> map, float f, int i, float f1) {
-        Set set = map.keySet();
+        Set<Target> set = map.keySet();
 
         node.g = 0.0F;
         node.h = this.getBestH(node, set);
         node.f = node.h;
         this.openSet.clear();
         this.openSet.insert(node);
-        ImmutableSet immutableset = ImmutableSet.of();
+//        ImmutableSet immutableset = ImmutableSet.of();
         int j = 0;
-        HashSet hashset = Sets.newHashSetWithExpectedSize(set.size());
-        int k = (int) ((float) this.maxVisitedNodes * f1);
+        HashSet<Target> hashset = Sets.newHashSetWithExpectedSize(set.size());
+        int k = (int) (this.maxVisitedNodes * f1);
 
         while (!this.openSet.isEmpty()) {
             ++j;
@@ -66,12 +67,8 @@
             Node node1 = this.openSet.pop();
 
             node1.closed = true;
-            Iterator iterator = set.iterator();
-
-            while (iterator.hasNext()) {
-                Target target = (Target) iterator.next();
-
-                if (node1.distanceManhattan((Node) target) <= (float) i) {
+            for(Target target : set) {
+                if (node1.distanceManhattan(target) <= i) {
                     target.setReached();
                     hashset.add(target);
                 }
@@ -106,16 +103,12 @@
             }
         }
 
-        Optional optional = !hashset.isEmpty() ? hashset.stream().map((target1) -> {
-            return this.reconstructPath(target1.getBestNode(), (BlockPos) map.get(target1), true);
-        }).min(Comparator.comparingInt(Path::getNodeCount)) : set.stream().map((target1) -> {
-            return this.reconstructPath(target1.getBestNode(), (BlockPos) map.get(target1), false);
-        }).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount));
+        Optional<Path> optional = !hashset.isEmpty() ? hashset.stream().map((target1) -> this.reconstructPath(target1.getBestNode(), map.get(target1), true)).min(Comparator.comparingInt(Path::getNodeCount)) : set.stream().map((target1) -> this.reconstructPath(target1.getBestNode(), map.get(target1), false)).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount));
 
         if (!optional.isPresent()) {
             return null;
         } else {
-            Path path = (Path) optional.get();
+            Path path = optional.get();
 
             return path;
         }
Index: net/minecraft/util/WeighedRandom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/WeighedRandom.java b/net/minecraft/util/WeighedRandom.java
--- a/net/minecraft/util/WeighedRandom.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/WeighedRandom.java	(date 1611575644919)
@@ -29,11 +29,12 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public static <T extends WeighedRandom.WeighedRandomItem> T getWeightedItem(List<T> list, int i) {
         int j = 0;
 
         for (int k = list.size(); j < k; ++j) {
-            WeighedRandom.WeighedRandomItem weighedrandom_weighedrandomitem = (WeighedRandom.WeighedRandomItem) list.get(j);
+            T weighedrandom_weighedrandomitem = list.get(j);
 
             i -= weighedrandom_weighedrandomitem.weight;
             if (i < 0) {
Index: net/minecraft/util/datafix/fixes/RenamedCoralFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
--- a/net/minecraft/util/datafix/fixes/RenamedCoralFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/RenamedCoralFix.java	(date 1611656677000)
@@ -5,5 +5,6 @@
 
 public class RenamedCoralFix {
 
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+    // PistonMC - Fix decompile errors
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
Index: net/minecraft/world/level/storage/LevelStorageSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/LevelStorageSource.java b/net/minecraft/world/level/storage/LevelStorageSource.java
--- a/net/minecraft/world/level/storage/LevelStorageSource.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java	(date 1611585862585)
@@ -40,6 +40,7 @@
 import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
@@ -71,46 +72,41 @@
         return new LevelStorageSource(path, path.resolve("../backups"), DataFixers.getDataFixer());
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> dynamic, DataFixer datafixer, int i) {
-        Dynamic dynamic1 = dynamic.get("WorldGenSettings").orElseEmptyMap();
-        UnmodifiableIterator unmodifiableiterator = LevelStorageSource.OLD_SETTINGS_KEYS.iterator();
-
-        while (unmodifiableiterator.hasNext()) {
-            String s = (String) unmodifiableiterator.next();
-            Optional optional = dynamic.get(s).result();
+        Dynamic<T> dynamic1 = dynamic.get("WorldGenSettings").orElseEmptyMap();
+        for(String s : LevelStorageSource.OLD_SETTINGS_KEYS) {
+            Optional<Dynamic<T>> optional = dynamic.get(s).result();
 
             if (optional.isPresent()) {
-                dynamic1 = dynamic1.set(s, (Dynamic) optional.get());
+                dynamic1 = dynamic1.set(s, optional.get());
             }
         }
 
-        Dynamic dynamic2 = datafixer.update(References.WORLD_GEN_SETTINGS, dynamic1, i, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult dataresult = WorldGenSettings.CODEC.parse(dynamic2);
+        Dynamic<T> dynamic2 = datafixer.update(References.WORLD_GEN_SETTINGS, dynamic1, i, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.parse(dynamic2);
         Logger logger = LevelStorageSource.LOGGER;
 
-        logger.getClass();
+//        logger.getClass();
         return Pair.of(dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).orElseGet(() -> {
-            DataResult dataresult1 = RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic2);
+            DataResult<Registry<DimensionType>> dataresult1 = RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic2);
             Logger logger1 = LevelStorageSource.LOGGER;
 
-            logger1.getClass();
-            Registry registry = (Registry) dataresult1.resultOrPartial(Util.prefix("Dimension type registry: ", logger1::error)).orElseThrow(() -> {
-                return new IllegalStateException("Failed to get dimension registry");
-            });
+//            logger1.getClass();
+            Registry<DimensionType> registry = dataresult1.resultOrPartial(Util.prefix("Dimension type registry: ", logger1::error))
+                    .orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
 
-            dataresult1 = RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic2);
+            DataResult<Registry<Biome>> dataresult2 = RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic2);
             logger1 = LevelStorageSource.LOGGER;
-            logger1.getClass();
-            Registry registry1 = (Registry) dataresult1.resultOrPartial(Util.prefix("Biome registry: ", logger1::error)).orElseThrow(() -> {
-                return new IllegalStateException("Failed to get biome registry");
-            });
+//            logger1.getClass();
+            Registry<Biome> registry1 = dataresult2.resultOrPartial(Util.prefix("Biome registry: ", logger1::error))
+                    .orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
 
-            dataresult1 = RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic2);
+            DataResult<Registry<net.minecraft.world.level.levelgen.NoiseGeneratorSettings>> dataresult3 = RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic2);
             logger1 = LevelStorageSource.LOGGER;
-            logger1.getClass();
-            Registry registry2 = (Registry) dataresult1.resultOrPartial(Util.prefix("Noise settings registry: ", logger1::error)).orElseThrow(() -> {
-                return new IllegalStateException("Failed to get noise settings registry");
-            });
+//            logger1.getClass();
+            Registry<net.minecraft.world.level.levelgen.NoiseGeneratorSettings> registry2 = dataresult3.resultOrPartial(Util.prefix("Noise settings registry: ", logger1::error))
+                    .orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
 
             return WorldGenSettings.makeDefault(registry, registry1, registry2);
         }), dataresult.lifecycle());
@@ -128,6 +124,7 @@
         return 19133;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     private <T> T readLevelData(File file, BiFunction<File, DataFixer, T> bifunction) {
         if (!file.exists()) {
@@ -136,7 +133,7 @@
             File file1 = new File(file, "level.dat");
 
             if (file1.exists()) {
-                Object object = bifunction.apply(file1, this.fixerUpper);
+                T object = bifunction.apply(file1, this.fixerUpper);
 
                 if (object != null) {
                     return object;
@@ -148,6 +145,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     private static DataPackConfig getDataPacks(File file, DataFixer datafixer) {
         try {
@@ -156,9 +154,9 @@
 
             compoundtag1.remove("Player");
             int i = compoundtag1.contains("DataVersion", 99) ? compoundtag1.getInt("DataVersion") : -1;
-            Dynamic dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, compoundtag1), i, SharedConstants.getCurrentVersion().getWorldVersion());
+            Dynamic<Tag> dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic<>(NbtOps.INSTANCE, compoundtag1), i, SharedConstants.getCurrentVersion().getWorldVersion());
 
-            return (DataPackConfig) dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
+            return dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
         } catch (Exception exception) {
             LevelStorageSource.LOGGER.error("Exception reading {}", file, exception);
             return null;
@@ -187,6 +185,7 @@
         };
     }
 
+    // PistonMC - Fix decompile errors
     private BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File file, boolean flag) {
         return (file1, datafixer) -> {
             try {
@@ -195,7 +194,7 @@
 
                 compoundtag1.remove("Player");
                 int i = compoundtag1.contains("DataVersion", 99) ? compoundtag1.getInt("DataVersion") : -1;
-                Dynamic dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, compoundtag1), i, SharedConstants.getCurrentVersion().getWorldVersion());
+                Dynamic<Tag> dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, compoundtag1), i, SharedConstants.getCurrentVersion().getWorldVersion());
                 LevelVersion levelversion = LevelVersion.parse(dynamic);
                 int j = levelversion.levelDataVersion();
 
@@ -204,7 +203,7 @@
                 } else {
                     boolean flag1 = j != this.getStorageVersion();
                     File file2 = new File(file, "icon.png");
-                    DataPackConfig datapackconfig = (DataPackConfig) dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
+                    DataPackConfig datapackconfig = dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
                     LevelSettings levelsettings = LevelSettings.parse(dynamic, datapackconfig);
 
                     return new LevelSummary(levelsettings, levelversion, file.getName(), flag1, flag, file2);
Index: net/minecraft/util/UniformInt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/UniformInt.java b/net/minecraft/util/UniformInt.java
--- a/net/minecraft/util/UniformInt.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/UniformInt.java	(date 1611605183248)
@@ -10,28 +10,21 @@
 
 public class UniformInt {
 
-    public static final Codec<UniformInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> {
-        return instance.group(Codec.INT.fieldOf("base").forGetter((uniformint) -> {
-            return uniformint.baseValue;
-        }), Codec.INT.fieldOf("spread").forGetter((uniformint) -> {
-            return uniformint.spread;
-        })).apply(instance, UniformInt::new);
-    }).comapFlatMap((uniformint) -> {
-        return uniformint.spread < 0 ? DataResult.error("Spread must be non-negative, got: " + uniformint.spread) : DataResult.success(uniformint);
-    }, Function.identity())).xmap((either) -> {
-        return (UniformInt) either.map(UniformInt::fixed, (uniformint) -> {
-            return uniformint;
-        });
-    }, (uniformint) -> {
-        return uniformint.spread == 0 ? Either.left(uniformint.baseValue) : Either.right(uniformint);
-    });
+    // PistonMC - Fix decompile errors
+    public static final Codec<UniformInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.<UniformInt>create((instance) -> {
+        return instance.group(Codec.INT.fieldOf("base").forGetter((uniformint) -> uniformint.baseValue),
+                Codec.INT.fieldOf("spread").forGetter((uniformint) -> uniformint.spread))
+                .apply(instance, UniformInt::new);
+    }).comapFlatMap((uniformint) -> uniformint.spread < 0 ? DataResult.error("Spread must be non-negative, got: " + uniformint.spread) : DataResult.success(uniformint), Function.identity()))
+            .xmap((either) -> either.map(UniformInt::fixed, (uniformint) -> uniformint), (uniformint) -> uniformint.spread == 0 ? Either.left(uniformint.baseValue) : Either.right(uniformint));
     private final int baseValue;
     private final int spread;
 
+    // PistonMC - Fix decompile errors
     public static Codec<UniformInt> codec(int i, int j, int k) {
-        Function function = (uniformint) -> {
-            return uniformint.baseValue >= i && uniformint.baseValue <= j ? (uniformint.spread <= k ? DataResult.success(uniformint) : DataResult.error("Spread too big: " + uniformint.spread + " > " + k)) : DataResult.error("Base value out of range: " + uniformint.baseValue + " [" + i + "-" + j + "]");
-        };
+        Function<UniformInt, DataResult<UniformInt>> function = (uniformint) -> uniformint.baseValue >= i && uniformint.baseValue <= j ?
+                (uniformint.spread <= k ? DataResult.success(uniformint) : DataResult.error("Spread too big: " + uniformint.spread + " > " + k)) :
+                DataResult.error("Base value out of range: " + uniformint.baseValue + " [" + i + "-" + j + "]");
 
         return UniformInt.CODEC.flatXmap(function, function);
     }
Index: net/minecraft/advancements/critereon/LocationPredicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/LocationPredicate.java b/net/minecraft/advancements/critereon/LocationPredicate.java
--- a/net/minecraft/advancements/critereon/LocationPredicate.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/LocationPredicate.java	(date 1611653942343)
@@ -86,6 +86,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public JsonElement serializeToJson() {
         if (this == LocationPredicate.ANY) {
             return JsonNull.INSTANCE;
@@ -102,13 +103,11 @@
             }
 
             if (this.dimension != null) {
-                DataResult dataresult = Level.RESOURCE_KEY_CODEC.encodeStart(JsonOps.INSTANCE, this.dimension);
+                DataResult<JsonElement> dataresult = Level.RESOURCE_KEY_CODEC.encodeStart(JsonOps.INSTANCE, this.dimension);
                 Logger logger = LocationPredicate.LOGGER;
 
-                logger.getClass();
-                dataresult.resultOrPartial(logger::error).ifPresent((jsonelement) -> {
-                    jsonobject.add("dimension", jsonelement);
-                });
+//                logger.getClass();
+                dataresult.resultOrPartial(logger::error).ifPresent((jsonelement) -> jsonobject.add("dimension", jsonelement));
             }
 
             if (this.feature != null) {
@@ -130,6 +129,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public static LocationPredicate fromJson(@Nullable JsonElement jsonelement) {
         if (jsonelement != null && !jsonelement.isJsonNull()) {
             JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "location");
@@ -137,23 +137,21 @@
             MinMaxBounds.Floats minmaxbounds_floats = MinMaxBounds.Floats.fromJson(jsonobject1.get("x"));
             MinMaxBounds.Floats minmaxbounds_floats1 = MinMaxBounds.Floats.fromJson(jsonobject1.get("y"));
             MinMaxBounds.Floats minmaxbounds_floats2 = MinMaxBounds.Floats.fromJson(jsonobject1.get("z"));
-            ResourceKey resourcekey;
+            ResourceKey<Level> resourcekey;
 
             if (jsonobject.has("dimension")) {
-                DataResult dataresult = ResourceLocation.CODEC.parse(JsonOps.INSTANCE, jsonobject.get("dimension"));
+                DataResult<ResourceLocation> dataresult = ResourceLocation.CODEC.parse(JsonOps.INSTANCE, jsonobject.get("dimension"));
                 Logger logger = LocationPredicate.LOGGER;
 
-                logger.getClass();
-                resourcekey = (ResourceKey) dataresult.resultOrPartial(logger::error).map((resourcelocation) -> {
-                    return ResourceKey.create(Registry.DIMENSION_REGISTRY, resourcelocation);
-                }).orElse((Object) null);
+//                logger.getClass();
+                resourcekey = dataresult.resultOrPartial(logger::error).map((resourcelocation) -> ResourceKey.create(Registry.DIMENSION_REGISTRY, resourcelocation)).orElse(null);
             } else {
                 resourcekey = null;
             }
 
-            ResourceKey resourcekey1 = resourcekey;
-            StructureFeature structurefeature = jsonobject.has("feature") ? (StructureFeature) StructureFeature.STRUCTURES_REGISTRY.get(GsonHelper.getAsString(jsonobject, "feature")) : null;
-            ResourceKey resourcekey2 = null;
+            ResourceKey<Level> resourcekey1 = resourcekey;
+            StructureFeature<?> structurefeature = jsonobject.has("feature") ? StructureFeature.STRUCTURES_REGISTRY.get(GsonHelper.getAsString(jsonobject, "feature")) : null;
+            ResourceKey<Biome> resourcekey2 = null;
 
             if (jsonobject.has("biome")) {
                 ResourceLocation resourcelocation = new ResourceLocation(GsonHelper.getAsString(jsonobject, "biome"));
Index: net/minecraft/world/level/storage/loot/LootContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/LootContext.java b/net/minecraft/world/level/storage/loot/LootContext.java
--- a/net/minecraft/world/level/storage/loot/LootContext.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/LootContext.java	(date 1611605433234)
@@ -61,9 +61,10 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public <T> T getParamOrNull(LootContextParam<T> lootcontextparam) {
-        return this.params.get(lootcontextparam);
+        return (T) this.params.get(lootcontextparam);
     }
 
     public boolean addVisitedTable(LootTable loottable) {
@@ -216,8 +217,9 @@
             return this.level;
         }
 
+        // PistonMC - Fix decompile errors
         public <T> T getParameter(LootContextParam<T> lootcontextparam) {
-            Object object = this.params.get(lootcontextparam);
+            T object = (T) this.params.get(lootcontextparam);
 
             if (object == null) {
                 throw new IllegalArgumentException("No parameter " + lootcontextparam);
@@ -226,9 +228,10 @@
             }
         }
 
+        // PistonMC - Fix decompile errors
         @Nullable
         public <T> T getOptionalParameter(LootContextParam<T> lootcontextparam) {
-            return this.params.get(lootcontextparam);
+            return (T) this.params.get(lootcontextparam);
         }
 
         public LootContext create(LootContextParamSet lootcontextparamset) {
Index: net/minecraft/advancements/critereon/MinMaxBounds.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/MinMaxBounds.java b/net/minecraft/advancements/critereon/MinMaxBounds.java
--- a/net/minecraft/advancements/critereon/MinMaxBounds.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/MinMaxBounds.java	(date 1611649162138)
@@ -61,16 +61,17 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     protected static <T extends Number, R extends MinMaxBounds<T>> R fromJson(@Nullable JsonElement jsonelement, R r0, BiFunction<JsonElement, String, T> bifunction, MinMaxBounds.BoundsFactory<T, R> minmaxbounds_boundsfactory) {
         if (jsonelement != null && !jsonelement.isJsonNull()) {
             if (GsonHelper.isNumberValue(jsonelement)) {
-                Number number = (Number) bifunction.apply(jsonelement, "value");
+                T number = bifunction.apply(jsonelement, "value");
 
                 return minmaxbounds_boundsfactory.create(number, number);
             } else {
                 JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "value");
-                Number number1 = jsonobject.has("min") ? (Number) bifunction.apply(jsonobject.get("min"), "min") : null;
-                Number number2 = jsonobject.has("max") ? (Number) bifunction.apply(jsonobject.get("max"), "max") : null;
+                T number1 = jsonobject.has("min") ? bifunction.apply(jsonobject.get("min"), "min") : null;
+                T number2 = jsonobject.has("max") ? bifunction.apply(jsonobject.get("max"), "max") : null;
 
                 return minmaxbounds_boundsfactory.create(number1, number2);
             }
@@ -79,6 +80,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     protected static <T extends Number, R extends MinMaxBounds<T>> R fromReader(StringReader stringreader, MinMaxBounds.BoundsFromReaderFactory<T, R> minmaxbounds_boundsfromreaderfactory, Function<String, T> function, Supplier<DynamicCommandExceptionType> supplier, Function<T, T> function1) throws CommandSyntaxException {
         if (!stringreader.canRead()) {
             throw MinMaxBounds.ERROR_EMPTY.createWithContext(stringreader);
@@ -86,13 +88,13 @@
             int i = stringreader.getCursor();
 
             try {
-                Number number = (Number) optionallyFormat(readNumber(stringreader, function, supplier), function1);
-                Number number1;
+                T number = optionallyFormat(readNumber(stringreader, function, supplier), function1);
+                T number1;
 
                 if (stringreader.canRead(2) && stringreader.peek() == '.' && stringreader.peek(1) == '.') {
                     stringreader.skip();
                     stringreader.skip();
-                    number1 = (Number) optionallyFormat(readNumber(stringreader, function, supplier), function1);
+                    number1 = optionallyFormat(readNumber(stringreader, function, supplier), function1);
                     if (number == null && number1 == null) {
                         throw MinMaxBounds.ERROR_EMPTY.createWithContext(stringreader);
                     }
@@ -112,6 +114,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     private static <T extends Number> T readNumber(StringReader stringreader, Function<String, T> function, Supplier<DynamicCommandExceptionType> supplier) throws CommandSyntaxException {
         int i = stringreader.getCursor();
@@ -126,9 +129,9 @@
             return null;
         } else {
             try {
-                return (Number) function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException numberformatexception) {
-                throw ((DynamicCommandExceptionType) supplier.get()).createWithContext(stringreader, s);
+                throw supplier.get().createWithContext(stringreader, s);
             }
         }
     }
Index: net/minecraft/world/level/storage/loot/entries/LootTableReference.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/entries/LootTableReference.java b/net/minecraft/world/level/storage/loot/entries/LootTableReference.java
--- a/net/minecraft/world/level/storage/loot/entries/LootTableReference.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/entries/LootTableReference.java	(date 1611656676968)
@@ -61,8 +61,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serializeCustom(JsonObject jsonobject, LootTableReference loottablereference, JsonSerializationContext jsonserializationcontext) {
-            super.serializeCustom(jsonobject, (LootPoolSingletonContainer) loottablereference, jsonserializationcontext);
+            super.serializeCustom(jsonobject, loottablereference, jsonserializationcontext);
             jsonobject.addProperty("name", loottablereference.name.toString());
         }
 
Index: net/minecraft/advancements/critereon/InventoryChangeTrigger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
--- a/net/minecraft/advancements/critereon/InventoryChangeTrigger.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/InventoryChangeTrigger.java	(date 1611656676952)
@@ -120,6 +120,7 @@
             return jsonobject;
         }
 
+        // PistonMC - Fix decompile errors
         public boolean matches(Inventory inventory, ItemStack itemstack, int i, int j, int k) {
             if (!this.slotsFull.matches(i)) {
                 return false;
@@ -133,7 +134,7 @@
                 if (l == 0) {
                     return true;
                 } else if (l != 1) {
-                    ObjectArrayList objectarraylist = new ObjectArrayList(this.predicates);
+                    ObjectArrayList<ItemPredicate> objectarraylist = new ObjectArrayList<>(this.predicates);
                     int i1 = inventory.getContainerSize();
 
                     for (int j1 = 0; j1 < i1; ++j1) {
@@ -144,9 +145,7 @@
                         ItemStack itemstack1 = inventory.getItem(j1);
 
                         if (!itemstack1.isEmpty()) {
-                            objectarraylist.removeIf((itempredicate) -> {
-                                return itempredicate.matches(itemstack1);
-                            });
+                            objectarraylist.removeIf((itempredicate) -> itempredicate.matches(itemstack1));
                         }
                     }
 
Index: net/minecraft/world/level/block/entity/StructureBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/net/minecraft/world/level/block/entity/StructureBlockEntity.java
--- a/net/minecraft/world/level/block/entity/StructureBlockEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/entity/StructureBlockEntity.java	(date 1611575329293)
@@ -278,12 +278,9 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private List<StructureBlockEntity> filterRelatedCornerBlocks(List<StructureBlockEntity> list) {
-        Predicate predicate = (structureblockentity) -> {
-            return structureblockentity.mode == StructureMode.CORNER && Objects.equals(this.structureName, structureblockentity.structureName);
-        };
-
-        return (List) list.stream().filter(predicate).collect(Collectors.toList());
+        return list.stream().filter((structureblockentity) -> structureblockentity.mode == StructureMode.CORNER && Objects.equals(this.structureName, structureblockentity.structureName)).collect(Collectors.toList());
     }
 
     private List<StructureBlockEntity> getNearbyCornerBlocks(BlockPos blockpos, BlockPos blockpos1) {
Index: net/minecraft/advancements/critereon/MobEffectsPredicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/MobEffectsPredicate.java b/net/minecraft/advancements/critereon/MobEffectsPredicate.java
--- a/net/minecraft/advancements/critereon/MobEffectsPredicate.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/MobEffectsPredicate.java	(date 1611656676973)
@@ -90,17 +90,14 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public JsonElement serializeToJson() {
         if (this == MobEffectsPredicate.ANY) {
             return JsonNull.INSTANCE;
         } else {
             JsonObject jsonobject = new JsonObject();
-            Iterator iterator = this.effects.entrySet().iterator();
-
-            while (iterator.hasNext()) {
-                Entry entry = (Entry) iterator.next();
-
-                jsonobject.add(Registry.MOB_EFFECT.getKey(entry.getKey()).toString(), ((MobEffectsPredicate.MobEffectInstancePredicate) entry.getValue()).serializeToJson());
+            for(Entry<MobEffect, MobEffectInstancePredicate> entry : this.effects.entrySet()) {
+                jsonobject.add(Registry.MOB_EFFECT.getKey(entry.getKey()).toString(), entry.getValue().serializeToJson());
             }
 
             return jsonobject;
Index: net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
--- a/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java	(date 1611652755045)
@@ -129,24 +129,27 @@
 
         public Builder() {}
 
+        // PistonMC - Fix decompile errors
         @Override
         public T apply(LootItemFunction.Builder lootitemfunction_builder) {
             this.functions.add(lootitemfunction_builder.build());
-            return (LootPoolSingletonContainer.Builder) this.getThis();
+            return this.getThis();
         }
 
         protected LootItemFunction[] getFunctions() {
             return (LootItemFunction[]) this.functions.toArray(new LootItemFunction[0]);
         }
 
+        // PistonMC - Fix decompile errors
         public T setWeight(int i) {
             this.weight = i;
-            return (LootPoolSingletonContainer.Builder) this.getThis();
+            return this.getThis();
         }
 
+        // PistonMC - Fix decompile errors
         public T setQuality(int i) {
             this.quality = i;
-            return (LootPoolSingletonContainer.Builder) this.getThis();
+            return this.getThis();
         }
     }
 
Index: net/minecraft/util/datafix/fixes/RenameBiomesFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/RenameBiomesFix.java b/net/minecraft/util/datafix/fixes/RenameBiomesFix.java
--- a/net/minecraft/util/datafix/fixes/RenameBiomesFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/RenameBiomesFix.java	(date 1611653827834)
@@ -20,18 +20,15 @@
         this.name = s;
     }
 
+    // PistonMC - Fix decompile errors
     protected TypeRewriteRule makeRule() {
-        Type type = DSL.named(References.BIOME.typeName(), NamespacedSchema.namespacedString());
+        Type<com.mojang.datafixers.util.Pair<String, String>> type = DSL.named(References.BIOME.typeName(), NamespacedSchema.namespacedString());
 
         if (!Objects.equals(type, this.getInputSchema().getType(References.BIOME))) {
             throw new IllegalStateException("Biome type is not what was expected.");
         } else {
             return this.fixTypeEverywhere(this.name, type, (dynamicops) -> {
-                return (pair) -> {
-                    return pair.mapSecond((s) -> {
-                        return (String) this.biomes.getOrDefault(s, s);
-                    });
-                };
+                return (pair) -> pair.mapSecond((s) -> this.biomes.getOrDefault(s, s));
             });
         }
     }
Index: net/minecraft/world/entity/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
--- a/net/minecraft/world/entity/Entity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/Entity.java	(date 1611508050354)
@@ -2095,6 +2095,7 @@
         this.removed = true;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     protected PortalInfo findDimensionEntryPoint(ServerLevel serverlevel) {
         boolean flag = this.level.dimension() == Level.END && serverlevel.dimension() == Level.OVERWORLD;
@@ -2105,46 +2106,42 @@
 
             if (this.level.dimension() != Level.NETHER && !flag2) {
                 return null;
-            } else {
-                WorldBorder worldborder = serverlevel.getWorldBorder();
-                double d0 = Math.max(-2.9999872E7D, worldborder.getMinX() + 16.0D);
-                double d1 = Math.max(-2.9999872E7D, worldborder.getMinZ() + 16.0D);
-                double d2 = Math.min(2.9999872E7D, worldborder.getMaxX() - 16.0D);
-                double d3 = Math.min(2.9999872E7D, worldborder.getMaxZ() - 16.0D);
-                double d4 = DimensionType.getTeleportationScale(this.level.dimensionType(), serverlevel.dimensionType());
-                BlockPos blockpos = new BlockPos(Mth.clamp(this.getX() * d4, d0, d2), this.getY(), Mth.clamp(this.getZ() * d4, d1, d3));
+            }
+            WorldBorder worldborder = serverlevel.getWorldBorder();
+            double d0 = Math.max(-2.9999872E7D, worldborder.getMinX() + 16.0D);
+            double d1 = Math.max(-2.9999872E7D, worldborder.getMinZ() + 16.0D);
+            double d2 = Math.min(2.9999872E7D, worldborder.getMaxX() - 16.0D);
+            double d3 = Math.min(2.9999872E7D, worldborder.getMaxZ() - 16.0D);
+            double d4 = DimensionType.getTeleportationScale(this.level.dimensionType(), serverlevel.dimensionType());
+            BlockPos blockpos = new BlockPos(Mth.clamp(this.getX() * d4, d0, d2), this.getY(), Mth.clamp(this.getZ() * d4, d1, d3));
 
-                return (PortalInfo) this.getExitPortal(serverlevel, blockpos, flag2).map((blockutil_foundrectangle) -> {
-                    BlockState blockstate = this.level.getBlockState(this.portalEntrancePos);
-                    Direction.Axis direction_axis;
-                    Vec3 vec3;
+            return this.getExitPortal(serverlevel, blockpos, flag2).map((blockutil_foundrectangle) -> {
+                BlockState blockstate = this.level.getBlockState(this.portalEntrancePos);
+                Direction.Axis direction_axis;
+                Vec3 vec3;
 
-                    if (blockstate.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
-                        direction_axis = (Direction.Axis) blockstate.getValue(BlockStateProperties.HORIZONTAL_AXIS);
-                        BlockUtil.FoundRectangle blockutil_foundrectangle1 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, direction_axis, 21, Direction.Axis.Y, 21, (blockpos1) -> {
-                            return this.level.getBlockState(blockpos1) == blockstate;
-                        });
+                if (blockstate.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
+                    direction_axis = blockstate.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                    BlockUtil.FoundRectangle blockutil_foundrectangle1 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, direction_axis, 21, Direction.Axis.Y, 21, (blockpos1) -> this.level.getBlockState(blockpos1) == blockstate);
 
-                        vec3 = this.getRelativePortalPosition(direction_axis, blockutil_foundrectangle1);
-                    } else {
-                        direction_axis = Direction.Axis.X;
-                        vec3 = new Vec3(0.5D, 0.0D, 0.0D);
-                    }
+                    vec3 = this.getRelativePortalPosition(direction_axis, blockutil_foundrectangle1);
+                } else {
+                    direction_axis = Direction.Axis.X;
+                    vec3 = new Vec3(0.5D, 0.0D, 0.0D);
+                }
 
-                    return PortalShape.createPortalInfo(serverlevel, blockutil_foundrectangle, direction_axis, vec3, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
-                }).orElse((Object) null);
-            }
-        } else {
-            BlockPos blockpos1;
+                return PortalShape.createPortalInfo(serverlevel, blockutil_foundrectangle, direction_axis, vec3, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+            }).orElse(null);
+        }
+        BlockPos blockpos1;
 
-            if (flag1) {
-                blockpos1 = ServerLevel.END_SPAWN_POINT;
-            } else {
-                blockpos1 = serverlevel.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, serverlevel.getSharedSpawnPos());
-            }
+        if (flag1) {
+            blockpos1 = ServerLevel.END_SPAWN_POINT;
+        } else {
+            blockpos1 = serverlevel.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, serverlevel.getSharedSpawnPos());
+        }
 
-            return new PortalInfo(new Vec3((double) blockpos1.getX() + 0.5D, (double) blockpos1.getY(), (double) blockpos1.getZ() + 0.5D), this.getDeltaMovement(), this.yRot, this.xRot);
-        }
+        return new PortalInfo(new Vec3(blockpos1.getX() + 0.5D, blockpos1.getY(), blockpos1.getZ() + 0.5D), this.getDeltaMovement(), this.yRot, this.xRot);
     }
 
     protected Vec3 getRelativePortalPosition(Direction.Axis direction_axis, BlockUtil.FoundRectangle blockutil_foundrectangle) {
Index: net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java b/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
--- a/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java	(date 1611663355795)
@@ -90,8 +90,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, ApplyBonusCount applybonuscount, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) applybonuscount, jsonserializationcontext);
+            super.serialize(jsonobject, applybonuscount, jsonserializationcontext);
             jsonobject.addProperty("enchantment", Registry.ENCHANTMENT.getKey(applybonuscount.enchantment).toString());
             jsonobject.addProperty("formula", applybonuscount.formula.getType().toString());
             JsonObject jsonobject1 = new JsonObject();
Index: net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
--- a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java	(date 1611575329269)
@@ -156,10 +156,11 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private static void moveEntityByPiston(Direction direction, Entity entity, double d0, Direction direction1) {
         PistonMovingBlockEntity.NOCLIP.set(direction);
-        entity.move(MoverType.PISTON, new Vec3(d0 * (double) direction1.getStepX(), d0 * (double) direction1.getStepY(), d0 * (double) direction1.getStepZ()));
-        PistonMovingBlockEntity.NOCLIP.set((Object) null);
+        entity.move(MoverType.PISTON, new Vec3(d0 * direction1.getStepX(), d0 * direction1.getStepY(), d0 * direction1.getStepZ()));
+        PistonMovingBlockEntity.NOCLIP.set(null);
     }
 
     private void moveStuckEntities(float f) {
Index: net/minecraft/world/entity/EntityType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/EntityType.java b/net/minecraft/world/entity/EntityType.java
--- a/net/minecraft/world/entity/EntityType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/EntityType.java	(date 1611567572534)
@@ -141,13 +141,14 @@
 public class EntityType<T extends Entity> {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<ArmorStand> ARMOR_STAND = register("armor_stand", EntityType.Builder.of(ArmorStand::new, MobCategory.MISC).sized(0.5F, 1.975F).clientTrackingRange(10));
-    public static final EntityType<Arrow> ARROW = register("arrow", EntityType.Builder.of(Arrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    // PistonMC - Fix decompile errors
+    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.of((EntityFactory<AreaEffectCloud>) AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ArmorStand> ARMOR_STAND = register("armor_stand", EntityType.Builder.of((EntityFactory<ArmorStand>) ArmorStand::new, MobCategory.MISC).sized(0.5F, 1.975F).clientTrackingRange(10));
+    public static final EntityType<Arrow> ARROW = register("arrow", EntityType.Builder.of((EntityFactory<Arrow>) Arrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<Bat> BAT = register("bat", EntityType.Builder.of(Bat::new, MobCategory.AMBIENT).sized(0.5F, 0.9F).clientTrackingRange(5));
     public static final EntityType<Bee> BEE = register("bee", EntityType.Builder.of(Bee::new, MobCategory.CREATURE).sized(0.7F, 0.6F).clientTrackingRange(8));
     public static final EntityType<Blaze> BLAZE = register("blaze", EntityType.Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.8F).clientTrackingRange(8));
-    public static final EntityType<Boat> BOAT = register("boat", EntityType.Builder.of(Boat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10));
+    public static final EntityType<Boat> BOAT = register("boat", EntityType.Builder.of((EntityFactory<Boat>) Boat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10));
     public static final EntityType<Cat> CAT = register("cat", EntityType.Builder.of(Cat::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(8));
     public static final EntityType<CaveSpider> CAVE_SPIDER = register("cave_spider", EntityType.Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7F, 0.5F).clientTrackingRange(8));
     public static final EntityType<Chicken> CHICKEN = register("chicken", EntityType.Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4F, 0.7F).clientTrackingRange(10));
@@ -156,19 +157,19 @@
     public static final EntityType<Creeper> CREEPER = register("creeper", EntityType.Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6F, 1.7F).clientTrackingRange(8));
     public static final EntityType<Dolphin> DOLPHIN = register("dolphin", EntityType.Builder.of(Dolphin::new, MobCategory.WATER_CREATURE).sized(0.9F, 0.6F));
     public static final EntityType<Donkey> DONKEY = register("donkey", EntityType.Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844F, 1.5F).clientTrackingRange(10));
-    public static final EntityType<DragonFireball> DRAGON_FIREBALL = register("dragon_fireball", EntityType.Builder.of(DragonFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<DragonFireball> DRAGON_FIREBALL = register("dragon_fireball", EntityType.Builder.of((EntityFactory<DragonFireball>) DragonFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Drowned> DROWNED = register("drowned", EntityType.Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<ElderGuardian> ELDER_GUARDIAN = register("elder_guardian", EntityType.Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975F, 1.9975F).clientTrackingRange(10));
-    public static final EntityType<EndCrystal> END_CRYSTAL = register("end_crystal", EntityType.Builder.of(EndCrystal::new, MobCategory.MISC).sized(2.0F, 2.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<EndCrystal> END_CRYSTAL = register("end_crystal", EntityType.Builder.of((EntityFactory<EndCrystal>) EndCrystal::new, MobCategory.MISC).sized(2.0F, 2.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<EnderDragon> ENDER_DRAGON = register("ender_dragon", EntityType.Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0F, 8.0F).clientTrackingRange(10));
     public static final EntityType<EnderMan> ENDERMAN = register("enderman", EntityType.Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6F, 2.9F).clientTrackingRange(8));
     public static final EntityType<Endermite> ENDERMITE = register("endermite", EntityType.Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8));
     public static final EntityType<Evoker> EVOKER = register("evoker", EntityType.Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
-    public static final EntityType<EvokerFangs> EVOKER_FANGS = register("evoker_fangs", EntityType.Builder.of(EvokerFangs::new, MobCategory.MISC).sized(0.5F, 0.8F).clientTrackingRange(6).updateInterval(2));
-    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = register("experience_orb", EntityType.Builder.of(ExperienceOrb::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = register("eye_of_ender", EntityType.Builder.of(EyeOfEnder::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(4));
-    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = register("falling_block", EntityType.Builder.of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(20));
-    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = register("firework_rocket", EntityType.Builder.of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<EvokerFangs> EVOKER_FANGS = register("evoker_fangs", EntityType.Builder.of((EntityFactory<EvokerFangs>) EvokerFangs::new, MobCategory.MISC).sized(0.5F, 0.8F).clientTrackingRange(6).updateInterval(2));
+    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = register("experience_orb", EntityType.Builder.of((EntityFactory<ExperienceOrb>) ExperienceOrb::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = register("eye_of_ender", EntityType.Builder.of((EntityFactory<EyeOfEnder>) EyeOfEnder::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(4));
+    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = register("falling_block", EntityType.Builder.of((EntityFactory<FallingBlockEntity>) FallingBlockEntity::new, MobCategory.MISC).sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(20));
+    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = register("firework_rocket", EntityType.Builder.of((EntityFactory<FireworkRocketEntity>) FireworkRocketEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Fox> FOX = register("fox", EntityType.Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH));
     public static final EntityType<Ghast> GHAST = register("ghast", EntityType.Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0F, 4.0F).clientTrackingRange(10));
     public static final EntityType<Giant> GIANT = register("giant", EntityType.Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6F, 12.0F).clientTrackingRange(10));
@@ -178,25 +179,25 @@
     public static final EntityType<Husk> HUSK = register("husk", EntityType.Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<Illusioner> ILLUSIONER = register("illusioner", EntityType.Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<IronGolem> IRON_GOLEM = register("iron_golem", EntityType.Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4F, 2.7F).clientTrackingRange(10));
-    public static final EntityType<ItemEntity> ITEM = register("item", EntityType.Builder.of(ItemEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<ItemFrame> ITEM_FRAME = register("item_frame", EntityType.Builder.of(ItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<LargeFireball> FIREBALL = register("fireball", EntityType.Builder.of(LargeFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = register("leash_knot", EntityType.Builder.of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ItemEntity> ITEM = register("item", EntityType.Builder.of((EntityFactory<ItemEntity>) ItemEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<ItemFrame> ITEM_FRAME = register("item_frame", EntityType.Builder.of((EntityFactory<ItemFrame>) ItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<LargeFireball> FIREBALL = register("fireball", EntityType.Builder.of((EntityFactory<LargeFireball>) LargeFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = register("leash_knot", EntityType.Builder.of((EntityFactory<LeashFenceKnotEntity>) LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<LightningBolt> LIGHTNING_BOLT = register("lightning_bolt", EntityType.Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0F, 0.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Llama> LLAMA = register("llama", EntityType.Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10));
-    public static final EntityType<LlamaSpit> LLAMA_SPIT = register("llama_spit", EntityType.Builder.of(LlamaSpit::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LlamaSpit> LLAMA_SPIT = register("llama_spit", EntityType.Builder.of((EntityFactory<LlamaSpit>) LlamaSpit::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<MagmaCube> MAGMA_CUBE = register("magma_cube", EntityType.Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04F, 2.04F).clientTrackingRange(8));
-    public static final EntityType<Minecart> MINECART = register("minecart", EntityType.Builder.of(Minecart::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartChest> CHEST_MINECART = register("chest_minecart", EntityType.Builder.of(MinecartChest::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = register("command_block_minecart", EntityType.Builder.of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartFurnace> FURNACE_MINECART = register("furnace_minecart", EntityType.Builder.of(MinecartFurnace::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartHopper> HOPPER_MINECART = register("hopper_minecart", EntityType.Builder.of(MinecartHopper::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = register("spawner_minecart", EntityType.Builder.of(MinecartSpawner::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<MinecartTNT> TNT_MINECART = register("tnt_minecart", EntityType.Builder.of(MinecartTNT::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<Minecart> MINECART = register("minecart", EntityType.Builder.of((EntityFactory<Minecart>) Minecart::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartChest> CHEST_MINECART = register("chest_minecart", EntityType.Builder.of((EntityFactory<MinecartChest>) MinecartChest::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = register("command_block_minecart", EntityType.Builder.of((EntityFactory<MinecartCommandBlock>) MinecartCommandBlock::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartFurnace> FURNACE_MINECART = register("furnace_minecart", EntityType.Builder.of((EntityFactory<MinecartFurnace>) MinecartFurnace::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartHopper> HOPPER_MINECART = register("hopper_minecart", EntityType.Builder.of((EntityFactory<MinecartHopper>) MinecartHopper::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = register("spawner_minecart", EntityType.Builder.of((EntityFactory<MinecartSpawner>) MinecartSpawner::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MinecartTNT> TNT_MINECART = register("tnt_minecart", EntityType.Builder.of((EntityFactory<MinecartTNT>) MinecartTNT::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
     public static final EntityType<Mule> MULE = register("mule", EntityType.Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(8));
     public static final EntityType<MushroomCow> MOOSHROOM = register("mooshroom", EntityType.Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9F, 1.4F).clientTrackingRange(10));
     public static final EntityType<Ocelot> OCELOT = register("ocelot", EntityType.Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(10));
-    public static final EntityType<Painting> PAINTING = register("painting", EntityType.Builder.of(Painting::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Painting> PAINTING = register("painting", EntityType.Builder.of((EntityFactory<Painting>) Painting::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Panda> PANDA = register("panda", EntityType.Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3F, 1.25F).clientTrackingRange(10));
     public static final EntityType<Parrot> PARROT = register("parrot", EntityType.Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5F, 0.9F).clientTrackingRange(8));
     public static final EntityType<Phantom> PHANTOM = register("phantom", EntityType.Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9F, 0.5F).clientTrackingRange(8));
@@ -205,50 +206,50 @@
     public static final EntityType<PiglinBrute> PIGLIN_BRUTE = register("piglin_brute", EntityType.Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<Pillager> PILLAGER = register("pillager", EntityType.Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<PolarBear> POLAR_BEAR = register("polar_bear", EntityType.Builder.of(PolarBear::new, MobCategory.CREATURE).sized(1.4F, 1.4F).clientTrackingRange(10));
-    public static final EntityType<PrimedTnt> TNT = register("tnt", EntityType.Builder.of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(10));
+    public static final EntityType<PrimedTnt> TNT = register("tnt", EntityType.Builder.of((EntityFactory<PrimedTnt>) PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(10));
     public static final EntityType<Pufferfish> PUFFERFISH = register("pufferfish", EntityType.Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.7F).clientTrackingRange(4));
     public static final EntityType<Rabbit> RABBIT = register("rabbit", EntityType.Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4F, 0.5F).clientTrackingRange(8));
     public static final EntityType<Ravager> RAVAGER = register("ravager", EntityType.Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95F, 2.2F).clientTrackingRange(10));
     public static final EntityType<Salmon> SALMON = register("salmon", EntityType.Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.4F).clientTrackingRange(4));
     public static final EntityType<Sheep> SHEEP = register("sheep", EntityType.Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9F, 1.3F).clientTrackingRange(10));
     public static final EntityType<Shulker> SHULKER = register("shulker", EntityType.Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0F, 1.0F).clientTrackingRange(10));
-    public static final EntityType<ShulkerBullet> SHULKER_BULLET = register("shulker_bullet", EntityType.Builder.of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(8));
+    public static final EntityType<ShulkerBullet> SHULKER_BULLET = register("shulker_bullet", EntityType.Builder.of((EntityFactory<ShulkerBullet>) ShulkerBullet::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(8));
     public static final EntityType<Silverfish> SILVERFISH = register("silverfish", EntityType.Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8));
     public static final EntityType<Skeleton> SKELETON = register("skeleton", EntityType.Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6F, 1.99F).clientTrackingRange(8));
     public static final EntityType<SkeletonHorse> SKELETON_HORSE = register("skeleton_horse", EntityType.Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10));
     public static final EntityType<Slime> SLIME = register("slime", EntityType.Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04F, 2.04F).clientTrackingRange(10));
-    public static final EntityType<SmallFireball> SMALL_FIREBALL = register("small_fireball", EntityType.Builder.of(SmallFireball::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SmallFireball> SMALL_FIREBALL = register("small_fireball", EntityType.Builder.of((EntityFactory<SmallFireball>) SmallFireball::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<SnowGolem> SNOW_GOLEM = register("snow_golem", EntityType.Builder.of(SnowGolem::new, MobCategory.MISC).sized(0.7F, 1.9F).clientTrackingRange(8));
-    public static final EntityType<Snowball> SNOWBALL = register("snowball", EntityType.Builder.of(Snowball::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = register("spectral_arrow", EntityType.Builder.of(SpectralArrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Snowball> SNOWBALL = register("snowball", EntityType.Builder.of((EntityFactory<Snowball>) Snowball::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = register("spectral_arrow", EntityType.Builder.of((EntityFactory<SpectralArrow>) SpectralArrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<Spider> SPIDER = register("spider", EntityType.Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4F, 0.9F).clientTrackingRange(8));
     public static final EntityType<Squid> SQUID = register("squid", EntityType.Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8F, 0.8F).clientTrackingRange(8));
     public static final EntityType<Stray> STRAY = register("stray", EntityType.Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6F, 1.99F).clientTrackingRange(8));
     public static final EntityType<Strider> STRIDER = register("strider", EntityType.Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9F, 1.7F).clientTrackingRange(10));
-    public static final EntityType<ThrownEgg> EGG = register("egg", EntityType.Builder.of(ThrownEgg::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = register("ender_pearl", EntityType.Builder.of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = register("experience_bottle", EntityType.Builder.of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownPotion> POTION = register("potion", EntityType.Builder.of(ThrownPotion::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownTrident> TRIDENT = register("trident", EntityType.Builder.of(ThrownTrident::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<ThrownEgg> EGG = register("egg", EntityType.Builder.of((EntityFactory<ThrownEgg>) ThrownEgg::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = register("ender_pearl", EntityType.Builder.of((EntityFactory<ThrownEnderpearl>) ThrownEnderpearl::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = register("experience_bottle", EntityType.Builder.of((EntityFactory<ThrownExperienceBottle>) ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownPotion> POTION = register("potion", EntityType.Builder.of((EntityFactory<ThrownPotion>) ThrownPotion::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ThrownTrident> TRIDENT = register("trident", EntityType.Builder.of((EntityFactory<ThrownTrident>) ThrownTrident::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
     public static final EntityType<TraderLlama> TRADER_LLAMA = register("trader_llama", EntityType.Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10));
     public static final EntityType<TropicalFish> TROPICAL_FISH = register("tropical_fish", EntityType.Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5F, 0.4F).clientTrackingRange(4));
     public static final EntityType<Turtle> TURTLE = register("turtle", EntityType.Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2F, 0.4F).clientTrackingRange(10));
     public static final EntityType<Vex> VEX = register("vex", EntityType.Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4F, 0.8F).clientTrackingRange(8));
-    public static final EntityType<Villager> VILLAGER = register("villager", EntityType.Builder.of(Villager::new, MobCategory.MISC).sized(0.6F, 1.95F).clientTrackingRange(10));
+    public static final EntityType<Villager> VILLAGER = register("villager", EntityType.Builder.of((EntityFactory<Villager>) Villager::new, MobCategory.MISC).sized(0.6F, 1.95F).clientTrackingRange(10));
     public static final EntityType<Vindicator> VINDICATOR = register("vindicator", EntityType.Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<WanderingTrader> WANDERING_TRADER = register("wandering_trader", EntityType.Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6F, 1.95F).clientTrackingRange(10));
     public static final EntityType<Witch> WITCH = register("witch", EntityType.Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<WitherBoss> WITHER = register("wither", EntityType.Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9F, 3.5F).clientTrackingRange(10));
     public static final EntityType<WitherSkeleton> WITHER_SKELETON = register("wither_skeleton", EntityType.Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7F, 2.4F).clientTrackingRange(8));
-    public static final EntityType<WitherSkull> WITHER_SKULL = register("wither_skull", EntityType.Builder.of(WitherSkull::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<WitherSkull> WITHER_SKULL = register("wither_skull", EntityType.Builder.of((EntityFactory<WitherSkull>) WitherSkull::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
     public static final EntityType<Wolf> WOLF = register("wolf", EntityType.Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6F, 0.85F).clientTrackingRange(10));
-    public static final EntityType<Zoglin> ZOGLIN = register("zoglin", EntityType.Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844F, 1.4F).clientTrackingRange(8));
-    public static final EntityType<Zombie> ZOMBIE = register("zombie", EntityType.Builder.of(Zombie::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<Zoglin> ZOGLIN = register("zoglin", EntityType.Builder.of((EntityFactory<Zoglin>) Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844F, 1.4F).clientTrackingRange(8));
+    public static final EntityType<Zombie> ZOMBIE = register("zombie", EntityType.Builder.of((EntityFactory<Zombie>) Zombie::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<ZombieHorse> ZOMBIE_HORSE = register("zombie_horse", EntityType.Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10));
     public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = register("zombie_villager", EntityType.Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = register("zombified_piglin", EntityType.Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.95F).clientTrackingRange(8));
-    public static final EntityType<Player> PLAYER = register("player", EntityType.Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6F, 1.8F).clientTrackingRange(32).updateInterval(2));
-    public static final EntityType<FishingHook> FISHING_BOBBER = register("fishing_bobber", EntityType.Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(5));
+    public static final EntityType<Player> PLAYER = register("player", EntityType.Builder.<Player>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6F, 1.8F).clientTrackingRange(32).updateInterval(2));
+    public static final EntityType<FishingHook> FISHING_BOBBER = register("fishing_bobber", EntityType.Builder.<FishingHook>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(5));
     private final EntityType.EntityFactory<T> factory;
     private final MobCategory category;
     private final ImmutableSet<Block> immuneTo;
@@ -296,9 +297,10 @@
         return this.spawn(serverlevel, itemstack == null ? null : itemstack.getTag(), itemstack != null && itemstack.hasCustomHoverName() ? itemstack.getHoverName() : null, player, blockpos, mobspawntype, flag, flag1);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public T spawn(ServerLevel serverlevel, @Nullable CompoundTag compoundtag, @Nullable Component component, @Nullable Player player, BlockPos blockpos, MobSpawnType mobspawntype, boolean flag, boolean flag1) {
-        Entity entity = this.create(serverlevel, compoundtag, component, player, blockpos, mobspawntype, flag, flag1);
+        T entity = this.create(serverlevel, compoundtag, component, player, blockpos, mobspawntype, flag, flag1);
 
         if (entity != null) {
             serverlevel.addFreshEntityWithPassengers(entity);
@@ -307,9 +309,10 @@
         return entity;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public T create(ServerLevel serverlevel, @Nullable CompoundTag compoundtag, @Nullable Component component, @Nullable Player player, BlockPos blockpos, MobSpawnType mobspawntype, boolean flag, boolean flag1) {
-        Entity entity = this.create(serverlevel);
+        T entity = this.create(serverlevel);
 
         if (entity == null) {
             return null;
@@ -317,19 +320,19 @@
             double d0;
 
             if (flag) {
-                entity.setPos((double) blockpos.getX() + 0.5D, (double) (blockpos.getY() + 1), (double) blockpos.getZ() + 0.5D);
+                entity.setPos(blockpos.getX() + 0.5D, blockpos.getY() + 1, blockpos.getZ() + 0.5D);
                 d0 = getYOffset(serverlevel, blockpos, flag1, entity.getBoundingBox());
             } else {
                 d0 = 0.0D;
             }
 
-            entity.moveTo((double) blockpos.getX() + 0.5D, (double) blockpos.getY() + d0, (double) blockpos.getZ() + 0.5D, Mth.wrapDegrees(serverlevel.random.nextFloat() * 360.0F), 0.0F);
+            entity.moveTo(blockpos.getX() + 0.5D, blockpos.getY() + d0, blockpos.getZ() + 0.5D, Mth.wrapDegrees(serverlevel.random.nextFloat() * 360.0F), 0.0F);
             if (entity instanceof Mob) {
                 Mob mob = (Mob) entity;
 
                 mob.yHeadRot = mob.yRot;
                 mob.yBodyRot = mob.yRot;
-                mob.finalizeSpawn(serverlevel, serverlevel.getCurrentDifficultyAt(mob.blockPosition()), mobspawntype, (SpawnGroupData) null, compoundtag);
+                mob.finalizeSpawn(serverlevel, serverlevel.getCurrentDifficultyAt(mob.blockPosition()), mobspawntype, null, compoundtag);
                 mob.playAmbientSound();
             }
 
@@ -464,9 +467,10 @@
         return Registry.ENTITY_TYPE.getOptional(new ResourceLocation(compoundtag.getString("id")));
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public static Entity loadEntityRecursive(CompoundTag compoundtag, Level level, Function<Entity, Entity> function) {
-        return (Entity) loadStaticEntity(compoundtag, level).map(function).map((entity) -> {
+        return loadStaticEntity(compoundtag, level).map(function).map((entity) -> {
             if (compoundtag.contains("Passengers", 9)) {
                 ListTag listtag = compoundtag.getList("Passengers", 10);
 
@@ -480,7 +484,7 @@
             }
 
             return entity;
-        }).orElse((Object) null);
+        }).orElse(null);
     }
 
     private static Optional<Entity> loadStaticEntity(CompoundTag compoundtag, Level level) {
Index: net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
--- a/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java	(date 1611658076228)
@@ -7,27 +7,22 @@
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 
+import java.util.stream.Stream;
+
 public class BlockEntityBannerColorFix extends NamedEntityFix {
 
     public BlockEntityBannerColorFix(Schema schema, boolean flag) {
         super(schema, flag, "BlockEntityBannerColorFix", References.BLOCK_ENTITY, "minecraft:banner");
     }
 
+    // PistonMC - Fix decompile errors
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        dynamic = dynamic.update("Base", (dynamic1) -> {
-            return dynamic1.createInt(15 - dynamic1.asInt(0));
-        });
+        dynamic = dynamic.update("Base", (dynamic1) -> dynamic1.createInt(15 - dynamic1.asInt(0)));
         dynamic = dynamic.update("Patterns", (dynamic1) -> {
-            DataResult dataresult = dynamic1.asStreamOpt().map((stream) -> {
-                return stream.map((dynamic2) -> {
-                    return dynamic2.update("Color", (dynamic3) -> {
-                        return dynamic3.createInt(15 - dynamic3.asInt(0));
-                    });
-                });
-            });
+            DataResult<? extends Stream<Dynamic<?>>> dataresult = dynamic1.asStreamOpt().map((stream) -> stream.map((dynamic2) -> dynamic2.update("Color", (dynamic3) -> dynamic3.createInt(15 - dynamic3.asInt(0)))));
 
-            dynamic1.getClass();
-            return (Dynamic) DataFixUtils.orElse(dataresult.map(dynamic1::createList).result(), dynamic1);
+//            dynamic1.getClass();
+            return DataFixUtils.orElse(dataresult.map(dynamic1::createList).result(), dynamic1);
         });
         return dynamic;
     }
Index: net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java	(date 1611502727348)
@@ -55,19 +55,15 @@
     }
 
     protected void trigger(ServerPlayer serverplayer, Predicate<T> predicate) {
+        // PistonMC - Fix decompile errors
         PlayerAdvancements playeradvancements = serverplayer.getAdvancements();
-        Set set = (Set) this.players.get(playeradvancements);
+        Set<CriterionTrigger.Listener<T>> set = this.players.get(playeradvancements);
 
         if (set != null && !set.isEmpty()) {
             LootContext lootcontext = EntityPredicate.createContext(serverplayer, serverplayer);
-            ArrayList arraylist = null;
-            Iterator iterator = set.iterator();
-
-            CriterionTrigger.Listener criteriontrigger_listener;
-
-            while (iterator.hasNext()) {
-                criteriontrigger_listener = (CriterionTrigger.Listener) iterator.next();
-                AbstractCriterionTriggerInstance abstractcriteriontriggerinstance = (AbstractCriterionTriggerInstance) criteriontrigger_listener.getTriggerInstance();
+            ArrayList<CriterionTrigger.Listener<T>> arraylist = null;
+            for(CriterionTrigger.Listener<T> criteriontrigger_listener : set) {
+                T abstractcriteriontriggerinstance = criteriontrigger_listener.getTriggerInstance();
 
                 if (abstractcriteriontriggerinstance.getPlayerPredicate().matches(lootcontext) && predicate.test(abstractcriteriontriggerinstance)) {
                     if (arraylist == null) {
@@ -79,10 +75,7 @@
             }
 
             if (arraylist != null) {
-                iterator = arraylist.iterator();
-
-                while (iterator.hasNext()) {
-                    criteriontrigger_listener = (CriterionTrigger.Listener) iterator.next();
+                for(CriterionTrigger.Listener<T> criteriontrigger_listener : arraylist) {
                     criteriontrigger_listener.run(playeradvancements);
                 }
             }
Index: net/minecraft/world/entity/Mob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
--- a/net/minecraft/world/entity/Mob.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/Mob.java	(date 1611567572507)
@@ -1101,6 +1101,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private InteractionResult checkAndHandleImportantInteractions(Player player, InteractionHand interactionhand) {
         ItemStack itemstack = player.getItemInHand(interactionhand);
 
@@ -1120,11 +1121,9 @@
             if (itemstack.getItem() instanceof SpawnEggItem) {
                 if (this.level instanceof ServerLevel) {
                     SpawnEggItem spawneggitem = (SpawnEggItem) itemstack.getItem();
-                    Optional optional = spawneggitem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel) this.level, this.position(), itemstack);
+                    Optional<Mob> optional = spawneggitem.spawnOffspringFromSpawnEgg(player, this, (EntityType<? extends Mob>) this.getType(), (ServerLevel) this.level, this.position(), itemstack);
 
-                    optional.ifPresent((mob) -> {
-                        this.onOffspringSpawnedFromEgg(player, mob);
-                    });
+                    optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
                     return InteractionResult.CONSUME;
@@ -1166,12 +1165,13 @@
         return this.restrictRadius != -1.0F;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public <T extends Mob> T convertTo(EntityType<T> entitytype, boolean flag) {
         if (this.removed) {
             return null;
         } else {
-            Mob mob = (Mob) entitytype.create(this.level);
+            T mob = entitytype.create(this.level);
 
             mob.copyPosition(this);
             mob.setBaby(this.isBaby());
@@ -1188,11 +1188,7 @@
             mob.setInvulnerable(this.isInvulnerable());
             if (flag) {
                 mob.setCanPickUpLoot(this.canPickUpLoot());
-                EquipmentSlot[] aequipmentslot = EquipmentSlot.values();
-                int i = aequipmentslot.length;
-
-                for (int j = 0; j < i; ++j) {
-                    EquipmentSlot equipmentslot = aequipmentslot[j];
+                for (EquipmentSlot equipmentslot : EquipmentSlot.values()) {
                     ItemStack itemstack = this.getItemBySlot(equipmentslot);
 
                     if (!itemstack.isEmpty()) {
Index: net/minecraft/world/entity/LivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
--- a/net/minecraft/world/entity/LivingEntity.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/LivingEntity.java	(date 1611509215369)
@@ -600,6 +600,7 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void addAdditionalSaveData(CompoundTag compoundtag) {
         compoundtag.putFloat("Health", this.getHealth());
@@ -610,11 +611,7 @@
         compoundtag.put("Attributes", this.getAttributes().save());
         if (!this.activeEffects.isEmpty()) {
             ListTag listtag = new ListTag();
-            Iterator iterator = this.activeEffects.values().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffectInstance mobeffectinstance = (MobEffectInstance) iterator.next();
-
+            for(MobEffectInstance mobeffectinstance : this.activeEffects.values()) {
                 listtag.add(mobeffectinstance.save(new CompoundTag()));
             }
 
@@ -627,13 +624,11 @@
             compoundtag.putInt("SleepingY", blockpos.getY());
             compoundtag.putInt("SleepingZ", blockpos.getZ());
         });
-        DataResult dataresult = this.brain.serializeStart(NbtOps.INSTANCE);
+        DataResult<net.minecraft.nbt.Tag> dataresult = this.brain.serializeStart(NbtOps.INSTANCE);
         Logger logger = LivingEntity.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((net_minecraft_nbt_tag) -> {
-            compoundtag.put("Brain", net_minecraft_nbt_tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((net_minecraft_nbt_tag) -> compoundtag.put("Brain", net_minecraft_nbt_tag));
     }
 
     @Override
@@ -2938,20 +2933,21 @@
         }).orElse(false);
     }
 
+    // PistonMC - Fix decompile errors
     public void stopSleeping() {
-        Optional optional = this.getSleepingPos();
+        Optional<BlockPos> optional = this.getSleepingPos();
         Level level = this.level;
 
-        this.level.getClass();
+//        this.level.getClass();
         optional.filter(level::hasChunkAt).ifPresent((blockpos) -> {
             BlockState blockstate = this.level.getBlockState(blockpos);
 
             if (blockstate.getBlock() instanceof BedBlock) {
-                this.level.setBlock(blockpos, (BlockState) blockstate.setValue(BedBlock.OCCUPIED, false), 3);
-                Vec3 vec3 = (Vec3) BedBlock.findStandUpPosition(this.getType(), this.level, blockpos, this.yRot).orElseGet(() -> {
+                this.level.setBlock(blockpos, blockstate.setValue(BedBlock.OCCUPIED, false), 3);
+                Vec3 vec3 = BedBlock.findStandUpPosition(this.getType(), this.level, blockpos, this.yRot).orElseGet(() -> {
                     BlockPos blockpos1 = blockpos.above();
 
-                    return new Vec3((double) blockpos1.getX() + 0.5D, (double) blockpos1.getY() + 0.1D, (double) blockpos1.getZ() + 0.5D);
+                    return new Vec3(blockpos1.getX() + 0.5D, blockpos1.getY() + 0.1D, blockpos1.getZ() + 0.5D);
                 });
                 Vec3 vec31 = Vec3.atBottomCenterOf(blockpos).subtract(vec3).normalize();
                 float f = (float) Mth.wrapDegrees(Mth.atan2(vec31.z, vec31.x) * 57.2957763671875D - 90.0D);
Index: net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java b/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java	(date 1611660380181)
@@ -57,8 +57,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, CopyNameFunction copynamefunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) copynamefunction, jsonserializationcontext);
+            super.serialize(jsonobject, copynamefunction, jsonserializationcontext);
             jsonobject.addProperty("source", copynamefunction.source.name);
         }
 
Index: net/minecraft/world/entity/SpawnPlacements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/SpawnPlacements.java b/net/minecraft/world/entity/SpawnPlacements.java
--- a/net/minecraft/world/entity/SpawnPlacements.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/SpawnPlacements.java	(date 1611648888649)
@@ -59,10 +59,11 @@
         return spawnplacements_data == null ? Heightmap.Types.MOTION_BLOCKING_NO_LEAVES : spawnplacements_data.heightMap;
     }
 
+    // PistonMC - Fix decompile errors
     public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entitytype, ServerLevelAccessor serverlevelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, Random random) {
-        SpawnPlacements.Data spawnplacements_data = (SpawnPlacements.Data) SpawnPlacements.DATA_BY_TYPE.get(entitytype);
+        SpawnPlacements.Data spawnplacements_data = SpawnPlacements.DATA_BY_TYPE.get(entitytype);
 
-        return spawnplacements_data == null || spawnplacements_data.predicate.test(entitytype, serverlevelaccessor, mobspawntype, blockpos, random);
+        return spawnplacements_data == null || spawnplacements_data.predicate.test((EntityType) entitytype, serverlevelaccessor, mobspawntype, blockpos, random);
     }
 
     static {
Index: net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java b/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java	(date 1611660380197)
@@ -46,6 +46,7 @@
         return this.resolutionContext != null ? ImmutableSet.of(this.resolutionContext.getParam()) : ImmutableSet.of();
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public ItemStack run(ItemStack itemstack, LootContext lootcontext) {
         ListTag listtag = this.getLoreTag(itemstack, !this.lore.isEmpty());
@@ -55,7 +56,7 @@
                 listtag.clear();
             }
 
-            UnaryOperator unaryoperator = SetNameFunction.createResolver(lootcontext, this.resolutionContext);
+            UnaryOperator<Component> unaryoperator = SetNameFunction.createResolver(lootcontext, this.resolutionContext);
 
             this.lore.stream().map(unaryoperator).map(Component.Serializer::toJson).map(StringTag::valueOf).forEach(listtag::add);
         }
@@ -107,8 +108,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, SetLoreFunction setlorefunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) setlorefunction, jsonserializationcontext);
+            super.serialize(jsonobject, setlorefunction, jsonserializationcontext);
             jsonobject.addProperty("replace", setlorefunction.replace);
             JsonArray jsonarray = new JsonArray();
             Iterator iterator = setlorefunction.lore.iterator();
Index: net/minecraft/world/level/block/state/properties/BlockStateProperties.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/state/properties/BlockStateProperties.java b/net/minecraft/world/level/block/state/properties/BlockStateProperties.java
--- a/net/minecraft/world/level/block/state/properties/BlockStateProperties.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/state/properties/BlockStateProperties.java	(date 1611504886946)
@@ -36,7 +36,8 @@
     public static final BooleanProperty UNSTABLE = BooleanProperty.create("unstable");
     public static final BooleanProperty WATERLOGGED = BooleanProperty.create("waterlogged");
     public static final BooleanProperty VINE_END = BooleanProperty.create("vine_end");
-    public static final EnumProperty<Direction.Axis> HORIZONTAL_AXIS = EnumProperty.create("axis", Direction.Axis.class, (Enum[])(Direction.Axis.X, Direction.Axis.Z));
+    // PistonMC - Fix decompile errors
+    public static final EnumProperty<Direction.Axis> HORIZONTAL_AXIS = EnumProperty.create("axis", Direction.Axis.class, Direction.Axis.X, Direction.Axis.Z);
     public static final EnumProperty<Direction.Axis> AXIS = EnumProperty.create("axis", Direction.Axis.class);
     public static final BooleanProperty UP = BooleanProperty.create("up");
     public static final BooleanProperty DOWN = BooleanProperty.create("down");
@@ -48,7 +49,7 @@
     public static final DirectionProperty FACING_HOPPER = DirectionProperty.create("facing", (direction) -> {
         return direction != Direction.UP;
     });
-    public static final DirectionProperty HORIZONTAL_FACING = DirectionProperty.create("facing", (Predicate) Direction.Plane.HORIZONTAL);
+    public static final DirectionProperty HORIZONTAL_FACING = DirectionProperty.create("facing", Direction.Plane.HORIZONTAL);
     public static final EnumProperty<FrontAndTop> ORIENTATION = EnumProperty.create("orientation", FrontAndTop.class);
     public static final EnumProperty<AttachFace> ATTACH_FACE = EnumProperty.create("face", AttachFace.class);
     public static final EnumProperty<BellAttachType> BELL_ATTACHMENT = EnumProperty.create("attachment", BellAttachType.class);
Index: net/minecraft/world/entity/ai/Brain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/Brain.java b/net/minecraft/world/entity/ai/Brain.java
--- a/net/minecraft/world/entity/ai/Brain.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/Brain.java	(date 1611574661889)
@@ -60,62 +60,44 @@
         return new Brain.Provider<>(collection, collection1);
     }
 
+    // PistonMC - Fix decompile errors
     public static <E extends LivingEntity> Codec<Brain<E>> codec(final Collection<? extends MemoryModuleType<?>> collection, final Collection<? extends SensorType<? extends Sensor<? super E>>> collection1) {
-        final MutableObject mutableobject = new MutableObject();
+        final MutableObject<Codec<Brain<E>>> mutableobject = new MutableObject<>();
 
-        mutableobject.setValue((new MapCodec<Brain<E>>() {
+        mutableobject.setValue(new MapCodec<Brain<E>>() {
             public <T> Stream<T> keys(DynamicOps<T> dynamicops) {
-                return collection.stream().flatMap((memorymoduletype) -> {
-                    return Util.toStream(memorymoduletype.getCodec().map((codec) -> {
-                        return Registry.MEMORY_MODULE_TYPE.getKey(memorymoduletype);
-                    }));
-                }).map((resourcelocation) -> {
-                    return dynamicops.createString(resourcelocation.toString());
-                });
+                return collection.stream().flatMap((memorymoduletype) -> Util.toStream(memorymoduletype.getCodec().map((codec) -> Registry.MEMORY_MODULE_TYPE.getKey(memorymoduletype))))
+                        .map((resourcelocation) -> dynamicops.createString(resourcelocation.toString()));
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicops, MapLike<T> maplike) {
-                MutableObject mutableobject1 = new MutableObject(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> mutableobject1 = new MutableObject<>(DataResult.success(ImmutableList.builder()));
 
                 maplike.entries().forEach((pair) -> {
-                    DataResult dataresult = Registry.MEMORY_MODULE_TYPE.parse(dynamicops, pair.getFirst());
-                    DataResult dataresult1 = dataresult.flatMap((memorymoduletype) -> {
-                        return this.captureRead(memorymoduletype, dynamicops, pair.getSecond());
-                    });
+                    DataResult<MemoryModuleType<?>> dataresult = Registry.MEMORY_MODULE_TYPE.parse(dynamicops, pair.getFirst());
+                    DataResult<MemoryValue<?>> dataresult1 = (DataResult) dataresult.flatMap((memorymoduletype) -> this.captureRead(memorymoduletype, dynamicops, pair.getSecond()));
 
-                    mutableobject1.setValue(((DataResult) mutableobject1.getValue()).apply2(Builder::add, dataresult1));
+                    mutableobject1.setValue(mutableobject1.getValue().apply2(Builder::add, dataresult1));
                 });
-                DataResult dataresult = (DataResult) mutableobject1.getValue();
+                DataResult<ImmutableList.Builder<MemoryValue<?>>> dataresult = mutableobject1.getValue();
                 Logger logger = Brain.LOGGER;
 
-                logger.getClass();
-                ImmutableList immutablelist = (ImmutableList) dataresult.resultOrPartial(logger::error).map(Builder::build).orElseGet(ImmutableList::of);
-                Collection collection2 = collection;
-                Collection collection3 = collection1;
-                MutableObject mutableobject2 = mutableobject;
-
-                mutableobject.getClass();
-                return DataResult.success(new Brain<>(collection2, collection3, immutablelist, mutableobject2::getValue));
+//                logger.getClass();
+//                mutableobject.getClass();
+                return DataResult.success(new Brain<>(collection, collection1, dataresult.resultOrPartial(logger::error).map(Builder::build).orElseGet(ImmutableList::of), mutableobject::getValue));
             }
 
             private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memorymoduletype, DynamicOps<T> dynamicops, T t0) {
-                return ((DataResult) memorymoduletype.getCodec().map(DataResult::success).orElseGet(() -> {
-                    return DataResult.error("No codec for memory: " + memorymoduletype);
-                })).flatMap((codec) -> {
-                    return codec.parse(dynamicops, t0);
-                }).map((expirablevalue) -> {
-                    return new Brain.MemoryValue<>(memorymoduletype, Optional.of(expirablevalue));
-                });
+                return memorymoduletype.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + memorymoduletype))
+                        .flatMap((codec) -> codec.parse(dynamicops, t0)).map((expirablevalue) -> new MemoryValue<>(memorymoduletype, Optional.of(expirablevalue)));
             }
 
             public <T> RecordBuilder<T> encode(Brain<E> brain, DynamicOps<T> dynamicops, RecordBuilder<T> recordbuilder) {
-                brain.memories().forEach((brain_memoryvalue) -> {
-                    brain_memoryvalue.serialize(dynamicops, recordbuilder);
-                });
+                brain.memories().forEach((brain_memoryvalue) -> brain_memoryvalue.serialize(dynamicops, recordbuilder));
                 return recordbuilder;
             }
-        }).fieldOf("memories").codec());
-        return (Codec) mutableobject.getValue();
+        }.fieldOf("memories").codec());
+        return mutableobject.getValue();
     }
 
     public Brain(Collection<? extends MemoryModuleType<?>> collection, Collection<? extends SensorType<? extends Sensor<? super E>>> collection1, ImmutableList<Brain.MemoryValue<?>> immutablelist, Supplier<Codec<Brain<E>>> supplier) {
@@ -207,8 +189,9 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public <U> Optional<U> getMemory(MemoryModuleType<U> memorymoduletype) {
-        return ((Optional) this.memories.get(memorymoduletype)).map(ExpirableValue::getValue);
+        return ((Optional<? extends ExpirableValue<U>>) this.memories.get(memorymoduletype)).map(ExpirableValue::getValue);
     }
 
     public <U> boolean isMemoryValue(MemoryModuleType<U> memorymoduletype, U u0) {
@@ -371,22 +354,15 @@
         this.addActivityAndRemoveMemoriesWhenStopped(activity, immutablelist, set, Sets.newHashSet());
     }
 
+    // PistonMC - Fix decompile errors
     private void addActivityAndRemoveMemoriesWhenStopped(Activity activity, ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> immutablelist, Set<Pair<MemoryModuleType<?>, MemoryStatus>> set, Set<MemoryModuleType<?>> set1) {
         this.activityRequirements.put(activity, set);
         if (!set1.isEmpty()) {
             this.activityMemoriesToEraseWhenStopped.put(activity, set1);
         }
 
-        UnmodifiableIterator unmodifiableiterator = immutablelist.iterator();
-
-        while (unmodifiableiterator.hasNext()) {
-            Pair pair = (Pair) unmodifiableiterator.next();
-
-            ((Set) ((Map) this.availableBehaviorsByPriority.computeIfAbsent(pair.getFirst(), (integer) -> {
-                return Maps.newHashMap();
-            })).computeIfAbsent(activity, (activity1) -> {
-                return Sets.newLinkedHashSet();
-            })).add(pair.getSecond());
+        for(Pair<Integer, ? extends Behavior<? super E>> pair : immutablelist) {
+            this.availableBehaviorsByPriority.computeIfAbsent(pair.getFirst(), (integer) -> Maps.newHashMap()).computeIfAbsent(activity, (activity1) -> Sets.newLinkedHashSet()).add(pair.getSecond());
         }
 
     }
@@ -547,8 +523,9 @@
         private final MemoryModuleType<U> type;
         private final Optional<? extends ExpirableValue<U>> value;
 
+        // PistonMC - Fix decompile errors
         private static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memorymoduletype, Optional<? extends ExpirableValue<?>> optional) {
-            return new Brain.MemoryValue<>(memorymoduletype, optional);
+            return new Brain.MemoryValue<>(memorymoduletype, (Optional<? extends ExpirableValue<U>>) optional);
         }
 
         private MemoryValue(MemoryModuleType<U> memorymoduletype, Optional<? extends ExpirableValue<U>> optional) {
Index: net/minecraft/world/level/chunk/ChunkGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/ChunkGenerator.java b/net/minecraft/world/level/chunk/ChunkGenerator.java
--- a/net/minecraft/world/level/chunk/ChunkGenerator.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/ChunkGenerator.java	(date 1611554321397)
@@ -130,28 +130,27 @@
         ((ProtoChunk) chunkaccess).setBiomes(new ChunkBiomeContainer(registry, chunkpos, this.runtimeBiomeSource));
     }
 
+    // PistonMC - Fix decompile errors
     public void applyCarvers(long i, BiomeManager biomemanager, ChunkAccess chunkaccess, GenerationStep.Carving generationstep_carving) {
         BiomeManager biomemanager1 = biomemanager.withDifferentSource(this.biomeSource);
         WorldgenRandom worldgenrandom = new WorldgenRandom();
         boolean flag = true;
         ChunkPos chunkpos = chunkaccess.getPos();
-        int j = chunkpos.x;
-        int k = chunkpos.z;
+        int chunkX = chunkpos.x;
+        int chunkZ = chunkpos.z;
         BiomeGenerationSettings biomegenerationsettings = this.biomeSource.getNoiseBiome(chunkpos.x << 2, 0, chunkpos.z << 2).getGenerationSettings();
         BitSet bitset = ((ProtoChunk) chunkaccess).getOrCreateCarvingMask(generationstep_carving);
 
-        for (int l = j - 8; l <= j + 8; ++l) {
-            for (int i1 = k - 8; i1 <= k + 8; ++i1) {
-                List list = biomegenerationsettings.getCarvers(generationstep_carving);
-                ListIterator listiterator = list.listIterator();
-
-                while (listiterator.hasNext()) {
+        for (int l = chunkX - 8; l <= chunkX + 8; ++l) {
+            for (int i1 = chunkZ - 8; i1 <= chunkZ + 8; ++i1) {
+                List<Supplier<ConfiguredWorldCarver<?>>> list = biomegenerationsettings.getCarvers(generationstep_carving);
+                for(ListIterator<Supplier<ConfiguredWorldCarver<?>>> listiterator = list.listIterator(); listiterator.hasNext(); ) {
                     int j1 = listiterator.nextIndex();
-                    ConfiguredWorldCarver configuredworldcarver = (ConfiguredWorldCarver) ((Supplier) listiterator.next()).get();
+                    ConfiguredWorldCarver<?> configuredworldcarver = listiterator.next().get();
 
                     worldgenrandom.setLargeFeatureSeed(i + (long) j1, l, i1);
                     if (configuredworldcarver.isStartChunk(worldgenrandom, l, i1)) {
-                        configuredworldcarver.carve(chunkaccess, biomemanager1::getBiome, worldgenrandom, this.getSeaLevel(), l, i1, j, k, bitset);
+                        configuredworldcarver.carve(chunkaccess, biomemanager1::getBiome, worldgenrandom, this.getSeaLevel(), l, i1, chunkX, chunkZ, bitset);
                     }
                 }
             }
Index: net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java b/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
--- a/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java	(date 1611658076223)
@@ -44,9 +44,10 @@
         return ImmutableSet.of(LootContextParams.BLOCK_STATE);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected ItemStack run(ItemStack itemstack, LootContext lootcontext) {
-        BlockState blockstate = (BlockState) lootcontext.getParamOrNull(LootContextParams.BLOCK_STATE);
+        BlockState blockstate = lootcontext.getParamOrNull(LootContextParams.BLOCK_STATE);
 
         if (blockstate != null) {
             CompoundTag compoundtag = itemstack.getOrCreateTag();
@@ -59,12 +60,10 @@
                 compoundtag.put("BlockStateTag", compoundtag1);
             }
 
-            Stream stream = this.properties.stream();
+            Stream<Property<?>> stream = this.properties.stream();
 
-            blockstate.getClass();
-            stream.filter(blockstate::hasProperty).forEach((property) -> {
-                compoundtag1.putString(property.getName(), serialize(blockstate, property));
-            });
+//            blockstate.getClass();
+            stream.filter(blockstate::hasProperty).forEach((property) -> compoundtag1.putString(property.getName(), serialize(blockstate, property)));
         }
 
         return itemstack;
@@ -74,8 +73,9 @@
         return new CopyBlockState.Builder(block);
     }
 
+    // PistonMC - Fix decompile errors
     private static <T extends Comparable<T>> String serialize(BlockState blockstate, Property<T> property) {
-        Comparable comparable = blockstate.getValue(property);
+        T comparable = blockstate.getValue(property);
 
         return property.getName(comparable);
     }
@@ -84,8 +84,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, CopyBlockState copyblockstate, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) copyblockstate, jsonserializationcontext);
+            super.serialize(jsonobject, copyblockstate, jsonserializationcontext);
             jsonobject.addProperty("block", Registry.BLOCK.getKey(copyblockstate.block).toString());
             JsonArray jsonarray = new JsonArray();
 
Index: net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java b/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java	(date 1611657623566)
@@ -80,8 +80,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, SetNameFunction setnamefunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) setnamefunction, jsonserializationcontext);
+            super.serialize(jsonobject, setnamefunction, jsonserializationcontext);
             if (setnamefunction.name != null) {
                 jsonobject.add("name", Component.Serializer.toJsonTree(setnamefunction.name));
             }
Index: net/minecraft/world/level/chunk/LevelChunk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/LevelChunk.java b/net/minecraft/world/level/chunk/LevelChunk.java
--- a/net/minecraft/world/level/chunk/LevelChunk.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/LevelChunk.java	(date 1611584892335)
@@ -549,6 +549,7 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Entity> void getEntities(@Nullable EntityType<?> entitytype, AABB aabb, List<? super T> list, Predicate<? super T> predicate) {
         int i = Mth.floor((aabb.minY - 2.0D) / 16.0D);
         int j = Mth.floor((aabb.maxY + 2.0D) / 16.0D);
@@ -557,19 +558,16 @@
         j = Mth.clamp(j, 0, this.entitySections.length - 1);
 
         for (int k = i; k <= j; ++k) {
-            Iterator iterator = this.entitySections[k].find(Entity.class).iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
-
-                if ((entitytype == null || entity.getType() == entitytype) && entity.getBoundingBox().intersects(aabb) && predicate.test(entity)) {
-                    list.add(entity);
+            for(Entity entity : this.entitySections[k].find(Entity.class)) {
+                if ((entitytype == null || entity.getType() == entitytype) && entity.getBoundingBox().intersects(aabb) && predicate.test((T) entity)) {
+                    list.add((T) entity);
                 }
             }
         }
 
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Entity> void getEntitiesOfClass(Class<? extends T> oclass, AABB aabb, List<T> list, @Nullable Predicate<? super T> predicate) {
         int i = Mth.floor((aabb.minY - 2.0D) / 16.0D);
         int j = Mth.floor((aabb.maxY + 2.0D) / 16.0D);
@@ -578,11 +576,7 @@
         j = Mth.clamp(j, 0, this.entitySections.length - 1);
 
         for (int k = i; k <= j; ++k) {
-            Iterator iterator = this.entitySections[k].find(oclass).iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
-
+            for(T entity : this.entitySections[k].find(oclass)) {
                 if (entity.getBoundingBox().intersects(aabb) && (predicate == null || predicate.test(entity))) {
                     list.add(entity);
                 }
@@ -795,36 +789,34 @@
         return this.postProcessing;
     }
 
+    // PistonMC - Fix decompile errors
     public void unpackTicks() {
         if (this.blockTicks instanceof ProtoTickList) {
-            ((ProtoTickList) this.blockTicks).copyOut(this.level.getBlockTicks(), (blockpos) -> {
-                return this.getBlockState(blockpos).getBlock();
-            });
+            ((ProtoTickList<Block>) this.blockTicks).copyOut(this.level.getBlockTicks(), (blockpos) -> this.getBlockState(blockpos).getBlock());
             this.blockTicks = EmptyTickList.empty();
         } else if (this.blockTicks instanceof ChunkTickList) {
-            ((ChunkTickList) this.blockTicks).copyOut(this.level.getBlockTicks());
+            ((ChunkTickList<Block>) this.blockTicks).copyOut(this.level.getBlockTicks());
             this.blockTicks = EmptyTickList.empty();
         }
 
         if (this.liquidTicks instanceof ProtoTickList) {
-            ((ProtoTickList) this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockpos) -> {
-                return this.getFluidState(blockpos).getType();
-            });
+            ((ProtoTickList<Fluid>) this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockpos) -> this.getFluidState(blockpos).getType());
             this.liquidTicks = EmptyTickList.empty();
         } else if (this.liquidTicks instanceof ChunkTickList) {
-            ((ChunkTickList) this.liquidTicks).copyOut(this.level.getLiquidTicks());
+            ((ChunkTickList<Fluid>) this.liquidTicks).copyOut(this.level.getLiquidTicks());
             this.liquidTicks = EmptyTickList.empty();
         }
 
     }
 
+    // PistonMC - Fix decompile errors
     public void packTicks(ServerLevel serverlevel) {
-        if (this.blockTicks == EmptyTickList.empty()) {
+        if (this.blockTicks == EmptyTickList.<Block>empty()) {
             this.blockTicks = new ChunkTickList<>(Registry.BLOCK::getKey, serverlevel.getBlockTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
             this.setUnsaved(true);
         }
 
-        if (this.liquidTicks == EmptyTickList.empty()) {
+        if (this.liquidTicks == EmptyTickList.<Fluid>empty()) {
             this.liquidTicks = new ChunkTickList<>(Registry.FLUID::getKey, serverlevel.getLiquidTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
             this.setUnsaved(true);
         }
Index: net/minecraft/world/level/chunk/UpgradeData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/UpgradeData.java b/net/minecraft/world/level/chunk/UpgradeData.java
--- a/net/minecraft/world/level/chunk/UpgradeData.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/UpgradeData.java	(date 1611584892349)
@@ -303,34 +303,27 @@
                 return blockstate;
             }
 
+            // PistonMC - Fix decompile errors
             @Override
             public void processChunk(LevelAccessor levelaccessor) {
                 BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
-                List list = (List) this.queue.get();
+                List<ObjectSet<BlockPos>> list = this.queue.get();
 
                 for (int i = 2; i < list.size(); ++i) {
                     int j = i - 1;
-                    ObjectSet objectset = (ObjectSet) list.get(j);
-                    ObjectSet objectset1 = (ObjectSet) list.get(i);
-                    ObjectIterator objectiterator = objectset.iterator();
-
-                    while (objectiterator.hasNext()) {
-                        BlockPos blockpos = (BlockPos) objectiterator.next();
+                    ObjectSet<BlockPos> objectset = list.get(j);
+                    ObjectSet<BlockPos> objectset1 = list.get(i);
+                    for(BlockPos blockpos : objectset) {
                         BlockState blockstate = levelaccessor.getBlockState(blockpos);
 
-                        if ((Integer) blockstate.getValue(BlockStateProperties.DISTANCE) >= j) {
-                            levelaccessor.setBlock(blockpos, (BlockState) blockstate.setValue(BlockStateProperties.DISTANCE, j), 18);
+                        if (blockstate.getValue(BlockStateProperties.DISTANCE) >= j) {
+                            levelaccessor.setBlock(blockpos, blockstate.setValue(BlockStateProperties.DISTANCE, j), 18);
                             if (i != 7) {
-                                Direction[] adirection = null.DIRECTIONS;
-                                int k = adirection.length;
-
-                                for (int l = 0; l < k; ++l) {
-                                    Direction direction = adirection[l];
-
+                                for(Direction direction : DIRECTIONS) {
                                     blockpos_mutableblockpos.setWithOffset(blockpos, direction);
                                     BlockState blockstate1 = levelaccessor.getBlockState(blockpos_mutableblockpos);
 
-                                    if (blockstate1.hasProperty(BlockStateProperties.DISTANCE) && (Integer) blockstate.getValue(BlockStateProperties.DISTANCE) > i) {
+                                    if (blockstate1.hasProperty(BlockStateProperties.DISTANCE) && blockstate.getValue(BlockStateProperties.DISTANCE) > i) {
                                         objectset1.add(blockpos_mutableblockpos.immutable());
                                     }
                                 }
Index: net/minecraft/world/level/chunk/storage/IOWorker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/storage/IOWorker.java b/net/minecraft/world/level/chunk/storage/IOWorker.java
--- a/net/minecraft/world/level/chunk/storage/IOWorker.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/storage/IOWorker.java	(date 1611604039597)
@@ -126,10 +126,11 @@
         this.mailbox.tell(new StrictQueue.IntRunnable(IOWorker.Priority.LOW.ordinal(), this::storePendingChunk));
     }
 
+    // PistonMC - Fix decompile errors
     private void runStore(ChunkPos chunkpos, IOWorker.PendingStore ioworker_pendingstore) {
         try {
             this.storage.write(chunkpos, ioworker_pendingstore.data);
-            ioworker_pendingstore.result.complete((Object) null);
+            ioworker_pendingstore.result.complete(null);
         } catch (Exception exception) {
             IOWorker.LOGGER.error("Failed to store chunk {}", chunkpos, exception);
             ioworker_pendingstore.result.completeExceptionally(exception);
Index: net/minecraft/world/level/chunk/storage/RegionFileStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
--- a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java	(date 1611647249275)
@@ -109,13 +109,10 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public void close() throws IOException {
-        ExceptionCollector exceptioncollector = new ExceptionCollector<>();
-        ObjectIterator objectiterator = this.regionCache.values().iterator();
-
-        while (objectiterator.hasNext()) {
-            RegionFile regionfile = (RegionFile) objectiterator.next();
-
+        ExceptionCollector<IOException> exceptioncollector = new ExceptionCollector<>();
+        for(RegionFile regionfile : this.regionCache.values()) {
             try {
                 regionfile.close();
             } catch (IOException ioexception) {
Index: net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java b/net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java
--- a/net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java	(date 1611658076211)
@@ -38,8 +38,9 @@
         brain.setMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, (Object) i);
     }
 
+    // PistonMC - Fix decompile errors
     protected void start(ServerLevel serverlevel, Villager villager, long i) {
-        Brain brain = villager.getBrain();
+        Brain<Villager> brain = villager.getBrain();
 
         brain.getMemory(this.memoryType).ifPresent((globalpos) -> {
             if (!this.wrongDimension(serverlevel, globalpos) && !this.tiredOfTryingToFindTarget(serverlevel, villager)) {
@@ -56,9 +57,9 @@
                         return;
                     }
 
-                    brain.setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(vec3, this.speedModifier, this.closeEnoughDist)));
+                    brain.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(vec3, this.speedModifier, this.closeEnoughDist));
                 } else if (!this.closeEnough(serverlevel, villager, globalpos)) {
-                    brain.setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(globalpos.pos(), this.speedModifier, this.closeEnoughDist)));
+                    brain.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(globalpos.pos(), this.speedModifier, this.closeEnoughDist));
                 }
             } else {
                 this.dropPOI(villager, i);
Index: net/minecraft/world/level/chunk/storage/SectionStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/chunk/storage/SectionStorage.java b/net/minecraft/world/level/chunk/storage/SectionStorage.java
--- a/net/minecraft/world/level/chunk/storage/SectionStorage.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/chunk/storage/SectionStorage.java	(date 1611603678437)
@@ -89,15 +89,14 @@
         return Level.isOutsideBuildHeight(SectionPos.sectionToBlockCoord(sectionpos.y()));
     }
 
+    // PistonMC - Fix decompile errors
     protected R getOrCreate(long i) {
-        Optional optional = this.getOrLoad(i);
+        Optional<R> optional = this.getOrLoad(i);
 
         if (optional.isPresent()) {
             return optional.get();
         } else {
-            Object object = this.factory.apply(() -> {
-                this.setDirty(i);
-            });
+            R object = this.factory.apply(() -> this.setDirty(i));
 
             this.storage.put(i, Optional.of(object));
             return object;
@@ -118,28 +117,27 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private <T> void readColumn(ChunkPos chunkpos, DynamicOps<T> dynamicops, @Nullable T t0) {
         if (t0 == null) {
             for (int i = 0; i < 16; ++i) {
                 this.storage.put(SectionPos.of(chunkpos, i).asLong(), Optional.empty());
             }
         } else {
-            Dynamic dynamic = new Dynamic(dynamicops, t0);
+            Dynamic<T> dynamic = new Dynamic<>(dynamicops, t0);
             int j = getVersion(dynamic);
             int k = SharedConstants.getCurrentVersion().getWorldVersion();
             boolean flag = j != k;
-            Dynamic dynamic1 = this.fixerUpper.update(this.type.getType(), dynamic, j, k);
-            OptionalDynamic optionaldynamic = dynamic1.get("Sections");
+            Dynamic<T> dynamic1 = this.fixerUpper.update(this.type.getType(), dynamic, j, k);
+            OptionalDynamic<T> optionaldynamic = dynamic1.get("Sections");
 
             for (int l = 0; l < 16; ++l) {
                 long i1 = SectionPos.of(chunkpos, l).asLong();
-                Optional optional = optionaldynamic.get(Integer.toString(l)).result().flatMap((dynamic2) -> {
-                    DataResult dataresult = ((Codec) this.codec.apply(() -> {
-                        this.setDirty(i1);
-                    })).parse(dynamic2);
+                Optional<R> optional = optionaldynamic.get(Integer.toString(l)).result().flatMap((dynamic2) -> {
+                    DataResult<R> dataresult = this.codec.apply(() -> this.setDirty(i1)).parse(dynamic2);
                     Logger logger = SectionStorage.LOGGER;
 
-                    logger.getClass();
+//                    logger.getClass();
                     return dataresult.resultOrPartial(logger::error);
                 });
 
@@ -168,30 +166,29 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private <T> Dynamic<T> writeColumn(ChunkPos chunkpos, DynamicOps<T> dynamicops) {
-        HashMap hashmap = Maps.newHashMap();
+        HashMap<T, T> hashmap = Maps.newHashMap();
 
         for (int i = 0; i < 16; ++i) {
             long j = SectionPos.of(chunkpos, i).asLong();
 
             this.dirty.remove(j);
-            Optional optional = (Optional) this.storage.get(j);
+            Optional<R> optional = this.storage.get(j);
 
             if (optional != null && optional.isPresent()) {
-                DataResult dataresult = ((Codec) this.codec.apply(() -> {
-                    this.setDirty(j);
-                })).encodeStart(dynamicops, optional.get());
+                DataResult<T> dataresult = this.codec.apply(() -> this.setDirty(j)).encodeStart(dynamicops, optional.get());
                 String s = Integer.toString(i);
                 Logger logger = SectionStorage.LOGGER;
 
-                logger.getClass();
+//                logger.getClass();
                 dataresult.resultOrPartial(logger::error).ifPresent((object) -> {
                     hashmap.put(dynamicops.createString(s), object);
                 });
             }
         }
 
-        return new Dynamic(dynamicops, dynamicops.createMap(ImmutableMap.of(dynamicops.createString("Sections"), dynamicops.createMap(hashmap), dynamicops.createString("DataVersion"), dynamicops.createInt(SharedConstants.getCurrentVersion().getWorldVersion()))));
+        return new Dynamic<>(dynamicops, dynamicops.createMap(ImmutableMap.of(dynamicops.createString("Sections"), dynamicops.createMap(hashmap), dynamicops.createString("DataVersion"), dynamicops.createInt(SharedConstants.getCurrentVersion().getWorldVersion()))));
     }
 
     protected void onSectionLoad(long i) {}
Index: net/minecraft/world/level/dimension/LevelStem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/dimension/LevelStem.java b/net/minecraft/world/level/dimension/LevelStem.java
--- a/net/minecraft/world/level/dimension/LevelStem.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/dimension/LevelStem.java	(date 1611554321390)
@@ -50,24 +50,19 @@
         return this.generator;
     }
 
+    // PistonMC - Fix decompile errors
     public static MappedRegistry<LevelStem> sortMap(MappedRegistry<LevelStem> mappedregistry) {
-        MappedRegistry mappedregistry1 = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-        Iterator iterator = LevelStem.BUILTIN_ORDER.iterator();
-
-        while (iterator.hasNext()) {
-            ResourceKey resourcekey = (ResourceKey) iterator.next();
-            LevelStem levelstem = (LevelStem) mappedregistry.get(resourcekey);
+        MappedRegistry<LevelStem> mappedregistry1 = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+        for(ResourceKey<LevelStem> resourcekey : LevelStem.BUILTIN_ORDER) {
+            LevelStem levelstem = mappedregistry.get(resourcekey);
 
             if (levelstem != null) {
-                mappedregistry1.register(resourcekey, (Object) levelstem, mappedregistry.lifecycle(levelstem));
+                mappedregistry1.register(resourcekey, levelstem, mappedregistry.lifecycle(levelstem));
             }
         }
 
-        iterator = mappedregistry.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            ResourceKey resourcekey1 = (ResourceKey) entry.getKey();
+        for(Entry<ResourceKey<LevelStem>, LevelStem> entry : mappedregistry.entrySet()) {
+            ResourceKey<LevelStem> resourcekey1 = entry.getKey();
 
             if (!LevelStem.BUILTIN_ORDER.contains(resourcekey1)) {
                 mappedregistry1.register(resourcekey1, entry.getValue(), mappedregistry.lifecycle(entry.getValue()));
Index: net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java b/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java
--- a/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java	(date 1611635217306)
@@ -16,21 +16,19 @@
 public enum DragonRespawnAnimation {
 
     START {
+        // PistonMC - Fix decompile errors
         @Override
         public void tick(ServerLevel serverlevel, EndDragonFight enddragonfight, List<EndCrystal> list, int i, BlockPos blockpos) {
             BlockPos blockpos1 = new BlockPos(0, 128, 0);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EndCrystal endcrystal = (EndCrystal) iterator.next();
-
+            for(EndCrystal endcrystal : list) {
                 endcrystal.setBeamTarget(blockpos1);
             }
 
-            enddragonfight.setRespawnStage(null.PREPARING_TO_SUMMON_PILLARS);
+            enddragonfight.setRespawnStage(PREPARING_TO_SUMMON_PILLARS);
         }
     },
     PREPARING_TO_SUMMON_PILLARS {
+        // PistonMC - Fix decompile errors
         @Override
         public void tick(ServerLevel serverlevel, EndDragonFight enddragonfight, List<EndCrystal> list, int i, BlockPos blockpos) {
             if (i < 100) {
@@ -38,12 +36,13 @@
                     serverlevel.levelEvent(3001, new BlockPos(0, 128, 0), 0);
                 }
             } else {
-                enddragonfight.setRespawnStage(null.SUMMONING_PILLARS);
+                enddragonfight.setRespawnStage(SUMMONING_PILLARS);
             }
 
         }
     },
     SUMMONING_PILLARS {
+        // PistonMC - Fix decompile errors
         @Override
         public void tick(ServerLevel serverlevel, EndDragonFight enddragonfight, List<EndCrystal> list, int i, BlockPos blockpos) {
             boolean flag = true;
@@ -51,66 +50,50 @@
             boolean flag2 = i % 40 == 39;
 
             if (flag1 || flag2) {
-                List list1 = SpikeFeature.getSpikesForLevel(serverlevel);
+                List<SpikeFeature.EndSpike> list1 = SpikeFeature.getSpikesForLevel(serverlevel);
                 int j = i / 40;
 
                 if (j < list1.size()) {
-                    SpikeFeature.EndSpike spikefeature_endspike = (SpikeFeature.EndSpike) list1.get(j);
+                    SpikeFeature.EndSpike spikefeature_endspike = list1.get(j);
 
                     if (flag1) {
-                        Iterator iterator = list.iterator();
-
-                        while (iterator.hasNext()) {
-                            EndCrystal endcrystal = (EndCrystal) iterator.next();
-
+                        for(EndCrystal endcrystal : list) {
                             endcrystal.setBeamTarget(new BlockPos(spikefeature_endspike.getCenterX(), spikefeature_endspike.getHeight() + 1, spikefeature_endspike.getCenterZ()));
                         }
                     } else {
                         boolean flag3 = true;
-                        Iterator iterator1 = BlockPos.betweenClosed(new BlockPos(spikefeature_endspike.getCenterX() - 10, spikefeature_endspike.getHeight() - 10, spikefeature_endspike.getCenterZ() - 10), new BlockPos(spikefeature_endspike.getCenterX() + 10, spikefeature_endspike.getHeight() + 10, spikefeature_endspike.getCenterZ() + 10)).iterator();
-
-                        while (iterator1.hasNext()) {
-                            BlockPos blockpos1 = (BlockPos) iterator1.next();
-
+                        for(BlockPos blockpos1 : BlockPos.betweenClosed(new BlockPos(spikefeature_endspike.getCenterX() - 10, spikefeature_endspike.getHeight() - 10, spikefeature_endspike.getCenterZ() - 10), new BlockPos(spikefeature_endspike.getCenterX() + 10, spikefeature_endspike.getHeight() + 10, spikefeature_endspike.getCenterZ() + 10))) {
                             serverlevel.removeBlock(blockpos1, false);
                         }
 
-                        serverlevel.explode((Entity) null, (double) ((float) spikefeature_endspike.getCenterX() + 0.5F), (double) spikefeature_endspike.getHeight(), (double) ((float) spikefeature_endspike.getCenterZ() + 0.5F), 5.0F, Explosion.BlockInteraction.DESTROY);
+                        serverlevel.explode(null, spikefeature_endspike.getCenterX() + 0.5F, spikefeature_endspike.getHeight(), spikefeature_endspike.getCenterZ() + 0.5F, 5.0F, Explosion.BlockInteraction.DESTROY);
                         SpikeConfiguration spikeconfiguration = new SpikeConfiguration(true, ImmutableList.of(spikefeature_endspike), new BlockPos(0, 128, 0));
 
                         Feature.END_SPIKE.configured(spikeconfiguration).place(serverlevel, serverlevel.getChunkSource().getGenerator(), new Random(), new BlockPos(spikefeature_endspike.getCenterX(), 45, spikefeature_endspike.getCenterZ()));
                     }
                 } else if (flag1) {
-                    enddragonfight.setRespawnStage(null.SUMMONING_DRAGON);
+                    enddragonfight.setRespawnStage(SUMMONING_DRAGON);
                 }
             }
 
         }
     },
     SUMMONING_DRAGON {
+        // PistonMC - Fix decompile errors
         @Override
         public void tick(ServerLevel serverlevel, EndDragonFight enddragonfight, List<EndCrystal> list, int i, BlockPos blockpos) {
-            Iterator iterator;
-            EndCrystal endcrystal;
-
             if (i >= 100) {
-                enddragonfight.setRespawnStage(null.END);
+                enddragonfight.setRespawnStage(END);
                 enddragonfight.resetSpikeCrystals();
-                iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    endcrystal = (EndCrystal) iterator.next();
-                    endcrystal.setBeamTarget((BlockPos) null);
+                for(EndCrystal endcrystal : list) {
+                    endcrystal.setBeamTarget(null);
                     serverlevel.explode(endcrystal, endcrystal.getX(), endcrystal.getY(), endcrystal.getZ(), 6.0F, Explosion.BlockInteraction.NONE);
                     endcrystal.remove();
                 }
             } else if (i >= 80) {
                 serverlevel.levelEvent(3001, new BlockPos(0, 128, 0), 0);
             } else if (i == 0) {
-                iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    endcrystal = (EndCrystal) iterator.next();
+                for(EndCrystal endcrystal : list) {
                     endcrystal.setBeamTarget(new BlockPos(0, 128, 0));
                 }
             } else if (i < 5) {
Index: net/minecraft/world/entity/ai/behavior/UseBonemeal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/UseBonemeal.java b/net/minecraft/world/entity/ai/behavior/UseBonemeal.java
--- a/net/minecraft/world/entity/ai/behavior/UseBonemeal.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/UseBonemeal.java	(date 1611663355786)
@@ -82,12 +82,13 @@
         this.timeWorkedSoFar = 0;
     }
 
+    // PistonMC - Fix decompile errors
     private void setCurrentCropAsTarget(Villager villager) {
         this.cropPos.ifPresent((blockpos) -> {
             BlockPosTracker blockpostracker = new BlockPosTracker(blockpos);
 
-            villager.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (Object) blockpostracker);
-            villager.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(blockpostracker, 0.5F, 1)));
+            villager.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, blockpostracker);
+            villager.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(blockpostracker, 0.5F, 1));
         });
     }
 
Index: net/minecraft/world/level/levelgen/StructureSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/StructureSettings.java b/net/minecraft/world/level/levelgen/StructureSettings.java
--- a/net/minecraft/world/level/levelgen/StructureSettings.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/StructureSettings.java	(date 1611643599683)
@@ -22,14 +22,16 @@
             return structuresettings.structureConfig;
         })).apply(instance, StructureSettings::new);
     });
-    public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
+    // PistonMC - Fix decompile errors
+    public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<StructureFeature<?>, StructureFeatureConfiguration>builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
     public static final StrongholdConfiguration DEFAULT_STRONGHOLD;
     private final Map<StructureFeature<?>, StructureFeatureConfiguration> structureConfig;
     @Nullable
     private final StrongholdConfiguration stronghold;
 
+    // PistonMC - Fix decompile errors
     public StructureSettings(Optional<StrongholdConfiguration> optional, Map<StructureFeature<?>, StructureFeatureConfiguration> map) {
-        this.stronghold = (StrongholdConfiguration) optional.orElse((Object) null);
+        this.stronghold = optional.orElse(null);
         this.structureConfig = map;
     }
 
@@ -52,20 +54,23 @@
         return this.stronghold;
     }
 
+    // PistonMC - Fix decompile errors
     static {
-        Iterator iterator = Registry.STRUCTURE_FEATURE.iterator();
+        Iterator<StructureFeature<?>> iterator = Registry.STRUCTURE_FEATURE.iterator();
 
-        StructureFeature structurefeature;
+        StructureFeature<?> structurefeature = null;
+        boolean flag = true;
 
         do {
             if (!iterator.hasNext()) {
-                DEFAULT_STRONGHOLD = new StrongholdConfiguration(32, 3, 128);
-                return;
+                flag = false;
+                break;
             }
 
-            structurefeature = (StructureFeature) iterator.next();
+            structurefeature = iterator.next();
         } while (StructureSettings.DEFAULTS.containsKey(structurefeature));
 
-        throw new IllegalStateException("Structure feature without default settings: " + Registry.STRUCTURE_FEATURE.getKey(structurefeature));
+        DEFAULT_STRONGHOLD = new StrongholdConfiguration(32, 3, 128);
+        if(flag) throw new IllegalStateException("Structure feature without default settings: " + Registry.STRUCTURE_FEATURE.getKey(structurefeature));
     }
 }
Index: net/minecraft/world/level/levelgen/WorldGenSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/WorldGenSettings.java b/net/minecraft/world/level/levelgen/WorldGenSettings.java
--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java	(date 1611587752791)
@@ -36,11 +36,9 @@
 
 public class WorldGenSettings {
 
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldgensettings) -> {
-            return worldgensettings.legacyCustomOptions;
-        })).apply(instance, instance.stable(WorldGenSettings::new));
-    }).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    // PistonMC - Fix decompile errors
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldgensettings) -> worldgensettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new)))
+            .comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogManager.getLogger();
     private final long seed;
     private final boolean generateFeatures;
@@ -117,15 +115,13 @@
         return withOverworld(mappedregistry, supplier, chunkgenerator);
     }
 
+    // PistonMC - Fix decompile errors
     public static MappedRegistry<LevelStem> withOverworld(MappedRegistry<LevelStem> mappedregistry, Supplier<DimensionType> supplier, ChunkGenerator chunkgenerator) {
-        MappedRegistry mappedregistry1 = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+        MappedRegistry<LevelStem> mappedregistry1 = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
 
-        mappedregistry1.register(LevelStem.OVERWORLD, (Object) (new LevelStem(supplier, chunkgenerator)), Lifecycle.stable());
-        Iterator iterator = mappedregistry.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            ResourceKey resourcekey = (ResourceKey) entry.getKey();
+        mappedregistry1.register(LevelStem.OVERWORLD, new LevelStem(supplier, chunkgenerator), Lifecycle.stable());
+        for(Entry<ResourceKey<LevelStem>, LevelStem> entry : mappedregistry.entrySet()) {
+            ResourceKey<LevelStem> resourcekey = entry.getKey();
 
             if (resourcekey != LevelStem.OVERWORLD) {
                 mappedregistry1.register(resourcekey, entry.getValue(), mappedregistry.lifecycle(entry.getValue()));
Index: net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java b/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
--- a/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java	(date 1611567572513)
@@ -26,13 +26,9 @@
     protected final Predicate<LivingEntity> predicateOnAvoidEntity;
     private final TargetingConditions avoidEntityTargeting;
 
+    // PistonMC - Fix decompile errors
     public AvoidEntityGoal(PathfinderMob pathfindermob, Class<T> oclass, float f, double d0, double d1) {
-        Predicate predicate = (livingentity) -> {
-            return true;
-        };
-        Predicate predicate1 = EntitySelector.NO_CREATIVE_OR_SPECTATOR;
-
-        this(pathfindermob, oclass, predicate, f, d0, d1, predicate1::test);
+        this(pathfindermob, oclass, (livingentity) -> true, f, d0, d1, EntitySelector.NO_CREATIVE_OR_SPECTATOR::test);
     }
 
     public AvoidEntityGoal(PathfinderMob pathfindermob, Class<T> oclass, Predicate<LivingEntity> predicate, float f, double d0, double d1, Predicate<LivingEntity> predicate1) {
Index: net/minecraft/world/level/levelgen/carver/WorldCarver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/carver/WorldCarver.java b/net/minecraft/world/level/levelgen/carver/WorldCarver.java
--- a/net/minecraft/world/level/levelgen/carver/WorldCarver.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/carver/WorldCarver.java	(date 1611645202556)
@@ -38,8 +38,9 @@
     private final Codec<ConfiguredWorldCarver<C>> configuredCodec;
     protected final int genHeight;
 
+    // PistonMC - Fix decompile errors
     private static <C extends CarverConfiguration, F extends WorldCarver<C>> F register(String s, F f0) {
-        return (WorldCarver) Registry.register(Registry.CARVER, s, f0);
+        return Registry.register(Registry.CARVER, s, f0);
     }
 
     public WorldCarver(Codec<C> codec, int i) {
Index: net/minecraft/util/datafix/fixes/AdvancementsFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/net/minecraft/util/datafix/fixes/AdvancementsFix.java
--- a/net/minecraft/util/datafix/fixes/AdvancementsFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/AdvancementsFix.java	(date 1611657623571)
@@ -6,7 +6,8 @@
 
 public class AdvancementsFix extends AdvancementsRenameFix {
 
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+    // PistonMC - Fix decompile errors
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
     public AdvancementsFix(Schema schema, boolean flag) {
         super(schema, flag, "AdvancementsFix", (s) -> {
Index: net/minecraft/util/datafix/fixes/RecipesRenameFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/RecipesRenameFix.java b/net/minecraft/util/datafix/fixes/RecipesRenameFix.java
--- a/net/minecraft/util/datafix/fixes/RecipesRenameFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/RecipesRenameFix.java	(date 1611660380253)
@@ -20,16 +20,15 @@
         this.renamer = function;
     }
 
+    // PistonMC - Fix decompile errors
     protected TypeRewriteRule makeRule() {
-        Type type = DSL.named(References.RECIPE.typeName(), NamespacedSchema.namespacedString());
+        Type<com.mojang.datafixers.util.Pair<String, String>> type = DSL.named(References.RECIPE.typeName(), NamespacedSchema.namespacedString());
 
         if (!Objects.equals(type, this.getInputSchema().getType(References.RECIPE))) {
             throw new IllegalStateException("Recipe type is not what was expected.");
         } else {
             return this.fixTypeEverywhere(this.name, type, (dynamicops) -> {
-                return (pair) -> {
-                    return pair.mapSecond(this.renamer);
-                };
+                return (pair) -> pair.mapSecond(this.renamer);
             });
         }
     }
Index: net/minecraft/world/level/levelgen/feature/Feature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/Feature.java b/net/minecraft/world/level/levelgen/feature/Feature.java
--- a/net/minecraft/world/level/levelgen/feature/Feature.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/Feature.java	(date 1611605183290)
@@ -93,8 +93,9 @@
     public static final Feature<DecoratedFeatureConfiguration> DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfiguration.CODEC));
     private final Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec;
 
+    // PistonMC - Fix decompile errors
     private static <C extends FeatureConfiguration, F extends Feature<C>> F register(String s, F f0) {
-        return (Feature) Registry.register(Registry.FEATURE, s, f0);
+        return Registry.register(Registry.FEATURE, s, f0);
     }
 
     public Feature(Codec<FC> codec) {
Index: net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
--- a/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java	(date 1611657623582)
@@ -18,34 +18,30 @@
         this.name = s;
     }
 
+    // PistonMC - Fix decompile errors
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType taggedchoicetype = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType taggedchoicetype1 = this.getOutputSchema().findChoiceType(References.ENTITY);
-        Type type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
+        TaggedChoiceType<String> taggedchoicetype = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedchoicetype1 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+        Type<com.mojang.datafixers.util.Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
 
         if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
-        } else {
-            return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedchoicetype, taggedchoicetype1, (dynamicops) -> {
-                return (pair) -> {
-                    return pair.mapFirst((s) -> {
-                        String s1 = this.rename(s);
-                        Type type1 = (Type) taggedchoicetype.types().get(s);
-                        Type type2 = (Type) taggedchoicetype1.types().get(s1);
+        }
+        return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedchoicetype, taggedchoicetype1, (dynamicops) -> {
+            return (pair) -> {
+                return pair.mapFirst((s) -> {
+                    String s1 = this.rename(s);
+                    Type<?> type1 = taggedchoicetype.types().get(s);
+                    Type<?> type2 = taggedchoicetype1.types().get(s1);
 
-                        if (!type2.equals(type1, true, true)) {
-                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type1));
-                        } else {
-                            return s1;
-                        }
-                    });
-                };
-            }), this.fixTypeEverywhere(this.name + " for entity name", type, (dynamicops) -> {
-                return (pair) -> {
-                    return pair.mapSecond(this::rename);
-                };
-            }));
-        }
+                    if (!type2.equals(type1, true, true)) {
+                        throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type1));
+                    } else {
+                        return s1;
+                    }
+                });
+            };
+        }), this.fixTypeEverywhere(this.name + " for entity name", type, (dynamicops) -> (pair) -> pair.mapSecond(this::rename)));
     }
 
     protected abstract String rename(String s);
Index: net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
--- a/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java	(date 1611657623556)
@@ -7,7 +7,8 @@
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
 
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+    // PistonMC - Fix decompile errors
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
     public EntityZombifiedPiglinRenameFix(Schema schema) {
         super("EntityZombifiedPiglinRenameFix", schema, true);
Index: net/minecraft/world/entity/ai/gossip/GossipContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/net/minecraft/world/entity/ai/gossip/GossipContainer.java
--- a/net/minecraft/world/entity/ai/gossip/GossipContainer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/gossip/GossipContainer.java	(date 1611634569429)
@@ -86,8 +86,9 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public void transferFrom(GossipContainer gossipcontainer, Random random, int i) {
-        Collection collection = gossipcontainer.selectGossipsForTransfer(random, i);
+        Collection<GossipEntry> collection = gossipcontainer.selectGossipsForTransfer(random, i);
 
         collection.forEach((gossipcontainer_gossipentry) -> {
             int j = gossipcontainer_gossipentry.value - gossipcontainer_gossipentry.type.decayPerTransfer;
Index: net/minecraft/world/entity/ai/sensing/GolemSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/GolemSensor.java b/net/minecraft/world/entity/ai/sensing/GolemSensor.java
--- a/net/minecraft/world/entity/ai/sensing/GolemSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/GolemSensor.java	(date 1611574661915)
@@ -29,13 +29,12 @@
         return ImmutableSet.of(MemoryModuleType.LIVING_ENTITIES);
     }
 
+    // PistonMC - Fix decompile errors
     public static void checkForNearbyGolem(LivingEntity livingentity) {
-        Optional optional = livingentity.getBrain().getMemory(MemoryModuleType.LIVING_ENTITIES);
+        Optional<List<LivingEntity>> optional = livingentity.getBrain().getMemory(MemoryModuleType.LIVING_ENTITIES);
 
         if (optional.isPresent()) {
-            boolean flag = ((List) optional.get()).stream().anyMatch((livingentity1) -> {
-                return livingentity1.getType().equals(EntityType.IRON_GOLEM);
-            });
+            boolean flag = optional.get().stream().anyMatch((livingentity1) -> livingentity1.getType().equals(EntityType.IRON_GOLEM));
 
             if (flag) {
                 golemDetected(livingentity);
Index: net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java b/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
--- a/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java	(date 1611604039580)
@@ -47,6 +47,7 @@
         return biome.getTemperature(blockpos) < 0.15F;
     }
 
+    // PistonMC - Fix decompile errors
     private static int findSuitableY(Random random, ChunkGenerator chunkgenerator, RuinedPortalPiece.VerticalPlacement ruinedportalpiece_verticalplacement, boolean flag, int i, int j, BoundingBox boundingbox) {
         int k;
 
@@ -74,10 +75,8 @@
             }
         }
 
-        ImmutableList immutablelist = ImmutableList.of(new BlockPos(boundingbox.x0, 0, boundingbox.z0), new BlockPos(boundingbox.x1, 0, boundingbox.z0), new BlockPos(boundingbox.x0, 0, boundingbox.z1), new BlockPos(boundingbox.x1, 0, boundingbox.z1));
-        List list = (List) immutablelist.stream().map((blockpos) -> {
-            return chunkgenerator.getBaseColumn(blockpos.getX(), blockpos.getZ());
-        }).collect(Collectors.toList());
+        ImmutableList<BlockPos> immutablelist = ImmutableList.of(new BlockPos(boundingbox.x0, 0, boundingbox.z0), new BlockPos(boundingbox.x1, 0, boundingbox.z0), new BlockPos(boundingbox.x0, 0, boundingbox.z1), new BlockPos(boundingbox.x1, 0, boundingbox.z1));
+        List<BlockGetter> list = immutablelist.stream().map((blockpos) -> chunkgenerator.getBaseColumn(blockpos.getX(), blockpos.getZ())).collect(Collectors.toList());
         Heightmap.Types heightmap_types = ruinedportalpiece_verticalplacement == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR ? Heightmap.Types.OCEAN_FLOOR_WG : Heightmap.Types.WORLD_SURFACE_WG;
         BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
 
@@ -87,10 +86,7 @@
             int j1 = 0;
 
             blockpos_mutableblockpos.set(0, i1, 0);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                BlockGetter blockgetter = (BlockGetter) iterator.next();
+            for(BlockGetter blockgetter : list) {
                 BlockState blockstate = blockgetter.getBlockState(blockpos_mutableblockpos);
 
                 if (blockstate != null && heightmap_types.isOpaque().test(blockstate)) {
Index: net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java b/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
--- a/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java	(date 1611574661877)
@@ -21,22 +21,17 @@
         return ImmutableSet.of(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM);
     }
 
+    // PistonMC - Fix decompile errors
     protected void doTick(ServerLevel serverlevel, Mob mob) {
-        Brain brain = mob.getBrain();
-        List list = serverlevel.getEntitiesOfClass(ItemEntity.class, mob.getBoundingBox().inflate(8.0D, 4.0D, 8.0D), (itementity) -> {
-            return true;
-        });
+        Brain<?> brain = mob.getBrain();
+        List<ItemEntity> list = serverlevel.getEntitiesOfClass(ItemEntity.class, mob.getBoundingBox().inflate(8.0D, 4.0D, 8.0D), (itementity) -> true);
 
-        mob.getClass();
+//        mob.getClass();
         list.sort(Comparator.comparingDouble(mob::distanceToSqr));
-        Stream stream = list.stream().filter((itementity) -> {
-            return mob.wantsToPickUp(itementity.getItem());
-        }).filter((itementity) -> {
-            return itementity.closerThan(mob, 9.0D);
-        });
+        Stream<ItemEntity> stream = list.stream().filter((itementity) -> mob.wantsToPickUp(itementity.getItem())).filter((itementity) -> itementity.closerThan(mob, 9.0D));
 
-        mob.getClass();
-        Optional optional = stream.filter(mob::canSee).findFirst();
+//        mob.getClass();
+        Optional<ItemEntity> optional = stream.filter(mob::canSee).findFirst();
 
         brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, optional);
     }
Index: net/minecraft/world/level/levelgen/feature/StructureFeature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/net/minecraft/world/level/levelgen/feature/StructureFeature.java
--- a/net/minecraft/world/level/levelgen/feature/StructureFeature.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/StructureFeature.java	(date 1611584892321)
@@ -71,13 +71,15 @@
     public static final StructureFeature<JigsawConfiguration> BASTION_REMNANT = register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
     public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES = ImmutableList.of(StructureFeature.PILLAGER_OUTPOST, StructureFeature.VILLAGE, StructureFeature.NETHER_FOSSIL);
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("pcp"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("runtime"), StructureFeature.JIGSAW_RENAME).build();
+    // PistonMC - Fix decompile errors
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("pcp"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), StructureFeature.JIGSAW_RENAME).put(new ResourceLocation("runtime"), StructureFeature.JIGSAW_RENAME).build();
     private final Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec;
 
+    // PistonMC - Fix decompile errors
     private static <F extends StructureFeature<?>> F register(String s, F f0, GenerationStep.Decoration generationstep_decoration) {
         StructureFeature.STRUCTURES_REGISTRY.put(s.toLowerCase(Locale.ROOT), f0);
         StructureFeature.STEP.put(f0, generationstep_decoration);
-        return (StructureFeature) Registry.register(Registry.STRUCTURE_FEATURE, s.toLowerCase(Locale.ROOT), f0);
+        return Registry.register(Registry.STRUCTURE_FEATURE, s.toLowerCase(Locale.ROOT), f0);
     }
 
     public StructureFeature(Codec<C> codec) {
Index: net/minecraft/world/entity/ai/sensing/VillagerBabiesSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/VillagerBabiesSensor.java b/net/minecraft/world/entity/ai/sensing/VillagerBabiesSensor.java
--- a/net/minecraft/world/entity/ai/sensing/VillagerBabiesSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/VillagerBabiesSensor.java	(date 1611574661882)
@@ -19,9 +19,10 @@
         return ImmutableSet.of(MemoryModuleType.VISIBLE_VILLAGER_BABIES);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void doTick(ServerLevel serverlevel, LivingEntity livingentity) {
-        livingentity.getBrain().setMemory(MemoryModuleType.VISIBLE_VILLAGER_BABIES, (Object) this.getNearestVillagerBabies(livingentity));
+        livingentity.getBrain().setMemory(MemoryModuleType.VISIBLE_VILLAGER_BABIES, this.getNearestVillagerBabies(livingentity));
     }
 
     private List<LivingEntity> getNearestVillagerBabies(LivingEntity livingentity) {
Index: net/minecraft/world/entity/ai/sensing/SensorType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/SensorType.java b/net/minecraft/world/entity/ai/sensing/SensorType.java
--- a/net/minecraft/world/entity/ai/sensing/SensorType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/SensorType.java	(date 1611572742677)
@@ -26,8 +26,9 @@
         this.factory = supplier;
     }
 
+    // PistonMC - Fix decompile errors
     public U create() {
-        return (Sensor) this.factory.get();
+        return this.factory.get();
     }
 
     private static <U extends Sensor<?>> SensorType<U> register(String s, Supplier<U> supplier) {
Index: net/minecraft/world/level/levelgen/feature/TreeFeature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/TreeFeature.java b/net/minecraft/world/level/levelgen/feature/TreeFeature.java
--- a/net/minecraft/world/level/levelgen/feature/TreeFeature.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/TreeFeature.java	(date 1611663355819)
@@ -88,18 +88,18 @@
         return isAirOrLeaves(levelsimulatedreader, blockpos) || isReplaceablePlant(levelsimulatedreader, blockpos) || isBlockWater(levelsimulatedreader, blockpos);
     }
 
+    // PistonMC - Fix decompile errors
     private boolean doPlace(LevelSimulatedRW levelsimulatedrw, Random random, BlockPos blockpos, Set<BlockPos> set, Set<BlockPos> set1, BoundingBox boundingbox, TreeConfiguration treeconfiguration) {
         int i = treeconfiguration.trunkPlacer.getTreeHeight(random);
         int j = treeconfiguration.foliagePlacer.foliageHeight(random, i, treeconfiguration);
         int k = i - j;
         int l = treeconfiguration.foliagePlacer.foliageRadius(random, k);
-        int i1;
         BlockPos blockpos1;
 
         if (!treeconfiguration.fromSapling) {
             int j1 = levelsimulatedrw.getHeightmapPos(Heightmap.Types.OCEAN_FLOOR, blockpos).getY();
 
-            i1 = levelsimulatedrw.getHeightmapPos(Heightmap.Types.WORLD_SURFACE, blockpos).getY();
+            int i1 = levelsimulatedrw.getHeightmapPos(Heightmap.Types.WORLD_SURFACE, blockpos).getY();
             if (i1 - j1 > treeconfiguration.maxWaterDepth) {
                 return false;
             }
@@ -125,15 +125,13 @@
             } else {
                 OptionalInt optionalint = treeconfiguration.minimumSize.minClippedHeight();
 
-                i1 = this.getMaxFreeTreeHeight(levelsimulatedrw, i, blockpos1, treeconfiguration);
+                int i1 = this.getMaxFreeTreeHeight(levelsimulatedrw, i, blockpos1, treeconfiguration);
                 if (i1 < i && (!optionalint.isPresent() || i1 < optionalint.getAsInt())) {
                     return false;
                 } else {
-                    List list = treeconfiguration.trunkPlacer.placeTrunk(levelsimulatedrw, random, i1, blockpos1, set, boundingbox, treeconfiguration);
+                    List<net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer.FoliageAttachment> list = treeconfiguration.trunkPlacer.placeTrunk(levelsimulatedrw, random, i1, blockpos1, set, boundingbox, treeconfiguration);
 
-                    list.forEach((foliageplacer_foliageattachment) -> {
-                        treeconfiguration.foliagePlacer.createFoliage(levelsimulatedrw, random, treeconfiguration, i1, foliageplacer_foliageattachment, j, l, set1, boundingbox);
-                    });
+                    list.forEach((foliageplacer_foliageattachment) -> treeconfiguration.foliagePlacer.createFoliage(levelsimulatedrw, random, treeconfiguration, i1, foliageplacer_foliageattachment, j, l, set1, boundingbox));
                     return true;
                 }
             }
Index: net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java b/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
--- a/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java	(date 1611574661908)
@@ -30,12 +30,13 @@
         return ImmutableSet.of(MemoryModuleType.NEAREST_BED);
     }
 
+    // PistonMC - Fix decompile errors
     protected void doTick(ServerLevel serverlevel, Mob mob) {
         if (mob.isBaby()) {
             this.triedCount = 0;
-            this.lastUpdate = serverlevel.getGameTime() + (long) serverlevel.getRandom().nextInt(20);
+            this.lastUpdate = serverlevel.getGameTime() + serverlevel.getRandom().nextInt(20);
             PoiManager poimanager = serverlevel.getPoiManager();
-            Predicate predicate = (blockpos) -> {
+            Predicate<BlockPos> predicate = (blockpos) -> {
                 long i = blockpos.asLong();
 
                 if (this.batchCache.containsKey(i)) {
@@ -47,20 +48,18 @@
                     return true;
                 }
             };
-            Stream stream = poimanager.findAll(PoiType.HOME.getPredicate(), predicate, mob.blockPosition(), 48, PoiManager.Occupancy.ANY);
+            Stream<BlockPos> stream = poimanager.findAll(PoiType.HOME.getPredicate(), predicate, mob.blockPosition(), 48, PoiManager.Occupancy.ANY);
             Path path = mob.getNavigation().createPath(stream, PoiType.HOME.getValidRange());
 
             if (path != null && path.canReach()) {
                 BlockPos blockpos = path.getTarget();
-                Optional optional = poimanager.getType(blockpos);
+                Optional<PoiType> optional = poimanager.getType(blockpos);
 
                 if (optional.isPresent()) {
-                    mob.getBrain().setMemory(MemoryModuleType.NEAREST_BED, (Object) blockpos);
+                    mob.getBrain().setMemory(MemoryModuleType.NEAREST_BED, blockpos);
                 }
             } else if (this.triedCount < 5) {
-                this.batchCache.long2LongEntrySet().removeIf((entry) -> {
-                    return entry.getLongValue() < this.lastUpdate;
-                });
+                this.batchCache.long2LongEntrySet().removeIf((entry) -> entry.getLongValue() < this.lastUpdate);
             }
 
         }
Index: net/minecraft/world/entity/ai/sensing/PlayerSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/PlayerSensor.java b/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
--- a/net/minecraft/world/entity/ai/sensing/PlayerSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/PlayerSensor.java	(date 1611574661898)
@@ -23,23 +23,20 @@
         return ImmutableSet.of(MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void doTick(ServerLevel serverlevel, LivingEntity livingentity) {
-        Stream stream = serverlevel.players().stream().filter(EntitySelector.NO_SPECTATORS).filter((serverplayer) -> {
-            return livingentity.closerThan(serverplayer, 16.0D);
-        });
+        Stream<net.minecraft.server.level.ServerPlayer> stream = serverlevel.players().stream().filter(EntitySelector.NO_SPECTATORS).filter((serverplayer) -> livingentity.closerThan(serverplayer, 16.0D));
 
-        livingentity.getClass();
-        List list = (List) stream.sorted(Comparator.comparingDouble(livingentity::distanceToSqr)).collect(Collectors.toList());
-        Brain brain = livingentity.getBrain();
+//        livingentity.getClass();
+        List<Player> list = stream.sorted(Comparator.comparingDouble(livingentity::distanceToSqr)).collect(Collectors.toList());
+        Brain<?> brain = livingentity.getBrain();
 
-        brain.setMemory(MemoryModuleType.NEAREST_PLAYERS, (Object) list);
-        List list1 = (List) list.stream().filter((player) -> {
-            return isEntityTargetable(livingentity, player);
-        }).collect(Collectors.toList());
+        brain.setMemory(MemoryModuleType.NEAREST_PLAYERS, list);
+        List<Player> list1 = list.stream().filter((player) -> isEntityTargetable(livingentity, player)).collect(Collectors.toList());
 
-        brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object) (list1.isEmpty() ? null : (Player) list1.get(0)));
-        Optional optional = list1.stream().filter(EntitySelector.ATTACK_ALLOWED).findFirst();
+        brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, list1.isEmpty() ? null : list1.get(0));
+        Optional<Player> optional = list1.stream().filter(EntitySelector.ATTACK_ALLOWED).findFirst();
 
         brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, optional);
     }
Index: net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
--- a/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java	(date 1611574661894)
@@ -14,7 +14,8 @@
 
 public class VillagerHostilesSensor extends Sensor<LivingEntity> {
 
-    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+    // PistonMC - Fix decompile errors
+    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
     public VillagerHostilesSensor() {}
 
Index: net/minecraft/world/entity/ai/sensing/HurtBySensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/HurtBySensor.java b/net/minecraft/world/entity/ai/sensing/HurtBySensor.java
--- a/net/minecraft/world/entity/ai/sensing/HurtBySensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/HurtBySensor.java	(date 1611574661912)
@@ -18,17 +18,18 @@
         return ImmutableSet.of(MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void doTick(ServerLevel serverlevel, LivingEntity livingentity) {
-        Brain brain = livingentity.getBrain();
+        Brain<?> brain = livingentity.getBrain();
         DamageSource damagesource = livingentity.getLastDamageSource();
 
         if (damagesource != null) {
-            brain.setMemory(MemoryModuleType.HURT_BY, (Object) livingentity.getLastDamageSource());
+            brain.setMemory(MemoryModuleType.HURT_BY, livingentity.getLastDamageSource());
             Entity entity = damagesource.getEntity();
 
             if (entity instanceof LivingEntity) {
-                brain.setMemory(MemoryModuleType.HURT_BY_ENTITY, (Object) ((LivingEntity) entity));
+                brain.setMemory(MemoryModuleType.HURT_BY_ENTITY, (LivingEntity) entity);
             }
         } else {
             brain.eraseMemory(MemoryModuleType.HURT_BY);
Index: net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java b/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java
--- a/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java	(date 1611574661929)
@@ -15,21 +15,18 @@
 
     public NearestLivingEntitySensor() {}
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void doTick(ServerLevel serverlevel, LivingEntity livingentity) {
         AABB aabb = livingentity.getBoundingBox().inflate(16.0D, 16.0D, 16.0D);
-        List list = serverlevel.getEntitiesOfClass(LivingEntity.class, aabb, (livingentity1) -> {
-            return livingentity1 != livingentity && livingentity1.isAlive();
-        });
+        List<LivingEntity> list = serverlevel.getEntitiesOfClass(LivingEntity.class, aabb, (livingentity1) -> livingentity1 != livingentity && livingentity1.isAlive());
 
-        livingentity.getClass();
+//        livingentity.getClass();
         list.sort(Comparator.comparingDouble(livingentity::distanceToSqr));
-        Brain brain = livingentity.getBrain();
+        Brain<?> brain = livingentity.getBrain();
 
-        brain.setMemory(MemoryModuleType.LIVING_ENTITIES, (Object) list);
-        brain.setMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES, list.stream().filter((livingentity1) -> {
-            return isEntityTargetable(livingentity, livingentity1);
-        }).collect(Collectors.toList()));
+        brain.setMemory(MemoryModuleType.LIVING_ENTITIES, list);
+        brain.setMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES, list.stream().filter((livingentity1) -> isEntityTargetable(livingentity, livingentity1)).collect(Collectors.toList()));
     }
 
     @Override
Index: net/minecraft/world/entity/ai/village/poi/PoiSection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/net/minecraft/world/entity/ai/village/poi/PoiSection.java
--- a/net/minecraft/world/entity/ai/village/poi/PoiSection.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/village/poi/PoiSection.java	(date 1611603678472)
@@ -31,20 +31,18 @@
     private final Runnable setDirty;
     private boolean isValid;
 
+    // PistonMC - Fix decompile errors
     public static Codec<PoiSection> codec(Runnable runnable) {
-        Codec codec = RecordCodecBuilder.create((instance) -> {
-            return instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poisection) -> {
-                return poisection.isValid;
-            }), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poisection) -> {
-                return ImmutableList.copyOf(poisection.records.values());
-            })).apply(instance, PoiSection::new);
+        Codec<PoiSection> codec = RecordCodecBuilder.create((instance) -> {
+            return instance.group(RecordCodecBuilder.point(runnable),
+                    Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poisection) -> poisection.isValid),
+                    PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poisection) -> ImmutableList.copyOf(poisection.records.values())))
+                    .apply(instance, PoiSection::new);
         });
         Logger logger = PoiSection.LOGGER;
 
-        logger.getClass();
-        return codec.orElseGet(Util.prefix("Failed to read POI section: ", logger::error), () -> {
-            return new PoiSection(runnable, false, ImmutableList.of());
-        });
+//        logger.getClass();
+        return codec.orElseGet(Util.prefix("Failed to read POI section: ", logger::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
     }
 
     public PoiSection(Runnable runnable) {
Index: net/minecraft/world/entity/ai/village/poi/PoiManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/net/minecraft/world/entity/ai/village/poi/PoiManager.java
--- a/net/minecraft/world/entity/ai/village/poi/PoiManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/village/poi/PoiManager.java	(date 1611603678422)
@@ -115,13 +115,12 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public Optional<BlockPos> getRandom(Predicate<PoiType> predicate, Predicate<BlockPos> predicate1, PoiManager.Occupancy poimanager_occupancy, BlockPos blockpos, int i, Random random) {
-        List list = (List) this.getInRange(predicate, blockpos, i, poimanager_occupancy).collect(Collectors.toList());
+        List<PoiRecord> list = this.getInRange(predicate, blockpos, i, poimanager_occupancy).collect(Collectors.toList());
 
         Collections.shuffle(list, random);
-        return list.stream().filter((poirecord) -> {
-            return predicate1.test(poirecord.getPos());
-        }).findFirst().map(PoiRecord::getPos);
+        return list.stream().filter((poirecord) -> predicate1.test(poirecord.getPos())).findFirst().map(PoiRecord::getPos);
     }
 
     public boolean release(BlockPos blockpos) {
@@ -145,12 +144,11 @@
         return this.distanceTracker.getLevel(sectionpos.asLong());
     }
 
+    // PistonMC - Fix decompile errors
     private boolean isVillageCenter(long i) {
-        Optional optional = this.get(i);
+        Optional<PoiSection> optional = this.get(i);
 
-        return optional == null ? false : (Boolean) optional.map((poisection) -> {
-            return poisection.getRecords(PoiType.ALL, PoiManager.Occupancy.IS_OCCUPIED).count() > 0L;
-        }).orElse(false);
+        return optional != null && optional.map((poisection) -> poisection.getRecords(PoiType.ALL, Occupancy.IS_OCCUPIED).count() > 0L).orElse(false);
     }
 
     @Override
@@ -207,18 +205,11 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public void ensureLoadedAndValid(LevelReader levelreader, BlockPos blockpos, int i) {
-        SectionPos.aroundChunk(new ChunkPos(blockpos), Math.floorDiv(i, 16)).map((sectionpos) -> {
-            return Pair.of(sectionpos, this.getOrLoad(sectionpos.asLong()));
-        }).filter((pair) -> {
-            return !(Boolean) ((Optional) pair.getSecond()).map(PoiSection::isValid).orElse(false);
-        }).map((pair) -> {
-            return ((SectionPos) pair.getFirst()).chunk();
-        }).filter((chunkpos) -> {
-            return this.loadedChunks.add(chunkpos.toLong());
-        }).forEach((chunkpos) -> {
-            levelreader.getChunk(chunkpos.x, chunkpos.z, ChunkStatus.EMPTY);
-        });
+        SectionPos.aroundChunk(new ChunkPos(blockpos), Math.floorDiv(i, 16)).map((sectionpos) -> Pair.of(sectionpos, this.getOrLoad(sectionpos.asLong())))
+                .filter((pair) -> !pair.getSecond().map(PoiSection::isValid).orElse(false)).map((pair) -> pair.getFirst().chunk())
+                .filter((chunkpos) -> this.loadedChunks.add(chunkpos.toLong())).forEach((chunkpos) -> levelreader.getChunk(chunkpos.x, chunkpos.z, ChunkStatus.EMPTY));
     }
 
     final class DistanceTracker extends SectionTracker {
Index: net/minecraft/util/datafix/schemas/V705.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/schemas/V705.java b/net/minecraft/util/datafix/schemas/V705.java
--- a/net/minecraft/util/datafix/schemas/V705.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/schemas/V705.java	(date 1611656677005)
@@ -14,9 +14,10 @@
 
 public class V705 extends NamespacedSchema {
 
+    // PistonMC - Fix decompile errors
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicops, T t0) {
-            return V99.addNames(new Dynamic(dynamicops, t0), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+            return V99.addNames(new Dynamic<>(dynamicops, t0), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
         }
     };
 
Index: net/minecraft/world/entity/animal/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Cat.java b/net/minecraft/world/entity/animal/Cat.java
--- a/net/minecraft/world/entity/animal/Cat.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Cat.java	(date 1611567572500)
@@ -626,10 +626,9 @@
 
         private final Cat cat;
 
+        // PistonMC - Fix decompile errors
         public CatAvoidEntityGoal(Cat cat, Class<T> oclass, float f, double d0, double d1) {
-            Predicate predicate = EntitySelector.NO_CREATIVE_OR_SPECTATOR;
-
-            super(cat, oclass, f, d0, d1, predicate::test);
+            super(cat, oclass, f, d0, d1, EntitySelector.NO_CREATIVE_OR_SPECTATOR::test);
             this.cat = cat;
         }
 
Index: net/minecraft/world/entity/animal/Bee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Bee.java b/net/minecraft/world/entity/animal/Bee.java
--- a/net/minecraft/world/entity/animal/Bee.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Bee.java	(date 1611567572519)
@@ -610,8 +610,9 @@
 
     class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
 
+        // PistonMC - Fix decompile errors
         private BeeEnterHiveGoal() {
-            super(null);
+//            super(null);
         }
 
         @Override
@@ -670,8 +671,9 @@
 
     class BeeGrowCropGoal extends Bee.BaseBeeGoal {
 
+        // PistonMC - Fix decompile errors
         private BeeGrowCropGoal() {
-            super(null);
+//            super(null);
         }
 
         @Override
@@ -734,8 +736,9 @@
 
     class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
 
+        // PistonMC - Fix decompile errors
         private BeeLocateHiveGoal() {
-            super(null);
+//            super(null);
         }
 
         @Override
@@ -772,18 +775,14 @@
             }
         }
 
+        // PistonMC - Fix decompile errors
         private List<BlockPos> findNearbyHivesWithSpace() {
             BlockPos blockpos = Bee.this.blockPosition();
             PoiManager poimanager = ((ServerLevel) Bee.this.level).getPoiManager();
-            Stream stream = poimanager.getInRange((poitype) -> {
-                return poitype == PoiType.BEEHIVE || poitype == PoiType.BEE_NEST;
-            }, blockpos, 20, PoiManager.Occupancy.ANY);
+            Stream<PoiRecord> stream = poimanager.getInRange((poitype) -> poitype == PoiType.BEEHIVE || poitype == PoiType.BEE_NEST, blockpos, 20, PoiManager.Occupancy.ANY);
 
-            return (List) stream.map(PoiRecord::getPos).filter((blockpos1) -> {
-                return Bee.this.doesHiveHaveSpace(blockpos1);
-            }).sorted(Comparator.comparingDouble((blockpos1) -> {
-                return blockpos1.distSqr(blockpos);
-            })).collect(Collectors.toList());
+            return stream.map(PoiRecord::getPos).filter(Bee.this::doesHiveHaveSpace)
+                    .sorted(Comparator.comparingDouble((blockpos1) -> blockpos1.distSqr(blockpos))).collect(Collectors.toList());
         }
     }
 
@@ -798,8 +797,9 @@
         private Vec3 hoverPos;
         private int pollinatingTicks = 0;
 
+        // PistonMC - Fix decompile errors
         BeePollinateGoal() {
-            super(null);
+//            super(null);
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
@@ -982,8 +982,9 @@
 
         private int travellingTicks;
 
+        // PistonMC - Fix decompile errors
         BeeGoToKnownFlowerGoal() {
-            super(null);
+//            super(null);
             this.travellingTicks = Bee.this.level.random.nextInt(10);
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
@@ -1040,8 +1041,9 @@
         private Path lastPath;
         private int ticksStuck;
 
+        // PistonMC - Fix decompile errors
         BeeGoToHiveGoal() {
-            super(null);
+//            super(null);
             this.travellingTicks = Bee.this.level.random.nextInt(10);
             this.blacklistedTargets = Lists.newArrayList();
             this.lastPath = null;
Index: net/minecraft/world/entity/ai/behavior/WeightedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/WeightedList.java b/net/minecraft/world/entity/ai/behavior/WeightedList.java
--- a/net/minecraft/world/entity/ai/behavior/WeightedList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/WeightedList.java	(date 1611605183252)
@@ -94,19 +94,17 @@
             return "" + this.weight + ":" + this.data;
         }
 
+        // PistonMC - Fix decompile errors
         public static <E> Codec<WeightedList.WeightedEntry<E>> codec(final Codec<E> codec) {
             return new Codec<WeightedList.WeightedEntry<E>>() {
                 public <T> DataResult<Pair<WeightedList.WeightedEntry<E>, T>> decode(DynamicOps<T> dynamicops, T t0) {
-                    Dynamic dynamic = new Dynamic(dynamicops, t0);
-                    OptionalDynamic optionaldynamic = dynamic.get("data");
-                    Codec codec1 = codec;
+                    Dynamic<T> dynamic = new Dynamic<>(dynamicops, t0);
+                    OptionalDynamic<T> optionaldynamic = dynamic.get("data");
+                    Codec<E> codec1 = codec;
 
-                    codec.getClass();
-                    return optionaldynamic.flatMap(codec1::parse).map((object) -> {
-                        return new WeightedList.WeightedEntry<>(object, dynamic.get("weight").asInt(1));
-                    }).map((weightedlist_weightedentry) -> {
-                        return Pair.of(weightedlist_weightedentry, dynamicops.empty());
-                    });
+//                    codec.getClass();
+                    return optionaldynamic.flatMap(codec1::parse).map((object) -> new WeightedEntry<>(object, dynamic.get("weight").asInt(1)))
+                            .map((weightedlist_weightedentry) -> Pair.of(weightedlist_weightedentry, dynamicops.empty()));
                 }
 
                 public <T> DataResult<T> encode(WeightedList.WeightedEntry<E> weightedlist_weightedentry, DynamicOps<T> dynamicops, T t0) {
Index: net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java b/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java
--- a/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java	(date 1611605183269)
@@ -13,9 +13,8 @@
 
     Codec<P> codec();
 
+    // PistonMC - Fix decompile errors
     static <P extends StructurePoolElement> StructurePoolElementType<P> register(String s, Codec<P> codec) {
-        return (StructurePoolElementType) Registry.register(Registry.STRUCTURE_POOL_ELEMENT, s, () -> {
-            return codec;
-        });
+        return Registry.register(Registry.STRUCTURE_POOL_ELEMENT, s, () -> codec);
     }
 }
Index: net/minecraft/world/entity/animal/Fox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Fox.java b/net/minecraft/world/entity/animal/Fox.java
--- a/net/minecraft/world/entity/animal/Fox.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Fox.java	(date 1611567572540)
@@ -1032,8 +1032,9 @@
         private int lookTime;
         private int looksRemaining;
 
+        // PistonMC - Fix decompile errors
         public PerchAndSearchGoal() {
-            super(null);
+//            super(null);
             this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
         }
 
@@ -1084,8 +1085,9 @@
 
         private int countdown;
 
+        // PistonMC - Fix decompile errors
         public SleepGoal() {
-            super(null);
+//            super(null);
             this.countdown = Fox.this.random.nextInt(140);
             this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK, Goal.Flag.JUMP));
         }
Index: net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
--- a/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java	(date 1611605183264)
@@ -31,16 +31,15 @@
 public class StructureTemplatePool {
 
     private static final Logger LOGGER = LogManager.getLogger();
+    // PistonMC - Fix decompile errors
     public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
-        RecordCodecBuilder recordcodecbuilder = ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName);
-        RecordCodecBuilder recordcodecbuilder1 = ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback);
-        Codec codec = Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf();
+        RecordCodecBuilder<StructureTemplatePool, ResourceLocation> recordcodecbuilder = ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName);
+        RecordCodecBuilder<StructureTemplatePool, ResourceLocation> recordcodecbuilder1 = ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback);
+        Codec<List<Pair<StructurePoolElement, Integer>>> codec = Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf();
         Logger logger = StructureTemplatePool.LOGGER;
 
-        logger.getClass();
-        return instance.group(recordcodecbuilder, recordcodecbuilder1, codec.promotePartial(Util.prefix("Pool element: ", logger::error)).fieldOf("elements").forGetter((structuretemplatepool) -> {
-            return structuretemplatepool.rawTemplates;
-        })).apply(instance, StructureTemplatePool::new);
+//        logger.getClass();
+        return instance.group(recordcodecbuilder, recordcodecbuilder1, codec.promotePartial(Util.prefix("Pool element: ", logger::error)).fieldOf("elements").forGetter((structuretemplatepool) -> structuretemplatepool.rawTemplates)).apply(instance, StructureTemplatePool::new);
     });
     public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
     private final ResourceLocation name;
@@ -67,19 +66,17 @@
         this.fallback = resourcelocation1;
     }
 
+    // PistonMC - Fix decompile errors
     public StructureTemplatePool(ResourceLocation resourcelocation, ResourceLocation resourcelocation1, List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>> list, StructureTemplatePool.Projection structuretemplatepool_projection) {
         this.name = resourcelocation;
         this.rawTemplates = Lists.newArrayList();
         this.templates = Lists.newArrayList();
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Pair pair = (Pair) iterator.next();
-            StructurePoolElement structurepoolelement = (StructurePoolElement) ((Function) pair.getFirst()).apply(structuretemplatepool_projection);
+        for(Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer> pair : list) {
+            StructurePoolElement structurepoolelement = pair.getFirst().apply(structuretemplatepool_projection);
 
             this.rawTemplates.add(Pair.of(structurepoolelement, pair.getSecond()));
 
-            for (int i = 0; i < (Integer) pair.getSecond(); ++i) {
+            for (int i = 0; i < pair.getSecond(); ++i) {
                 this.templates.add(structurepoolelement);
             }
         }
Index: net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java b/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
--- a/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java	(date 1611605183242)
@@ -41,8 +41,9 @@
     protected final Either<ResourceLocation, StructureTemplate> template;
     protected final Supplier<StructureProcessorList> processors;
 
+    // PistonMC - Fix decompile errors
     private static <T> DataResult<T> encodeTemplate(Either<ResourceLocation, StructureTemplate> either, DynamicOps<T> dynamicops, T t0) {
-        Optional optional = either.left();
+        Optional<ResourceLocation> optional = either.left();
 
         return !optional.isPresent() ? DataResult.error("Can not serialize a runtime pool element") : ResourceLocation.CODEC.encode(optional.get(), dynamicops, t0);
     }
Index: net/minecraft/world/entity/animal/Panda.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Panda.java b/net/minecraft/world/entity/animal/Panda.java
--- a/net/minecraft/world/entity/animal/Panda.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Panda.java	(date 1611568097204)
@@ -823,10 +823,9 @@
 
         private final Panda panda;
 
+        // PistonMC - Fix decompile errors
         public PandaAvoidGoal(Panda panda, Class<T> oclass, float f, double d0, double d1) {
-            Predicate predicate = EntitySelector.NO_SPECTATORS;
-
-            super(panda, oclass, f, d0, d1, predicate::test);
+            super(panda, oclass, f, d0, d1, EntitySelector.NO_SPECTATORS::test);
             this.panda = panda;
         }
 
Index: net/minecraft/world/entity/animal/Ocelot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Ocelot.java b/net/minecraft/world/entity/animal/Ocelot.java
--- a/net/minecraft/world/entity/animal/Ocelot.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Ocelot.java	(date 1611567953523)
@@ -288,10 +288,9 @@
 
         private final Ocelot ocelot;
 
+        // PistonMC - Fix decompile errors
         public OcelotAvoidEntityGoal(Ocelot ocelot, Class<T> oclass, float f, double d0, double d1) {
-            Predicate predicate = EntitySelector.NO_CREATIVE_OR_SPECTATOR;
-
-            super(ocelot, oclass, f, d0, d1, predicate::test);
+            super(ocelot, oclass, f, d0, d1, EntitySelector.NO_CREATIVE_OR_SPECTATOR::test);
             this.ocelot = ocelot;
         }
 
Index: net/minecraft/world/level/levelgen/structure/StructurePiece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/net/minecraft/world/level/levelgen/structure/StructurePiece.java
--- a/net/minecraft/world/level/levelgen/structure/StructurePiece.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/StructurePiece.java	(date 1611604039610)
@@ -42,7 +42,8 @@
     private Rotation rotation;
     protected int genDepth;
     private final StructurePieceType type;
-    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+    // PistonMC - Fix decompile errors
+    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
     protected StructurePiece(StructurePieceType structurepiecetype, int i) {
         this.type = structurepiecetype;
Index: net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java b/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
--- a/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java	(date 1611653827804)
@@ -39,17 +39,16 @@
         return this.selfFilter.test(livingentity) && this.getVisibleEntities(livingentity).stream().anyMatch(this::isMatchingTarget);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void start(ServerLevel serverlevel, LivingEntity livingentity, long i) {
         super.start(serverlevel, livingentity, i);
-        Brain brain = livingentity.getBrain();
+        Brain<?> brain = livingentity.getBrain();
 
         brain.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).ifPresent((list) -> {
-            list.stream().filter((livingentity1) -> {
-                return livingentity1.distanceToSqr((Entity) livingentity) <= (double) this.interactionRangeSqr;
-            }).filter(this::isMatchingTarget).findFirst().ifPresent((livingentity1) -> {
-                brain.setMemory(MemoryModuleType.INTERACTION_TARGET, (Object) livingentity1);
-                brain.setMemory(MemoryModuleType.LOOK_TARGET, (Object) (new EntityTracker(livingentity1, true)));
+            list.stream().filter((livingentity1) -> livingentity1.distanceToSqr(livingentity) <= (double) this.interactionRangeSqr).filter(this::isMatchingTarget).findFirst().ifPresent((livingentity1) -> {
+                brain.setMemory(MemoryModuleType.INTERACTION_TARGET, livingentity1);
+                brain.setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(livingentity1, true));
             });
         });
     }
Index: net/minecraft/world/entity/animal/Sheep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/Sheep.java b/net/minecraft/world/entity/animal/Sheep.java
--- a/net/minecraft/world/entity/animal/Sheep.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/Sheep.java	(date 1611568351176)
@@ -314,20 +314,18 @@
         return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
     }
 
+    // PistonMC - Fix decompile errors
     private DyeColor getOffspringColor(Animal animal, Animal animal1) {
         DyeColor dyecolor = ((Sheep) animal).getColor();
         DyeColor dyecolor1 = ((Sheep) animal1).getColor();
         CraftingContainer craftingcontainer = makeContainer(dyecolor, dyecolor1);
-        Optional optional = this.level.getRecipeManager().getRecipeFor(RecipeType.CRAFTING, craftingcontainer, this.level).map((craftingrecipe) -> {
-            return craftingrecipe.assemble(craftingcontainer);
-        }).map(ItemStack::getItem);
+        Optional<net.minecraft.world.item.Item> optional = this.level.getRecipeManager().getRecipeFor(RecipeType.CRAFTING, craftingcontainer, this.level)
+                .map((craftingrecipe) -> craftingrecipe.assemble(craftingcontainer)).map(ItemStack::getItem);
 
-        DyeItem.class.getClass();
+//        DyeItem.class.getClass();
         optional = optional.filter(DyeItem.class::isInstance);
-        DyeItem.class.getClass();
-        return (DyeColor) optional.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> {
-            return this.level.random.nextBoolean() ? dyecolor : dyecolor1;
-        });
+//        DyeItem.class.getClass();
+        return optional.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> this.level.random.nextBoolean() ? dyecolor : dyecolor1);
     }
 
     private static CraftingContainer makeContainer(DyeColor dyecolor, DyeColor dyecolor1) {
Index: net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java	(date 1611585862600)
@@ -133,19 +133,16 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list1, List<StructureTemplate.StructureBlockInfo> list2) {
-        Comparator comparator = Comparator.comparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getY();
-        }).thenComparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getX();
-        }).thenComparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getZ();
-        });
+        Comparator<StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structuretemplate_structureblockinfo) -> structuretemplate_structureblockinfo.pos.getY())
+                .thenComparingInt((structuretemplate_structureblockinfo) -> structuretemplate_structureblockinfo.pos.getX())
+                .thenComparingInt((structuretemplate_structureblockinfo) -> structuretemplate_structureblockinfo.pos.getZ());
 
         list.sort(comparator);
         list2.sort(comparator);
         list1.sort(comparator);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<StructureBlockInfo> arraylist = Lists.newArrayList();
 
         arraylist.addAll(list);
         arraylist.addAll(list2);
Index: net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java b/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
--- a/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java	(date 1611662945844)
@@ -31,13 +31,12 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     protected void start(ServerLevel serverlevel, Villager villager, long i) {
-        Brain brain = villager.getBrain();
+        Brain<Villager> brain = villager.getBrain();
 
-        brain.setMemory(MemoryModuleType.LAST_WORKED_AT_POI, (Object) i);
-        brain.getMemory(MemoryModuleType.JOB_SITE).ifPresent((globalpos) -> {
-            brain.setMemory(MemoryModuleType.LOOK_TARGET, (Object) (new BlockPosTracker(globalpos.pos())));
-        });
+        brain.setMemory(MemoryModuleType.LAST_WORKED_AT_POI, i);
+        brain.getMemory(MemoryModuleType.JOB_SITE).ifPresent((globalpos) -> brain.setMemory(MemoryModuleType.LOOK_TARGET, new BlockPosTracker(globalpos.pos())));
         villager.playWorkSound();
         this.useWorkstation(serverlevel, villager);
         if (villager.shouldRestock()) {
Index: net/minecraft/world/entity/animal/horse/Horse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/animal/horse/Horse.java b/net/minecraft/world/entity/animal/horse/Horse.java
--- a/net/minecraft/world/entity/animal/horse/Horse.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/animal/horse/Horse.java	(date 1611567678445)
@@ -95,8 +95,9 @@
         return (Integer) this.entityData.get(Horse.DATA_ID_TYPE_VARIANT);
     }
 
+    // PistonMC - Fix decompile errors
     private void setVariantAndMarkings(Variant variant, Markings markings) {
-        this.setTypeVariant(variant1.getId() & 255 | markings.getId() << 8 & '\uff00');
+        this.setTypeVariant(variant.getId() & 255 | markings.getId() << 8 & '\uff00');
     }
 
     public Variant getVariant() {
@@ -235,25 +236,26 @@
         return animal == this ? false : (!(animal instanceof Donkey) && !(animal instanceof Horse) ? false : this.canParent() && ((AbstractHorse) animal).canParent());
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public AgableMob getBreedOffspring(ServerLevel serverlevel, AgableMob agablemob) {
         AbstractHorse abstracthorse;
 
         if (agablemob instanceof Donkey) {
-            abstracthorse = (AbstractHorse) EntityType.MULE.create(serverlevel);
+            abstracthorse = EntityType.MULE.create(serverlevel);
         } else {
             Horse horse = (Horse) agablemob;
 
-            abstracthorse = (AbstractHorse) EntityType.HORSE.create(serverlevel);
+            abstracthorse = EntityType.HORSE.create(serverlevel);
             int i = this.random.nextInt(9);
             Variant variant;
 
             if (i < 4) {
-                variant1 = this.getVariant();
+                variant = this.getVariant();
             } else if (i < 8) {
-                variant2 = horse.getVariant();
+                variant = horse.getVariant();
             } else {
-                variant3 = (Variant) Util.getRandom((Object[]) Variant.values(), this.random);
+                variant = Util.getRandom(Variant.values(), this.random);
             }
 
             int j = this.random.nextInt(5);
@@ -264,10 +266,10 @@
             } else if (j < 4) {
                 markings = horse.getMarkings();
             } else {
-                markings = (Markings) Util.getRandom((Object[]) Markings.values(), this.random);
+                markings = Util.getRandom(Markings.values(), this.random);
             }
 
-            ((Horse) abstracthorse).setVariantAndMarkings(variant4, markings);
+            ((Horse) abstracthorse).setVariantAndMarkings(variant, markings);
         }
 
         this.setOffspringAttributes(agablemob, abstracthorse);
@@ -284,29 +286,31 @@
         return itemstack.getItem() instanceof HorseArmorItem;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
         Variant variant;
 
         if (spawngroupdata instanceof Horse.HorseGroupData) {
-            variant1 = ((Horse.HorseGroupData) spawngroupdata).variant;
+            variant = ((Horse.HorseGroupData) spawngroupdata).variant;
         } else {
-            variant2 = (Variant) Util.getRandom((Object[]) Variant.values(), this.random);
-            spawngroupdata = new Horse.HorseGroupData(variant3);
+            variant = Util.getRandom(Variant.values(), this.random);
+            spawngroupdata = new Horse.HorseGroupData(variant);
         }
 
-        this.setVariantAndMarkings(variant4, (Markings) Util.getRandom((Object[]) Markings.values(), this.random));
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        this.setVariantAndMarkings(variant, Util.getRandom(Markings.values(), this.random));
+        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
     }
 
     public static class HorseGroupData extends AgableMob.AgableMobGroupData {
 
         public final Variant variant;
 
+        // PistonMC - Fix decompile errors
         public HorseGroupData(Variant variant) {
             super(true);
-            this.variant = variant1;
+            this.variant = variant;
         }
     }
 }
Index: net/minecraft/util/datafix/schemas/V1466.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/datafix/schemas/V1466.java b/net/minecraft/util/datafix/schemas/V1466.java
--- a/net/minecraft/util/datafix/schemas/V1466.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/datafix/schemas/V1466.java	(date 1611663355798)
@@ -23,8 +23,9 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public Map<String, Supplier<TypeTemplate>> registerBlockEntities(Schema schema) {
-        Map map = super.registerBlockEntities(schema);
+        Map<String, Supplier<TypeTemplate>> map = super.registerBlockEntities(schema);
 
         map.put("DUMMY", DSL::remainder);
         return map;
Index: net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java b/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
--- a/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java	(date 1611604039622)
@@ -7,17 +7,13 @@
 
 public class StructureFeatureConfiguration {
 
-    public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structurefeatureconfiguration) -> {
-            return structurefeatureconfiguration.spacing;
-        }), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structurefeatureconfiguration) -> {
-            return structurefeatureconfiguration.separation;
-        }), Codec.intRange(0, Integer.MAX_VALUE).fieldOf("salt").forGetter((structurefeatureconfiguration) -> {
-            return structurefeatureconfiguration.salt;
-        })).apply(instance, StructureFeatureConfiguration::new);
-    }).comapFlatMap((structurefeatureconfiguration) -> {
-        return structurefeatureconfiguration.spacing <= structurefeatureconfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structurefeatureconfiguration);
-    }, Function.identity());
+    // PistonMC - Fix decompile errors
+    public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.<StructureFeatureConfiguration>create((instance) -> {
+        return instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structurefeatureconfiguration) -> structurefeatureconfiguration.spacing),
+                Codec.intRange(0, 4096).fieldOf("separation").forGetter((structurefeatureconfiguration) -> structurefeatureconfiguration.separation),
+                Codec.intRange(0, Integer.MAX_VALUE).fieldOf("salt").forGetter((structurefeatureconfiguration) -> structurefeatureconfiguration.salt))
+                .apply(instance, StructureFeatureConfiguration::new);
+    }).comapFlatMap((structurefeatureconfiguration) -> structurefeatureconfiguration.spacing <= structurefeatureconfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structurefeatureconfiguration), Function.identity());
     private final int spacing;
     private final int separation;
     private final int salt;
Index: net/minecraft/world/level/material/Fluid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/material/Fluid.java b/net/minecraft/world/level/material/Fluid.java
--- a/net/minecraft/world/level/material/Fluid.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/material/Fluid.java	(date 1611567572528)
@@ -20,12 +20,13 @@
     protected final StateDefinition<Fluid, FluidState> stateDefinition;
     private FluidState defaultFluidState;
 
+    // PistonMC - Fix decompile errors
     protected Fluid() {
-        StateDefinition.Builder statedefinition_builder = new StateDefinition.Builder<>(this);
+        StateDefinition.Builder<Fluid, FluidState> statedefinition_builder = new StateDefinition.Builder<>(this);
 
         this.createFluidStateDefinition(statedefinition_builder);
         this.stateDefinition = statedefinition_builder.create(Fluid::defaultFluidState, FluidState::new);
-        this.registerDefaultState((FluidState) this.stateDefinition.any());
+        this.registerDefaultState(this.stateDefinition.any());
     }
 
     protected void createFluidStateDefinition(StateDefinition.Builder<Fluid, FluidState> statedefinition_builder) {}
Index: net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java b/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
--- a/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java	(date 1611605183275)
@@ -28,10 +28,11 @@
         this(flag, list, Optional.ofNullable(blockpos));
     }
 
+    // PistonMC - Fix decompile errors
     private SpikeConfiguration(boolean flag, List<SpikeFeature.EndSpike> list, Optional<BlockPos> optional) {
         this.crystalInvulnerable = flag;
         this.spikes = list;
-        this.crystalBeamTarget = (BlockPos) optional.orElse((Object) null);
+        this.crystalBeamTarget = optional.orElse(null);
     }
 
     public boolean isCrystalInvulnerable() {
Index: net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java b/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
--- a/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java	(date 1611649162127)
@@ -26,21 +26,14 @@
         return !serverlevel.canSeeSky(pathfindermob.blockPosition());
     }
 
+    // PistonMC - Fix decompile errors
     protected void start(ServerLevel serverlevel, PathfinderMob pathfindermob, long i) {
         BlockPos blockpos = pathfindermob.blockPosition();
-        List list = (List) BlockPos.betweenClosedStream(blockpos.offset(-1, -1, -1), blockpos.offset(1, 1, 1)).map(BlockPos::immutable).collect(Collectors.toList());
+        List<BlockPos> list = BlockPos.betweenClosedStream(blockpos.offset(-1, -1, -1), blockpos.offset(1, 1, 1)).map(BlockPos::immutable).collect(Collectors.toList());
 
         Collections.shuffle(list);
-        Optional optional = list.stream().filter((blockpos1) -> {
-            return !serverlevel.canSeeSky(blockpos1);
-        }).filter((blockpos1) -> {
-            return serverlevel.loadedAndEntityCanStandOn(blockpos1, pathfindermob);
-        }).filter((blockpos1) -> {
-            return serverlevel.noCollision((Entity) pathfindermob);
-        }).findFirst();
+        Optional<BlockPos> optional = list.stream().filter((blockpos1) -> !serverlevel.canSeeSky(blockpos1)).filter((blockpos1) -> serverlevel.loadedAndEntityCanStandOn(blockpos1, pathfindermob)).filter((blockpos1) -> serverlevel.noCollision(pathfindermob)).findFirst();
 
-        optional.ifPresent((blockpos1) -> {
-            pathfindermob.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(blockpos1, this.speedModifier, 0)));
-        });
+        optional.ifPresent((blockpos1) -> pathfindermob.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(blockpos1, this.speedModifier, 0)));
     }
 }
Index: net/minecraft/util/profiling/SingleTickProfiler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/profiling/SingleTickProfiler.java b/net/minecraft/util/profiling/SingleTickProfiler.java
--- a/net/minecraft/util/profiling/SingleTickProfiler.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/profiling/SingleTickProfiler.java	(date 1611648888654)
@@ -17,6 +17,13 @@
     private final File location;
     private ProfileCollector profiler;
 
+    // PistonMC - Fix decompile errors - Add missing constructor
+    public SingleTickProfiler(LongSupplier longsupplier, String s, long i) {
+        this.realTime = longsupplier;
+        this.saveThreshold = i;
+        this.location = new File(s);
+    }
+
     public ProfilerFiller startTick() {
         this.profiler = new ActiveProfiler(this.realTime, () -> {
             return this.tick;
Index: net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java b/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java
--- a/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java	(date 1611657623561)
@@ -22,14 +22,13 @@
         this.speedModifier = f;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void start(ServerLevel serverlevel, LivingEntity livingentity, long i) {
-        Optional optional = Optional.ofNullable(this.getOutdoorPosition(serverlevel, livingentity));
+        Optional<Vec3> optional = Optional.ofNullable(this.getOutdoorPosition(serverlevel, livingentity));
 
         if (optional.isPresent()) {
-            livingentity.getBrain().setMemory(MemoryModuleType.WALK_TARGET, optional.map((vec3) -> {
-                return new WalkTarget(vec3, this.speedModifier, 0);
-            }));
+            livingentity.getBrain().setMemory(MemoryModuleType.WALK_TARGET, optional.map((vec3) -> new WalkTarget(vec3, this.speedModifier, 0)));
         }
 
     }
Index: net/minecraft/world/level/portal/PortalForcer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/portal/PortalForcer.java b/net/minecraft/world/level/portal/PortalForcer.java
--- a/net/minecraft/world/level/portal/PortalForcer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/portal/PortalForcer.java	(date 1611648128153)
@@ -27,20 +27,13 @@
         this.level = serverlevel;
     }
 
+    // PistonMC - Fix decompile errors
     public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos blockpos, boolean flag) {
         PoiManager poimanager = this.level.getPoiManager();
         int i = flag ? 16 : 128;
 
         poimanager.ensureLoadedAndValid(this.level, blockpos, i);
-        Optional optional = poimanager.getInSquare((poitype) -> {
-            return poitype == PoiType.NETHER_PORTAL;
-        }, blockpos, i, PoiManager.Occupancy.ANY).sorted(Comparator.comparingDouble((poirecord) -> {
-            return poirecord.getPos().distSqr(blockpos);
-        }).thenComparingInt((poirecord) -> {
-            return poirecord.getPos().getY();
-        })).filter((poirecord) -> {
-            return this.level.getBlockState(poirecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS);
-        }).findFirst();
+        Optional<net.minecraft.world.entity.ai.village.poi.PoiRecord> optional = poimanager.getInSquare((poitype) -> poitype == PoiType.NETHER_PORTAL, blockpos, i, PoiManager.Occupancy.ANY).sorted(Comparator.<net.minecraft.world.entity.ai.village.poi.PoiRecord>comparingDouble((poirecord) -> poirecord.getPos().distSqr(blockpos)).thenComparingInt((poirecord) -> poirecord.getPos().getY())).filter((poirecord) -> this.level.getBlockState(poirecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
 
         return optional.map((poirecord) -> {
             BlockPos blockpos1 = poirecord.getPos();
@@ -48,9 +41,7 @@
             this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockpos1), 3, blockpos1);
             BlockState blockstate = this.level.getBlockState(blockpos1);
 
-            return BlockUtil.getLargestRectangleAround(blockpos1, (Direction.Axis) blockstate.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockpos2) -> {
-                return this.level.getBlockState(blockpos2) == blockstate;
-            });
+            return BlockUtil.getLargestRectangleAround(blockpos1, blockstate.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockpos2) -> this.level.getBlockState(blockpos2) == blockstate);
         });
     }
 
Index: net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
--- a/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java	(date 1611605183280)
@@ -11,18 +11,14 @@
 
 public class SpringConfiguration implements FeatureConfiguration {
 
+    // PistonMC - Fix decompile errors
     public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(FluidState.CODEC.fieldOf("state").forGetter((springconfiguration) -> {
-            return springconfiguration.state;
-        }), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springconfiguration) -> {
-            return springconfiguration.requiresBlockBelow;
-        }), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springconfiguration) -> {
-            return springconfiguration.rockCount;
-        }), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springconfiguration) -> {
-            return springconfiguration.holeCount;
-        }), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springconfiguration) -> {
-            return springconfiguration.validBlocks;
-        })).apply(instance, SpringConfiguration::new);
+        return instance.group(FluidState.CODEC.fieldOf("state").forGetter((springconfiguration) -> springconfiguration.state),
+                Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springconfiguration) -> springconfiguration.requiresBlockBelow),
+                Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springconfiguration) -> springconfiguration.rockCount),
+                Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springconfiguration) -> springconfiguration.holeCount),
+                Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springconfiguration) -> (ImmutableSet<Block>) springconfiguration.validBlocks))
+                .apply(instance, SpringConfiguration::new);
     });
     public final FluidState state;
     public final boolean requiresBlockBelow;
Index: net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
--- a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java	(date 1611575329299)
@@ -69,15 +69,14 @@
         this.z = l * j + j / 2 - 64;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void load(CompoundTag compoundtag) {
-        DataResult dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, compoundtag.get("dimension")));
+        DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("dimension")));
         Logger logger = MapItemSavedData.LOGGER;
 
-        logger.getClass();
-        this.dimension = (ResourceKey) dataresult.resultOrPartial(logger::error).orElseThrow(() -> {
-            return new IllegalArgumentException("Invalid map dimension: " + compoundtag.get("dimension"));
-        });
+//        logger.getClass();
+        this.dimension = dataresult.resultOrPartial(logger::error).orElseThrow(() -> new IllegalArgumentException("Invalid map dimension: " + compoundtag.get("dimension")));
         this.x = compoundtag.getInt("xCenter");
         this.z = compoundtag.getInt("zCenter");
         this.scale = (byte) Mth.clamp(compoundtag.getByte("scale"), 0, 4);
@@ -95,7 +94,7 @@
             MapBanner mapbanner = MapBanner.load(listtag.getCompound(i));
 
             this.bannerMarkers.put(mapbanner.getId(), mapbanner);
-            this.addDecoration(mapbanner.getDecoration(), (LevelAccessor) null, mapbanner.getId(), (double) mapbanner.getPos().getX(), (double) mapbanner.getPos().getZ(), 180.0D, mapbanner.getName());
+            this.addDecoration(mapbanner.getDecoration(), null, mapbanner.getId(), mapbanner.getPos().getX(), mapbanner.getPos().getZ(), 180.0D, mapbanner.getName());
         }
 
         ListTag listtag1 = compoundtag.getList("frames", 10);
@@ -104,20 +103,19 @@
             MapFrame mapframe = MapFrame.load(listtag1.getCompound(j));
 
             this.frameMarkers.put(mapframe.getId(), mapframe);
-            this.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor) null, "frame-" + mapframe.getEntityId(), (double) mapframe.getPos().getX(), (double) mapframe.getPos().getZ(), (double) mapframe.getRotation(), (Component) null);
+            this.addDecoration(MapDecoration.Type.FRAME, null, "frame-" + mapframe.getEntityId(), mapframe.getPos().getX(), mapframe.getPos().getZ(), mapframe.getRotation(), null);
         }
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public CompoundTag save(CompoundTag compoundtag) {
-        DataResult dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location());
+        DataResult<net.minecraft.nbt.Tag> dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location());
         Logger logger = MapItemSavedData.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("dimension", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("dimension", tag));
         compoundtag.putInt("xCenter", this.x);
         compoundtag.putInt("zCenter", this.z);
         compoundtag.putByte("scale", this.scale);
@@ -126,21 +124,13 @@
         compoundtag.putBoolean("unlimitedTracking", this.unlimitedTracking);
         compoundtag.putBoolean("locked", this.locked);
         ListTag listtag = new ListTag();
-        Iterator iterator = this.bannerMarkers.values().iterator();
-
-        while (iterator.hasNext()) {
-            MapBanner mapbanner = (MapBanner) iterator.next();
-
+        for(MapBanner mapbanner : this.bannerMarkers.values()) {
             listtag.add(mapbanner.save());
         }
 
         compoundtag.put("banners", listtag);
         ListTag listtag1 = new ListTag();
-        Iterator iterator1 = this.frameMarkers.values().iterator();
-
-        while (iterator1.hasNext()) {
-            MapFrame mapframe = (MapFrame) iterator1.next();
-
+        for(MapFrame mapframe : this.frameMarkers.values()) {
             listtag1.add(mapframe.save());
         }
 
Index: net/minecraft/world/level/storage/DimensionDataStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/DimensionDataStorage.java b/net/minecraft/world/level/storage/DimensionDataStorage.java
--- a/net/minecraft/world/level/storage/DimensionDataStorage.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/DimensionDataStorage.java	(date 1611603678579)
@@ -37,22 +37,24 @@
         return new File(this.dataFolder, s + ".dat");
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends SavedData> T computeIfAbsent(Supplier<T> supplier, String s) {
-        SavedData saveddata = this.get(supplier, s);
+        T saveddata = this.get(supplier, s);
 
         if (saveddata != null) {
             return saveddata;
         } else {
-            SavedData saveddata1 = (SavedData) supplier.get();
+            T saveddata1 = supplier.get();
 
             this.set(saveddata1);
             return saveddata1;
         }
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public <T extends SavedData> T get(Supplier<T> supplier, String s) {
-        SavedData saveddata = (SavedData) this.cache.get(s);
+        T saveddata = (T) this.cache.get(s);
 
         if (saveddata == null && !this.cache.containsKey(s)) {
             saveddata = this.readSavedData(supplier, s);
@@ -62,13 +64,14 @@
         return saveddata;
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     private <T extends SavedData> T readSavedData(Supplier<T> supplier, String s) {
         try {
             File file = this.getDataFile(s);
 
             if (file.exists()) {
-                SavedData saveddata = (SavedData) supplier.get();
+                T saveddata = supplier.get();
                 CompoundTag compoundtag = this.readTagFromDisk(s, SharedConstants.getCurrentVersion().getWorldVersion());
 
                 saveddata.load(compoundtag.getCompound("data"));
Index: net/minecraft/world/level/storage/PrimaryLevelData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/PrimaryLevelData.java b/net/minecraft/world/level/storage/PrimaryLevelData.java
--- a/net/minecraft/world/level/storage/PrimaryLevelData.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/PrimaryLevelData.java	(date 1611589198760)
@@ -112,15 +112,20 @@
         this((DataFixer) null, SharedConstants.getCurrentVersion().getWorldVersion(), (CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, new CompoundTag(), levelsettings.copy(), worldgensettings, lifecycle);
     }
 
+    // PistonMC - Fix decompile errors
     public static PrimaryLevelData parse(Dynamic<Tag> dynamic, DataFixer datafixer, int i, @Nullable CompoundTag compoundtag, LevelSettings levelsettings, LevelVersion levelversion, WorldGenSettings worldgensettings, Lifecycle lifecycle) {
         long j = dynamic.get("Time").asLong(0L);
-        CompoundTag compoundtag1 = (CompoundTag) dynamic.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> {
-            return (Tag) dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
-        });
+        CompoundTag compoundtag1 = (CompoundTag) dynamic.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue());
 
-        return new PrimaryLevelData(datafixer, i, compoundtag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), j, dynamic.get("DayTime").asLong(j), levelversion.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID) dynamic.get("WanderingTraderId").read(SerializableUUID.CODEC).result().orElse((Object) null), (LinkedHashSet) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
-            return Util.toStream(dynamic1.asString().result());
-        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundtag1, levelsettings, worldgensettings, lifecycle);
+        return new PrimaryLevelData(datafixer, i, compoundtag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0),
+                dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), j,
+                dynamic.get("DayTime").asLong(j), levelversion.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0),
+                dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false),
+                dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS),
+                dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), dynamic.get("WanderingTraderId").read(SerializableUUID.CODEC).result().orElse(null),
+                dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> Util.toStream(dynamic1.asString().result())).collect(Collectors.toCollection(Sets::newLinkedHashSet)),
+                new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(),
+                compoundtag1, levelsettings, worldgensettings, lifecycle);
     }
 
     @Override
@@ -136,6 +141,7 @@
         return compoundtag1;
     }
 
+    // PistonMC - Fix decompile errors
     private void setTagData(RegistryAccess registryaccess, CompoundTag compoundtag, @Nullable CompoundTag compoundtag1) {
         ListTag listtag = new ListTag();
 
@@ -149,14 +155,12 @@
         compoundtag2.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
         compoundtag.put("Version", compoundtag2);
         compoundtag.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
-        RegistryWriteOps registrywriteops = RegistryWriteOps.create(NbtOps.INSTANCE, registryaccess);
-        DataResult dataresult = WorldGenSettings.CODEC.encodeStart(registrywriteops, this.worldGenSettings);
+        RegistryWriteOps<Tag> registrywriteops = RegistryWriteOps.create(NbtOps.INSTANCE, registryaccess);
+        DataResult<Tag> dataresult = WorldGenSettings.CODEC.encodeStart(registrywriteops, this.worldGenSettings);
         Logger logger = PrimaryLevelData.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).ifPresent((tag) -> {
-            compoundtag.put("WorldGenSettings", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).ifPresent((tag) -> compoundtag.put("WorldGenSettings", tag));
         compoundtag.putInt("GameType", this.settings.gameType().getId());
         compoundtag.putInt("SpawnX", this.xSpawn);
         compoundtag.putInt("SpawnY", this.ySpawn);
Index: net/minecraft/world/entity/monster/Slime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/Slime.java b/net/minecraft/world/entity/monster/Slime.java
--- a/net/minecraft/world/entity/monster/Slime.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/Slime.java	(date 1611567678440)
@@ -186,9 +186,10 @@
         super.onSyncedDataUpdated(entitydataaccessor);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public EntityType<? extends Slime> getType() {
-        return super.getType();
+        return (EntityType<? extends Slime>) super.getType();
     }
 
     @Override
Index: net/minecraft/world/level/storage/loot/PredicateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/PredicateManager.java b/net/minecraft/world/level/storage/loot/PredicateManager.java
--- a/net/minecraft/world/level/storage/loot/PredicateManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/PredicateManager.java	(date 1611605433228)
@@ -35,17 +35,18 @@
         return (LootItemCondition) this.conditions.get(resourcelocation);
     }
 
+    // PistonMC - Fix decompile errors
     protected void apply(Map<ResourceLocation, JsonElement> map, ResourceManager resourcemanager, ProfilerFiller profilerfiller) {
-        Builder builder = ImmutableMap.builder();
+        Builder<ResourceLocation, LootItemCondition> builder = ImmutableMap.builder();
 
         map.forEach((resourcelocation, jsonelement) -> {
             try {
                 if (jsonelement.isJsonArray()) {
-                    LootItemCondition[] alootitemcondition = (LootItemCondition[]) PredicateManager.GSON.fromJson(jsonelement, LootItemCondition[].class);
+                    LootItemCondition[] alootitemcondition = PredicateManager.GSON.fromJson(jsonelement, LootItemCondition[].class);
 
                     builder.put(resourcelocation, new PredicateManager.CompositePredicate(alootitemcondition));
                 } else {
-                    LootItemCondition lootitemcondition = (LootItemCondition) PredicateManager.GSON.fromJson(jsonelement, LootItemCondition.class);
+                    LootItemCondition lootitemcondition = PredicateManager.GSON.fromJson(jsonelement, LootItemCondition.class);
 
                     builder.put(resourcelocation, lootitemcondition);
                 }
@@ -54,17 +55,11 @@
             }
 
         });
-        ImmutableMap immutablemap = builder.build();
-        ValidationContext validationcontext = new ValidationContext(LootContextParamSets.ALL_PARAMS, immutablemap::get, (resourcelocation) -> {
-            return null;
-        });
+        ImmutableMap<ResourceLocation, LootItemCondition> immutablemap = builder.build();
+        ValidationContext validationcontext = new ValidationContext(LootContextParamSets.ALL_PARAMS, immutablemap::get, (resourcelocation) -> null);
 
-        immutablemap.forEach((resourcelocation, lootitemcondition) -> {
-            lootitemcondition.validate(validationcontext.enterCondition("{" + resourcelocation + "}", resourcelocation));
-        });
-        validationcontext.getProblems().forEach((s, s1) -> {
-            PredicateManager.LOGGER.warn("Found validation problem in " + s + ": " + s1);
-        });
+        immutablemap.forEach((resourcelocation, lootitemcondition) -> lootitemcondition.validate(validationcontext.enterCondition("{" + resourcelocation + "}", resourcelocation)));
+        validationcontext.getProblems().forEach((s, s1) -> PredicateManager.LOGGER.warn("Found validation problem in " + s + ": " + s1));
         this.conditions = immutablemap;
     }
 
Index: net/minecraft/world/level/storage/loot/LootTables.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/LootTables.java b/net/minecraft/world/level/storage/loot/LootTables.java
--- a/net/minecraft/world/level/storage/loot/LootTables.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/LootTables.java	(date 1611648128189)
@@ -13,6 +13,7 @@
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSet;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
+import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -32,9 +33,10 @@
         return (LootTable) this.tables.getOrDefault(resourcelocation, LootTable.EMPTY);
     }
 
+    // PistonMC - Fix decompile errors
     protected void apply(Map<ResourceLocation, JsonElement> map, ResourceManager resourcemanager, ProfilerFiller profilerfiller) {
-        Builder builder = ImmutableMap.builder();
-        JsonElement jsonelement = (JsonElement) map.remove(BuiltInLootTables.EMPTY);
+        Builder<ResourceLocation, LootTable> builder = ImmutableMap.builder();
+        JsonElement jsonelement = map.remove(BuiltInLootTables.EMPTY);
 
         if (jsonelement != null) {
             LootTables.LOGGER.warn("Datapack tried to redefine {} loot table, ignoring", BuiltInLootTables.EMPTY);
@@ -42,7 +44,7 @@
 
         map.forEach((resourcelocation, jsonelement1) -> {
             try {
-                LootTable loottable = (LootTable) LootTables.GSON.fromJson(jsonelement1, LootTable.class);
+                LootTable loottable = LootTables.GSON.fromJson(jsonelement1, LootTable.class);
 
                 builder.put(resourcelocation, loottable);
             } catch (Exception exception) {
@@ -51,22 +53,18 @@
 
         });
         builder.put(BuiltInLootTables.EMPTY, LootTable.EMPTY);
-        ImmutableMap immutablemap = builder.build();
+        ImmutableMap<ResourceLocation, LootTable> immutablemap = builder.build();
         LootContextParamSet lootcontextparamset = LootContextParamSets.ALL_PARAMS;
         PredicateManager predicatemanager = this.predicateManager;
 
-        this.predicateManager.getClass();
-        Function function = predicatemanager::get;
+//        this.predicateManager.getClass();
+        Function<ResourceLocation, LootItemCondition> function = predicatemanager::get;
 
-        immutablemap.getClass();
+//        immutablemap.getClass();
         ValidationContext validationcontext = new ValidationContext(lootcontextparamset, function, immutablemap::get);
 
-        immutablemap.forEach((resourcelocation, loottable) -> {
-            validate(validationcontext, resourcelocation, loottable);
-        });
-        validationcontext.getProblems().forEach((s, s1) -> {
-            LootTables.LOGGER.warn("Found validation problem in " + s + ": " + s1);
-        });
+        immutablemap.forEach((resourcelocation, loottable) -> validate(validationcontext, resourcelocation, loottable));
+        validationcontext.getProblems().forEach((s, s1) -> LootTables.LOGGER.warn("Found validation problem in " + s + ": " + s1));
         this.tables = immutablemap;
     }
 
Index: net/minecraft/world/level/storage/loot/entries/TagEntry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/entries/TagEntry.java b/net/minecraft/world/level/storage/loot/entries/TagEntry.java
--- a/net/minecraft/world/level/storage/loot/entries/TagEntry.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/entries/TagEntry.java	(date 1611652755066)
@@ -75,8 +75,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serializeCustom(JsonObject jsonobject, TagEntry tagentry, JsonSerializationContext jsonserializationcontext) {
-            super.serializeCustom(jsonobject, (LootPoolSingletonContainer) tagentry, jsonserializationcontext);
+            super.serializeCustom(jsonobject, tagentry, jsonserializationcontext);
             jsonobject.addProperty("name", SerializationTags.getInstance().getItems().getIdOrThrow(tagentry.tag).toString());
             jsonobject.addProperty("expand", tagentry.expand);
         }
Index: net/minecraft/world/entity/monster/ZombieVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/ZombieVillager.java b/net/minecraft/world/entity/monster/ZombieVillager.java
--- a/net/minecraft/world/entity/monster/ZombieVillager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/ZombieVillager.java	(date 1611568875492)
@@ -67,16 +67,15 @@
         this.entityData.define(ZombieVillager.DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void addAdditionalSaveData(CompoundTag compoundtag) {
         super.addAdditionalSaveData(compoundtag);
-        DataResult dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
+        DataResult<Tag> dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
         Logger logger = ZombieVillager.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("VillagerData", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("VillagerData", tag));
         if (this.tradeOffers != null) {
             compoundtag.put("Offers", this.tradeOffers);
         }
@@ -93,14 +92,15 @@
         compoundtag.putInt("Xp", this.villagerXp);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void readAdditionalSaveData(CompoundTag compoundtag) {
         super.readAdditionalSaveData(compoundtag);
         if (compoundtag.contains("VillagerData", 10)) {
-            DataResult dataresult = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundtag.get("VillagerData")));
+            DataResult<VillagerData> dataresult = VillagerData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("VillagerData")));
             Logger logger = ZombieVillager.LOGGER;
 
-            logger.getClass();
+//            logger.getClass();
             dataresult.resultOrPartial(logger::error).ifPresent(this::setVillagerData);
         }
 
Index: net/minecraft/world/entity/monster/hoglin/Hoglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/net/minecraft/world/entity/monster/hoglin/Hoglin.java
--- a/net/minecraft/world/entity/monster/hoglin/Hoglin.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/hoglin/Hoglin.java	(date 1611567572524)
@@ -53,7 +53,8 @@
     private int timeInOverworld = 0;
     private boolean cannotBeHunted = false;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    // PistonMC - Fix decompile errors
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED);
 
     public Hoglin(EntityType<? extends Hoglin> entitytype, Level level) {
         super(entitytype, level);
@@ -115,9 +116,10 @@
         return HoglinAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
     }
 
     @Override
@@ -297,9 +299,10 @@
         return SoundSource.HOSTILE;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : (SoundEvent) HoglinAi.getSoundForCurrentActivity(this).orElse((Object) null);
+        return this.level.isClientSide ? null : HoglinAi.getSoundForCurrentActivity(this).orElse(null);
     }
 
     @Override
Index: net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java b/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
--- a/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java	(date 1611568351186)
@@ -111,10 +111,11 @@
         return !this.isBaby();
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null);
+        return this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
     }
 
     protected boolean isHoldingMeleeWeapon() {
Index: net/minecraft/world/entity/monster/piglin/Piglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/piglin/Piglin.java b/net/minecraft/world/entity/monster/piglin/Piglin.java
--- a/net/minecraft/world/entity/monster/piglin/Piglin.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java	(date 1611568351190)
@@ -185,9 +185,10 @@
         return PiglinAi.makeBrain(this, this.brainProvider().makeBrain(dynamic));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain();
     }
 
     @Override
@@ -383,9 +384,10 @@
         return i != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), i - 1) : entity;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse((Object) null);
+        return this.level.isClientSide ? null : PiglinAi.getSoundForCurrentActivity(this).orElse(null);
     }
 
     @Override
Index: net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java b/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
--- a/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java	(date 1611605433223)
@@ -8,16 +8,13 @@
 
     public SimplePreparableReloadListener() {}
 
+    // PistonMC - Fix decompile errors
     @Override
     public final CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier preparablereloadlistener_preparationbarrier, ResourceManager resourcemanager, ProfilerFiller profilerfiller, ProfilerFiller profilerfiller1, Executor executor, Executor executor1) {
-        CompletableFuture completablefuture = CompletableFuture.supplyAsync(() -> {
-            return this.prepare(resourcemanager, profilerfiller);
-        }, executor);
+        CompletableFuture<T> completablefuture = CompletableFuture.supplyAsync(() -> this.prepare(resourcemanager, profilerfiller), executor);
 
-        preparablereloadlistener_preparationbarrier.getClass();
-        return completablefuture.thenCompose(preparablereloadlistener_preparationbarrier::wait).thenAcceptAsync((object) -> {
-            this.apply(object, resourcemanager, profilerfiller1);
-        }, executor1);
+//        preparablereloadlistener_preparationbarrier.getClass();
+        return completablefuture.thenCompose(preparablereloadlistener_preparationbarrier::wait).thenAcceptAsync((object) -> this.apply(object, resourcemanager, profilerfiller1), executor1);
     }
 
     protected abstract T prepare(ResourceManager resourcemanager, ProfilerFiller profilerfiller);
Index: net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java	(date 1611656676958)
@@ -71,8 +71,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, LootingEnchantFunction lootingenchantfunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) lootingenchantfunction, jsonserializationcontext);
+            super.serialize(jsonobject, lootingenchantfunction, jsonserializationcontext);
             jsonobject.add("count", jsonserializationcontext.serialize(lootingenchantfunction.value));
             if (lootingenchantfunction.hasLimit()) {
                 jsonobject.add("limit", jsonserializationcontext.serialize(lootingenchantfunction.limit));
Index: net/minecraft/world/entity/monster/piglin/PiglinBrute.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
--- a/net/minecraft/world/entity/monster/piglin/PiglinBrute.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/piglin/PiglinBrute.java	(date 1611568351181)
@@ -65,9 +65,10 @@
         return PiglinBruteAi.makeBrain(this, this.brainProvider().makeBrain(dynamic));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Brain<PiglinBrute> getBrain() {
-        return super.getBrain();
+        return (Brain<PiglinBrute>) super.getBrain();
     }
 
     @Override
Index: net/minecraft/server/packs/resources/SimpleReloadInstance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/packs/resources/SimpleReloadInstance.java b/net/minecraft/server/packs/resources/SimpleReloadInstance.java
--- a/net/minecraft/server/packs/resources/SimpleReloadInstance.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/packs/resources/SimpleReloadInstance.java	(date 1611664160521)
@@ -31,14 +31,16 @@
         }, completablefuture);
     }
 
+
+    // PistonMC - Fix decompile errors
     protected SimpleReloadInstance(Executor executor, final Executor executor1, ResourceManager resourcemanager, List<PreparableReloadListener> list, SimpleReloadInstance.StateFactory<S> simplereloadinstance_statefactory, CompletableFuture<Unit> completablefuture) {
         this.resourceManager = resourcemanager;
         this.listenerCount = list.size();
         this.startedTaskCounter.incrementAndGet();
-        AtomicInteger atomicinteger = this.doneTaskCounter;
+//        AtomicInteger atomicinteger = this.doneTaskCounter;
 
-        this.doneTaskCounter.getClass();
-        completablefuture.thenRun(atomicinteger::incrementAndGet);
+//        this.doneTaskCounter.getClass();
+        completablefuture.thenRun(this.doneTaskCounter::incrementAndGet);
         ArrayList arraylist = Lists.newArrayList();
         final CompletableFuture completablefuture1 = completablefuture;
 
Index: net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java b/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java	(date 1611660380266)
@@ -39,8 +39,9 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, SetItemCountFunction setitemcountfunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) setitemcountfunction, jsonserializationcontext);
+            super.serialize(jsonobject, setitemcountfunction, jsonserializationcontext);
             jsonobject.add("count", RandomIntGenerators.serialize(setitemcountfunction.value, jsonserializationcontext));
         }
 
Index: net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java b/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
--- a/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java	(date 1611656677010)
@@ -68,14 +68,12 @@
 
         public Serializer() {}
 
+        // PistonMC - Fix decompile errors
         public void serialize(JsonObject jsonobject, SetStewEffectFunction setsteweffectfunction, JsonSerializationContext jsonserializationcontext) {
-            super.serialize(jsonobject, (LootItemConditionalFunction) setsteweffectfunction, jsonserializationcontext);
+            super.serialize(jsonobject, setsteweffectfunction, jsonserializationcontext);
             if (!setsteweffectfunction.effectDurationMap.isEmpty()) {
                 JsonArray jsonarray = new JsonArray();
-                Iterator iterator = setsteweffectfunction.effectDurationMap.keySet().iterator();
-
-                while (iterator.hasNext()) {
-                    MobEffect mobeffect = (MobEffect) iterator.next();
+                for(MobEffect mobeffect : setsteweffectfunction.effectDurationMap.keySet()) {
                     JsonObject jsonobject1 = new JsonObject();
                     ResourceLocation resourcelocation = Registry.MOB_EFFECT.getKey(mobeffect);
 
Index: net/minecraft/world/entity/npc/Villager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/npc/Villager.java b/net/minecraft/world/entity/npc/Villager.java
--- a/net/minecraft/world/entity/npc/Villager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/npc/Villager.java	(date 1611568875487)
@@ -128,9 +128,10 @@
         this.setVillagerData(this.getVillagerData().setType(villagertype).setProfession(VillagerProfession.NONE));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain();
     }
 
     @Override
@@ -450,18 +451,17 @@
         this.entityData.define(Villager.DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void addAdditionalSaveData(CompoundTag compoundtag) {
         super.addAdditionalSaveData(compoundtag);
-        DataResult dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
+        DataResult<Tag> dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
         Logger logger = Villager.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("VillagerData", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("VillagerData", tag));
         compoundtag.putByte("FoodLevel", this.foodLevel);
-        compoundtag.put("Gossips", (Tag) this.gossips.store(NbtOps.INSTANCE).getValue());
+        compoundtag.put("Gossips", this.gossips.store(NbtOps.INSTANCE).getValue());
         compoundtag.putInt("Xp", this.villagerXp);
         compoundtag.putLong("LastRestock", this.lastRestockGameTime);
         compoundtag.putLong("LastGossipDecay", this.lastGossipDecayTime);
@@ -472,14 +472,15 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void readAdditionalSaveData(CompoundTag compoundtag) {
         super.readAdditionalSaveData(compoundtag);
         if (compoundtag.contains("VillagerData", 10)) {
-            DataResult dataresult = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundtag.get("VillagerData")));
+            DataResult<VillagerData> dataresult = VillagerData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("VillagerData")));
             Logger logger = Villager.LOGGER;
 
-            logger.getClass();
+//            logger.getClass();
             dataresult.resultOrPartial(logger::error).ifPresent(this::setVillagerData);
         }
 
@@ -493,7 +494,7 @@
 
         ListTag listtag = compoundtag.getList("Gossips", 10);
 
-        this.gossips.update(new Dynamic(NbtOps.INSTANCE, listtag));
+        this.gossips.update(new Dynamic<>(NbtOps.INSTANCE, listtag));
         if (compoundtag.contains("Xp", 3)) {
             this.villagerXp = compoundtag.getInt("Xp");
         }
@@ -863,13 +864,12 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public void spawnGolemIfNeeded(ServerLevel serverlevel, long i, int j) {
         if (this.wantsToSpawnGolem(i)) {
             AABB aabb = this.getBoundingBox().inflate(10.0D, 10.0D, 10.0D);
-            List list = serverlevel.getEntitiesOfClass(Villager.class, aabb);
-            List list1 = (List) list.stream().filter((villager) -> {
-                return villager.wantsToSpawnGolem(i);
-            }).limit(5L).collect(Collectors.toList());
+            List<Villager> list = serverlevel.getEntitiesOfClass(Villager.class, aabb);
+            List<Villager> list1 = list.stream().filter((villager) -> villager.wantsToSpawnGolem(i)).limit(5L).collect(Collectors.toList());
 
             if (list1.size() >= j) {
                 IronGolem irongolem = this.trySpawnGolem(serverlevel);
@@ -974,18 +974,20 @@
         DebugPackets.sendEntityBrain(this);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void startSleeping(BlockPos blockpos) {
         super.startSleeping(blockpos);
-        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, (Object) this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, this.level.getGameTime());
         this.brain.eraseMemory(MemoryModuleType.WALK_TARGET);
         this.brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void stopSleeping() {
         super.stopSleeping();
-        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, (Object) this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, this.level.getGameTime());
     }
 
     private boolean golemSpawnConditionsMet(long i) {
Index: net/minecraft/world/entity/player/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/player/Inventory.java b/net/minecraft/world/entity/player/Inventory.java
--- a/net/minecraft/world/entity/player/Inventory.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/player/Inventory.java	(date 1611579744265)
@@ -490,6 +490,7 @@
         return new TranslatableComponent("container.inventory");
     }
 
+    // PistonMC - Fix decompile errors
     public void hurtArmor(DamageSource damagesource, float f) {
         if (f > 0.0F) {
             f /= 4.0F;
@@ -498,12 +499,11 @@
             }
 
             for (int i = 0; i < this.armor.size(); ++i) {
-                ItemStack itemstack = (ItemStack) this.armor.get(i);
+                ItemStack itemstack = this.armor.get(i);
 
                 if ((!damagesource.isFire() || !itemstack.getItem().isFireResistant()) && itemstack.getItem() instanceof ArmorItem) {
-                    itemstack.hurtAndBreak((int) f, this.player, (player) -> {
-                        player.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, i));
-                    });
+                    int j = i;
+                    itemstack.hurtAndBreak((int) f, this.player, (player) -> player.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, j)));
                 }
             }
 
Index: net/minecraft/world/level/timers/TimerCallbacks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/timers/TimerCallbacks.java b/net/minecraft/world/level/timers/TimerCallbacks.java
--- a/net/minecraft/world/level/timers/TimerCallbacks.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/timers/TimerCallbacks.java	(date 1611589198766)
@@ -13,7 +13,8 @@
 public class TimerCallbacks<C> {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final TimerCallbacks<MinecraftServer> SERVER_CALLBACKS = (new TimerCallbacks<>()).register(new FunctionCallback.Serializer()).register(new FunctionTagCallback.Serializer());
+    // PistonMC - Fix decompile errors
+    public static final TimerCallbacks<MinecraftServer> SERVER_CALLBACKS = new TimerCallbacks<MinecraftServer>().register(new FunctionCallback.Serializer()).register(new FunctionTagCallback.Serializer());
     private final Map<ResourceLocation, TimerCallback.Serializer<C, ?>> idToSerializer = Maps.newHashMap();
     private final Map<Class<?>, TimerCallback.Serializer<C, ?>> classToSerializer = Maps.newHashMap();
 
Index: net/minecraft/world/entity/player/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
--- a/net/minecraft/world/entity/player/Player.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/player/Player.java	(date 1611509215379)
@@ -111,7 +111,8 @@
 public abstract class Player extends LivingEntity {
 
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, Player.STANDING_DIMENSIONS).put(Pose.SLEEPING, Player.SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    // PistonMC - Fix decompile errors
+    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, Player.STANDING_DIMENSIONS).put(Pose.SLEEPING, Player.SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
     protected static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
Index: net/minecraft/server/players/IpBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/players/IpBanList.java b/net/minecraft/server/players/IpBanList.java
--- a/net/minecraft/server/players/IpBanList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/players/IpBanList.java	(date 1611647344920)
@@ -25,10 +25,11 @@
         return this.contains(s);
     }
 
+    // PistonMC - Fix decompile errors
     public IpBanListEntry get(SocketAddress socketaddress) {
         String s = this.getIpFromAddress(socketaddress);
 
-        return (IpBanListEntry) this.get((Object) s);
+        return this.get(s);
     }
 
     private String getIpFromAddress(SocketAddress socketaddress) {
Index: net/minecraft/world/phys/shapes/EntityCollisionContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/phys/shapes/EntityCollisionContext.java b/net/minecraft/world/phys/shapes/EntityCollisionContext.java
--- a/net/minecraft/world/phys/shapes/EntityCollisionContext.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/phys/shapes/EntityCollisionContext.java	(date 1611663355791)
@@ -33,25 +33,27 @@
         this.canStandOnFluid = predicate;
     }
 
+    // PistonMC - Fix decompile errors
     @Deprecated
     protected EntityCollisionContext(Entity entity) {
-        boolean flag = entity.isDescending();
-        double d0 = entity.getY();
-        Item item = entity instanceof LivingEntity ? ((LivingEntity) entity).getMainHandItem().getItem() : Items.AIR;
-        Predicate predicate;
-
-        if (entity instanceof LivingEntity) {
-            LivingEntity livingentity = (LivingEntity) entity;
+//        boolean flag = entity.isDescending();
+//        double d0 = entity.getY();
+//        Item item = entity instanceof LivingEntity ? ((LivingEntity) entity).getMainHandItem().getItem() : Items.AIR;
+//        Predicate predicate;
+//
+//        if (entity instanceof LivingEntity) {
+//            LivingEntity livingentity = (LivingEntity) entity;
+//
+//            ((LivingEntity) entity).getClass();
+//            predicate = livingentity::canStandOnFluid;
+//        } else {
+//            predicate = (fluid) -> {
+//                return false;
+//            };
+//        }
 
-            ((LivingEntity) entity).getClass();
-            predicate = livingentity::canStandOnFluid;
-        } else {
-            predicate = (fluid) -> {
-                return false;
-            };
-        }
-
-        this(flag, d0, item, predicate);
+        this(entity.isDescending(), entity.getY(), entity instanceof LivingEntity ? ((LivingEntity) entity).getMainHandItem().getItem() : Items.AIR,
+                entity instanceof LivingEntity ? ((LivingEntity) entity)::canStandOnFluid : fluid -> false);
     }
 
     @Override
Index: net/minecraft/world/item/crafting/RecipeType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/crafting/RecipeType.java b/net/minecraft/world/item/crafting/RecipeType.java
--- a/net/minecraft/world/item/crafting/RecipeType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/crafting/RecipeType.java	(date 1611575329275)
@@ -24,7 +24,8 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     default <C extends Container> Optional<T> tryMatch(Recipe<C> recipe, Level level, C c0) {
-        return recipe.matches(c0, level) ? Optional.of(recipe) : Optional.empty();
+        return recipe.matches(c0, level) ? Optional.of((T) recipe) : Optional.empty();
     }
 }
Index: net/minecraft/world/entity/raid/Raid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/raid/Raid.java b/net/minecraft/world/entity/raid/Raid.java
--- a/net/minecraft/world/entity/raid/Raid.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/raid/Raid.java	(date 1611635217274)
@@ -379,14 +379,13 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private void moveRaidCenterToNearbyVillageSection() {
-        Stream stream = SectionPos.cube(SectionPos.of(this.center), 2);
+        Stream<SectionPos> stream = SectionPos.cube(SectionPos.of(this.center), 2);
         ServerLevel serverlevel = this.level;
 
-        this.level.getClass();
-        stream.filter(serverlevel::isVillage).map(SectionPos::center).min(Comparator.comparingDouble((blockpos) -> {
-            return blockpos.distSqr(this.center);
-        })).ifPresent(this::setCenter);
+//        this.level.getClass();
+        stream.filter(serverlevel::isVillage).map(SectionPos::center).min(Comparator.comparingDouble((blockpos) -> blockpos.distSqr(this.center))).ifPresent(this::setCenter);
     }
 
     private Optional<BlockPos> getValidSpawnPos(int i) {
Index: net/minecraft/world/item/crafting/SimpleRecipeSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/crafting/SimpleRecipeSerializer.java b/net/minecraft/world/item/crafting/SimpleRecipeSerializer.java
--- a/net/minecraft/world/item/crafting/SimpleRecipeSerializer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/crafting/SimpleRecipeSerializer.java	(date 1611575329283)
@@ -13,14 +13,16 @@
         this.constructor = function;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public T fromJson(ResourceLocation resourcelocation, JsonObject jsonobject) {
-        return (Recipe) this.constructor.apply(resourcelocation);
+        return this.constructor.apply(resourcelocation);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public T fromNetwork(ResourceLocation resourcelocation, FriendlyByteBuf friendlybytebuf) {
-        return (Recipe) this.constructor.apply(resourcelocation);
+        return this.constructor.apply(resourcelocation);
     }
 
     @Override
Index: net/minecraft/world/level/levelgen/placement/FeatureDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java b/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java
--- a/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java	(date 1611605183258)
@@ -48,8 +48,9 @@
     public static final FeatureDecorator<CountConfiguration> COUNT_MULTILAYER = register("count_multilayer", new CountMultiLayerDecorator(CountConfiguration.CODEC));
     private final Codec<ConfiguredDecorator<DC>> configuredCodec;
 
+    // PistonMC - Fix decompile errors
     private static <T extends DecoratorConfiguration, G extends FeatureDecorator<T>> G register(String s, G g0) {
-        return (FeatureDecorator) Registry.register(Registry.DECORATOR, s, g0);
+        return Registry.register(Registry.DECORATOR, s, g0);
     }
 
     public FeatureDecorator(Codec<DC> codec) {
Index: net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java b/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
--- a/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java	(date 1611662945859)
@@ -63,26 +63,21 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void addAdditionalSaveData(CompoundTag compoundtag) {
         compoundtag.putInt("PosX", this.position.getX());
         compoundtag.putInt("PosY", this.position.getY());
         compoundtag.putInt("PosZ", this.position.getZ());
         compoundtag.putInt("ground_level_delta", this.groundLevelDelta);
-        DataResult dataresult = StructurePoolElement.CODEC.encodeStart(NbtOps.INSTANCE, this.element);
+        DataResult<net.minecraft.nbt.Tag> dataresult = StructurePoolElement.CODEC.encodeStart(NbtOps.INSTANCE, this.element);
         Logger logger = PoolElementStructurePiece.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("pool_element", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("pool_element", tag));
         compoundtag.putString("rotation", this.rotation.name());
         ListTag listtag = new ListTag();
-        Iterator iterator = this.junctions.iterator();
-
-        while (iterator.hasNext()) {
-            JigsawJunction jigsawjunction = (JigsawJunction) iterator.next();
-
+        for(JigsawJunction jigsawjunction : this.junctions) {
             listtag.add(jigsawjunction.serialize(NbtOps.INSTANCE).getValue());
         }
 
Index: net/minecraft/world/item/crafting/RecipeSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/crafting/RecipeSerializer.java b/net/minecraft/world/item/crafting/RecipeSerializer.java
--- a/net/minecraft/world/item/crafting/RecipeSerializer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/crafting/RecipeSerializer.java	(date 1611575329279)
@@ -35,7 +35,8 @@
 
     void toNetwork(FriendlyByteBuf friendlybytebuf, T t0);
 
+    // PistonMC - Fix decompile errors
     static <S extends RecipeSerializer<T>, T extends Recipe<?>> S register(String s, S s0) {
-        return (RecipeSerializer) Registry.register(Registry.RECIPE_SERIALIZER, s, s0);
+        return Registry.register(Registry.RECIPE_SERIALIZER, s, s0);
     }
 }
Index: net/minecraft/world/entity/npc/VillagerTrades.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/npc/VillagerTrades.java b/net/minecraft/world/entity/npc/VillagerTrades.java
--- a/net/minecraft/world/entity/npc/VillagerTrades.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/npc/VillagerTrades.java	(date 1611634569443)
@@ -47,12 +47,13 @@
 
 public class VillagerTrades {
 
-    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
+    // PistonMC - Fix decompile errors
+    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashmap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        hashmap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
         hashmap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
         hashmap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashmap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        hashmap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
         hashmap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTER, 8, 1, 30)})));
         hashmap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
         hashmap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
Index: net/minecraft/world/item/crafting/RecipeManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/crafting/RecipeManager.java b/net/minecraft/world/item/crafting/RecipeManager.java
--- a/net/minecraft/world/item/crafting/RecipeManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/crafting/RecipeManager.java	(date 1611645202487)
@@ -46,29 +46,23 @@
         super(RecipeManager.GSON, "recipes");
     }
 
+    // PistonMC - Fix decompile errors
     protected void apply(Map<ResourceLocation, JsonElement> map, ResourceManager resourcemanager, ProfilerFiller profilerfiller) {
         this.hasErrors = false;
-        HashMap hashmap = Maps.newHashMap();
-        Iterator iterator = map.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            ResourceLocation resourcelocation = (ResourceLocation) entry.getKey();
+        HashMap<RecipeType<?>, Builder<ResourceLocation, Recipe<?>>> hashmap = Maps.newHashMap();
+        for(Entry<ResourceLocation, JsonElement> entry : map.entrySet()) {
+            ResourceLocation resourcelocation = entry.getKey();
 
             try {
-                Recipe recipe = fromJson(resourcelocation, GsonHelper.convertToJsonObject((JsonElement) entry.getValue(), "top element"));
+                Recipe<?> recipe = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
 
-                ((Builder) hashmap.computeIfAbsent(recipe.getType(), (recipetype) -> {
-                    return ImmutableMap.builder();
-                })).put(resourcelocation, recipe);
+                hashmap.computeIfAbsent(recipe.getType(), (recipetype) -> ImmutableMap.builder()).put(resourcelocation, recipe);
             } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
                 RecipeManager.LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
             }
         }
 
-        this.recipes = (Map) hashmap.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
-            return ((Builder) entry1.getValue()).build();
-        }));
+        this.recipes = hashmap.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> entry1.getValue().build()));
         RecipeManager.LOGGER.info("Loaded {} recipes", hashmap.size());
     }
 
@@ -112,10 +106,9 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public Optional<? extends Recipe<?>> byKey(ResourceLocation resourcelocation) {
-        return this.recipes.values().stream().map((map) -> {
-            return (Recipe) map.get(resourcelocation);
-        }).filter(Objects::nonNull).findFirst();
+        return this.recipes.values().stream().map((map) -> map.get(resourcelocation)).filter(Objects::nonNull).findFirst();
     }
 
     public Collection<Recipe<?>> getRecipes() {
Index: net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java b/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
--- a/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java	(date 1611635217284)
@@ -36,6 +36,7 @@
         return this.currentPhase;
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends DragonPhaseInstance> T getPhase(EnderDragonPhase<T> enderdragonphase) {
         int i = enderdragonphase.getId();
 
@@ -43,6 +44,6 @@
             this.phases[i] = enderdragonphase.createInstance(this.dragon);
         }
 
-        return this.phases[i];
+        return (T) this.phases[i];
     }
 }
Index: net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java b/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
--- a/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java	(date 1611604039617)
@@ -83,6 +83,7 @@
         this.loadTemplate(structuretemplate, new BlockPos(structuretemplate.getSize().getX() / 2, 0, structuretemplate.getSize().getZ() / 2));
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     protected void addAdditionalSaveData(CompoundTag compoundtag) {
         super.addAdditionalSaveData(compoundtag);
@@ -90,13 +91,11 @@
         compoundtag.putString("Rotation", this.rotation.name());
         compoundtag.putString("Mirror", this.mirror.name());
         compoundtag.putString("VerticalPlacement", this.verticalPlacement.getName());
-        DataResult dataresult = RuinedPortalPiece.Properties.CODEC.encodeStart(NbtOps.INSTANCE, this.properties);
+        DataResult<net.minecraft.nbt.Tag> dataresult = RuinedPortalPiece.Properties.CODEC.encodeStart(NbtOps.INSTANCE, this.properties);
         Logger logger = RuinedPortalPiece.LOGGER;
 
-        logger.getClass();
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("Properties", tag);
-        });
+//        logger.getClass();
+        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> compoundtag.put("Properties", tag));
     }
 
     private void loadTemplate(StructureTemplate structuretemplate, BlockPos blockpos) {
Index: net/minecraft/world/inventory/AbstractFurnaceMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/net/minecraft/world/inventory/AbstractFurnaceMenu.java
--- a/net/minecraft/world/inventory/AbstractFurnaceMenu.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/inventory/AbstractFurnaceMenu.java	(date 1611575644914)
@@ -67,9 +67,10 @@
         this.container.clearContent();
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverplayer) {
-        (new ServerPlaceSmeltingRecipe<>(this)).recipeClicked(serverplayer, recipe, flag);
+        new ServerPlaceSmeltingRecipe<>(this).recipeClicked(serverplayer, (Recipe<Container>) recipe, flag);
     }
 
     @Override
Index: net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java b/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java
--- a/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java	(date 1611589198774)
@@ -11,9 +11,8 @@
 
     Codec<P> codec();
 
+    // PistonMC - Fix decompile errors
     static <P extends PosRuleTest> PosRuleTestType<P> register(String s, Codec<P> codec) {
-        return (PosRuleTestType) Registry.register(Registry.POS_RULE_TEST, s, () -> {
-            return codec;
-        });
+        return Registry.register(Registry.POS_RULE_TEST, s, () -> codec);
     }
 }
Index: net/minecraft/server/commands/PardonIpCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/commands/PardonIpCommand.java b/net/minecraft/server/commands/PardonIpCommand.java
--- a/net/minecraft/server/commands/PardonIpCommand.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/commands/PardonIpCommand.java	(date 1611657623541)
@@ -27,6 +27,7 @@
         })));
     }
 
+    // PistonMC - Fix decompile errors
     private static int unban(CommandSourceStack commandsourcestack, String s) throws CommandSyntaxException {
         Matcher matcher = BanIpCommands.IP_ADDRESS_PATTERN.matcher(s);
 
@@ -38,8 +39,8 @@
             if (!ipbanlist.isBanned(s)) {
                 throw PardonIpCommand.ERROR_NOT_BANNED.create();
             } else {
-                ipbanlist.remove((Object) s);
-                commandsourcestack.sendSuccess(new TranslatableComponent("commands.pardonip.success", new Object[]{s}), true);
+                ipbanlist.remove(s);
+                commandsourcestack.sendSuccess(new TranslatableComponent("commands.pardonip.success", s), true);
                 return 1;
             }
         }
Index: net/minecraft/commands/SharedSuggestionProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/SharedSuggestionProvider.java b/net/minecraft/commands/SharedSuggestionProvider.java
--- a/net/minecraft/commands/SharedSuggestionProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/SharedSuggestionProvider.java	(date 1611506829990)
@@ -52,13 +52,11 @@
 
     boolean hasPermission(int i);
 
+    // PistonMC - Fix decompile errors
     static <T> void filterResources(Iterable<T> iterable, String s, Function<T, ResourceLocation> function, Consumer<T> consumer) {
         boolean flag = s.indexOf(58) > -1;
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            Object object = iterator.next();
-            ResourceLocation resourcelocation = (ResourceLocation) function.apply(object);
+        for(T object : iterable) {
+            ResourceLocation resourcelocation = function.apply(object);
 
             if (flag) {
                 String s1 = resourcelocation.toString();
Index: net/minecraft/advancements/critereon/PlayerPredicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/advancements/critereon/PlayerPredicate.java b/net/minecraft/advancements/critereon/PlayerPredicate.java
--- a/net/minecraft/advancements/critereon/PlayerPredicate.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/advancements/critereon/PlayerPredicate.java	(date 1611656676963)
@@ -183,9 +183,10 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> Stat<T> getStat(StatType<T> stattype, ResourceLocation resourcelocation) {
-        Registry registry = stattype.getRegistry();
-        Object object = registry.get(resourcelocation);
+        Registry<T> registry = stattype.getRegistry();
+        T object = registry.get(resourcelocation);
 
         if (object == null) {
             throw new JsonParseException("Unknown object " + resourcelocation + " for stat type " + Registry.STAT_TYPE.getKey(stattype));
@@ -198,6 +199,7 @@
         return stat.getType().getRegistry().getKey(stat.getValue());
     }
 
+    // PistonMC - Fix decompile errors
     public JsonElement serializeToJson() {
         if (this == PlayerPredicate.ANY) {
             return JsonNull.INSTANCE;
@@ -223,21 +225,15 @@
                 jsonobject.add("stats", jsonarray);
             }
 
-            JsonObject jsonobject1;
-
             if (!this.recipes.isEmpty()) {
-                jsonobject1 = new JsonObject();
-                this.recipes.forEach((resourcelocation, obool) -> {
-                    jsonobject1.addProperty(resourcelocation.toString(), obool);
-                });
+                JsonObject jsonobject1 = new JsonObject();
+                this.recipes.forEach((resourcelocation, obool) -> jsonobject1.addProperty(resourcelocation.toString(), obool));
                 jsonobject.add("recipes", jsonobject1);
             }
 
             if (!this.advancements.isEmpty()) {
-                jsonobject1 = new JsonObject();
-                this.advancements.forEach((resourcelocation, playerpredicate_advancementpredicate) -> {
-                    jsonobject1.add(resourcelocation.toString(), playerpredicate_advancementpredicate.toJson());
-                });
+                JsonObject jsonobject1 = new JsonObject();
+                this.advancements.forEach((resourcelocation, playerpredicate_advancementpredicate) -> jsonobject1.add(resourcelocation.toString(), playerpredicate_advancementpredicate.toJson()));
                 jsonobject.add("advancements", jsonobject1);
             }
 
Index: net/minecraft/core/AxisCycle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/AxisCycle.java b/net/minecraft/core/AxisCycle.java
--- a/net/minecraft/core/AxisCycle.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/AxisCycle.java	(date 1611589198789)
@@ -24,14 +24,16 @@
             return direction_axis.choose(k, i, j);
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public Direction.Axis cycle(Direction.Axis direction_axis) {
-            return null.AXIS_VALUES[Math.floorMod(direction_axis.ordinal() + 1, 3)];
+            return AXIS_VALUES[Math.floorMod(direction_axis.ordinal() + 1, 3)];
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public AxisCycle inverse() {
-            return null.BACKWARD;
+            return BACKWARD;
         }
     },
     BACKWARD {
@@ -40,14 +42,16 @@
             return direction_axis.choose(j, k, i);
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public Direction.Axis cycle(Direction.Axis direction_axis) {
-            return null.AXIS_VALUES[Math.floorMod(direction_axis.ordinal() - 1, 3)];
+            return AXIS_VALUES[Math.floorMod(direction_axis.ordinal() - 1, 3)];
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public AxisCycle inverse() {
-            return null.FORWARD;
+            return FORWARD;
         }
     };
 
Index: net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java b/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
--- a/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java	(date 1611589198779)
@@ -39,12 +39,13 @@
         this(ruletest, ruletest1, posruletest, blockstate, Optional.empty());
     }
 
+    // PistonMC - Fix decompile errors
     public ProcessorRule(RuleTest ruletest, RuleTest ruletest1, PosRuleTest posruletest, BlockState blockstate, Optional<CompoundTag> optional) {
         this.inputPredicate = ruletest;
         this.locPredicate = ruletest1;
         this.posPredicate = posruletest;
         this.outputState = blockstate;
-        this.outputTag = (CompoundTag) optional.orElse((Object) null);
+        this.outputTag = optional.orElse(null);
     }
 
     public boolean test(BlockState blockstate, BlockState blockstate1, BlockPos blockpos, BlockPos blockpos1, BlockPos blockpos2, Random random) {
Index: net/minecraft/commands/Commands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/Commands.java b/net/minecraft/commands/Commands.java
--- a/net/minecraft/commands/Commands.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/Commands.java	(date 1611648128177)
@@ -353,17 +353,14 @@
         return !parseresults.getReader().canRead() ? null : (parseresults.getExceptions().size() == 1 ? (CommandSyntaxException) parseresults.getExceptions().values().iterator().next() : (parseresults.getContext().getRange().isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(parseresults.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(parseresults.getReader())));
     }
 
+    // PistonMC - Fix decompile errors
     public static void validate() {
-        RootCommandNode rootcommandnode = (new Commands(Commands.CommandSelection.ALL)).getDispatcher().getRoot();
-        Set set = ArgumentTypes.findUsedArgumentTypes(rootcommandnode);
-        Set set1 = (Set) set.stream().filter((argumenttype) -> {
-            return !ArgumentTypes.isTypeRegistered(argumenttype);
-        }).collect(Collectors.toSet());
+        RootCommandNode<CommandSourceStack> rootcommandnode = new Commands(Commands.CommandSelection.ALL).getDispatcher().getRoot();
+        Set<ArgumentType<?>> set = ArgumentTypes.findUsedArgumentTypes(rootcommandnode);
+        Set<ArgumentType<?>> set1 = set.stream().filter((argumenttype) -> !ArgumentTypes.isTypeRegistered(argumenttype)).collect(Collectors.toSet());
 
         if (!set1.isEmpty()) {
-            Commands.LOGGER.warn("Missing type registration for following arguments:\n {}", set1.stream().map((argumenttype) -> {
-                return "\t" + argumenttype;
-            }).collect(Collectors.joining(",\n")));
+            Commands.LOGGER.warn("Missing type registration for following arguments:\n {}", set1.stream().map((argumenttype) -> "\t" + argumenttype).collect(Collectors.joining(",\n")));
             throw new IllegalStateException("Unregistered argument types");
         }
     }
Index: net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java
--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java	(date 1611589198753)
@@ -30,9 +30,8 @@
 
     Codec<P> codec();
 
+    // PistonMC - Fix decompile errors
     static <P extends StructureProcessor> StructureProcessorType<P> register(String s, Codec<P> codec) {
-        return (StructureProcessorType) Registry.register(Registry.STRUCTURE_PROCESSOR, s, () -> {
-            return codec;
-        });
+        return Registry.register(Registry.STRUCTURE_PROCESSOR, s, () -> codec);
     }
 }
Index: net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java b/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
--- a/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java	(date 1611589198793)
@@ -14,9 +14,8 @@
 
     Codec<P> codec();
 
+    // PistonMC - Fix decompile errors
     static <P extends RuleTest> RuleTestType<P> register(String s, Codec<P> codec) {
-        return (RuleTestType) Registry.register(Registry.RULE_TEST, s, () -> {
-            return codec;
-        });
+        return Registry.register(Registry.RULE_TEST, s, () -> codec);
     }
 }
Index: net/minecraft/server/commands/PardonCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/commands/PardonCommand.java b/net/minecraft/server/commands/PardonCommand.java
--- a/net/minecraft/server/commands/PardonCommand.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/commands/PardonCommand.java	(date 1611657623552)
@@ -29,18 +29,15 @@
         })));
     }
 
+    // PistonMC - Fix decompile errors
     private static int pardonPlayers(CommandSourceStack commandsourcestack, Collection<GameProfile> collection) throws CommandSyntaxException {
         UserBanList userbanlist = commandsourcestack.getServer().getPlayerList().getBans();
         int i = 0;
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            GameProfile gameprofile = (GameProfile) iterator.next();
-
+        for(GameProfile gameprofile : collection) {
             if (userbanlist.isBanned(gameprofile)) {
-                userbanlist.remove((Object) gameprofile);
+                userbanlist.remove(gameprofile);
                 ++i;
-                commandsourcestack.sendSuccess(new TranslatableComponent("commands.pardon.success", new Object[]{ComponentUtils.getDisplayName(gameprofile)}), true);
+                commandsourcestack.sendSuccess(new TranslatableComponent("commands.pardon.success", ComponentUtils.getDisplayName(gameprofile)), true);
             }
         }
 
Index: net/minecraft/commands/arguments/OperationArgument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/arguments/OperationArgument.java b/net/minecraft/commands/arguments/OperationArgument.java
--- a/net/minecraft/commands/arguments/OperationArgument.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/arguments/OperationArgument.java	(date 1611663355828)
@@ -54,13 +54,14 @@
         return OperationArgument.EXAMPLES;
     }
 
+    // PistonMC - Fix decompile errors
     private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-        return (OperationArgument.Operation) (s.equals("><") ? (score, score1) -> {
+        return s.equals("><") ? (score, score1) -> {
             int i = score.getScore();
 
             score.setScore(score1.getScore());
             score1.setScore(i);
-        } : getSimpleOperation(s));
+        } : getSimpleOperation(s);
     }
 
     private static OperationArgument.SimpleOperation getSimpleOperation(String s) throws CommandSyntaxException {
Index: net/minecraft/world/inventory/RecipeBookMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/inventory/RecipeBookMenu.java b/net/minecraft/world/inventory/RecipeBookMenu.java
--- a/net/minecraft/world/inventory/RecipeBookMenu.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/inventory/RecipeBookMenu.java	(date 1611575644923)
@@ -12,8 +12,9 @@
         super(menutype, i);
     }
 
+    // PistonMC - Fix decompile errors
     public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverplayer) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(serverplayer, recipe, flag);
+        new ServerPlaceRecipe<>(this).recipeClicked(serverplayer, (Recipe<C>) recipe, flag);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents stackedcontents);
Index: net/minecraft/core/DefaultedRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/DefaultedRegistry.java b/net/minecraft/core/DefaultedRegistry.java
--- a/net/minecraft/core/DefaultedRegistry.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/DefaultedRegistry.java	(date 1611634569448)
@@ -42,10 +42,11 @@
         return resourcelocation == null ? this.defaultKey : resourcelocation;
     }
 
+    // PistonMC - Fix decompile errors
     @Nonnull
     @Override
     public T get(@Nullable ResourceLocation resourcelocation) {
-        Object object = super.get(resourcelocation);
+        T object = super.get(resourcelocation);
 
         return object == null ? this.defaultValue : object;
     }
@@ -55,18 +56,20 @@
         return Optional.ofNullable(super.get(resourcelocation));
     }
 
+    // PistonMC - Fix decompile errors
     @Nonnull
     @Override
     public T byId(int i) {
-        Object object = super.byId(i);
+        T object = super.byId(i);
 
         return object == null ? this.defaultValue : object;
     }
 
+    // PistonMC - Fix decompile errors
     @Nonnull
     @Override
     public T getRandom(Random random) {
-        Object object = super.getRandom(random);
+        T object = super.getRandom(random);
 
         return object == null ? this.defaultValue : object;
     }
Index: net/minecraft/world/item/enchantment/EnchantmentCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/net/minecraft/world/item/enchantment/EnchantmentCategory.java
--- a/net/minecraft/world/item/enchantment/EnchantmentCategory.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/enchantment/EnchantmentCategory.java	(date 1611565689833)
@@ -94,9 +94,11 @@
         }
     },
     VANISHABLE {
+        // PistonMC - Fix decompile errors
         @Override
         public boolean canEnchant(Item item) {
-            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || null.BREAKABLE.canEnchant(item);
+//            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || null.BREAKABLE.canEnchant(item);
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchant(item);
         }
     };
 
Index: net/minecraft/core/NonNullList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/NonNullList.java b/net/minecraft/core/NonNullList.java
--- a/net/minecraft/core/NonNullList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/NonNullList.java	(date 1611565399232)
@@ -17,9 +17,11 @@
         return new NonNullList<>();
     }
 
+    // PistonMC - Fix decompile errors
     public static <E> NonNullList<E> withSize(int i, E e0) {
         Validate.notNull(e0);
-        Object[] aobject = new Object[i];
+//        Object[] aobject = new Object[i];
+        E[] aobject = (E[]) java.lang.reflect.Array.newInstance(e0.getClass(), i);
 
         Arrays.fill(aobject, e0);
         return new NonNullList<>(Arrays.asList(aobject), e0);
@@ -31,7 +33,7 @@
     }
 
     protected NonNullList() {
-        this(Lists.newArrayList(), (Object) null);
+        this(Lists.newArrayList(), null);
     }
 
     protected NonNullList(List<E> list, @Nullable E e0) {
Index: net/minecraft/core/IdMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/IdMapper.java b/net/minecraft/core/IdMapper.java
--- a/net/minecraft/core/IdMapper.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/IdMapper.java	(date 1611555788829)
@@ -23,11 +23,12 @@
         this.tToId = new IdentityHashMap(i);
     }
 
+    // PistonMC - Fix decompile errors
     public void addMapping(T t0, int i) {
         this.tToId.put(t0, i);
 
         while (this.idToT.size() <= i) {
-            this.idToT.add((Object) null);
+            this.idToT.add(null);
         }
 
         this.idToT.set(i, t0);
Index: net/minecraft/data/BuiltinRegistries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/BuiltinRegistries.java b/net/minecraft/data/BuiltinRegistries.java
--- a/net/minecraft/data/BuiltinRegistries.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/BuiltinRegistries.java	(date 1611648888635)
@@ -62,25 +62,28 @@
         return internalRegister(resourcekey, new MappedRegistry<>(resourcekey, lifecycle), supplier, lifecycle);
     }
 
+    // PistonMC - Fix decompile errors
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourcekey, R r0, Supplier<T> supplier, Lifecycle lifecycle) {
         ResourceLocation resourcelocation = resourcekey.location();
 
         BuiltinRegistries.LOADERS.put(resourcelocation, supplier);
         WritableRegistry writableregistry = BuiltinRegistries.WRITABLE_REGISTRY;
 
-        return (WritableRegistry) writableregistry.register(resourcekey, (Object) r0, lifecycle);
+        return (R) writableregistry.register(resourcekey, r0, lifecycle);
     }
 
     public static <T> T register(Registry<? super T> registry, String s, T t0) {
         return register(registry, new ResourceLocation(s), t0);
     }
 
+    // PistonMC - Fix decompile errors
     public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourcelocation, T t0) {
-        return ((WritableRegistry) registry).register(ResourceKey.create(registry.key(), resourcelocation), t0, Lifecycle.stable());
+        return ((WritableRegistry<V>) registry).register(ResourceKey.create(registry.key(), resourcelocation), t0, Lifecycle.stable());
     }
 
+    // PistonMC - Fix decompile errors
     public static <V, T extends V> T registerMapping(Registry<V> registry, int i, ResourceKey<V> resourcekey, T t0) {
-        return ((WritableRegistry) registry).registerMapping(i, resourcekey, t0, Lifecycle.stable());
+        return ((WritableRegistry<V>) registry).registerMapping(i, resourcekey, t0, Lifecycle.stable());
     }
 
     public static void bootstrap() {}
Index: net/minecraft/network/chat/ComponentUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/chat/ComponentUtils.java b/net/minecraft/network/chat/ComponentUtils.java
--- a/net/minecraft/network/chat/ComponentUtils.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/chat/ComponentUtils.java	(date 1611652755052)
@@ -68,36 +68,37 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     public static <T extends Comparable<T>> Component formatAndSortList(Collection<T> collection, Function<T, Component> function) {
         if (collection.isEmpty()) {
             return TextComponent.EMPTY;
         } else if (collection.size() == 1) {
-            return (Component) function.apply(collection.iterator().next());
+            return function.apply(collection.iterator().next());
         } else {
-            ArrayList arraylist = Lists.newArrayList(collection);
+            ArrayList<T> arraylist = Lists.newArrayList(collection);
 
             arraylist.sort(Comparable::compareTo);
             return formatList(arraylist, function);
         }
     }
 
+    // PistonMC - Fix decompile errors
     public static <T> MutableComponent formatList(Collection<T> collection, Function<T, Component> function) {
         if (collection.isEmpty()) {
             return new TextComponent("");
         } else if (collection.size() == 1) {
-            return ((Component) function.apply(collection.iterator().next())).copy();
+            return function.apply(collection.iterator().next()).copy();
         } else {
             TextComponent textcomponent = new TextComponent("");
             boolean flag = true;
 
-            for (Iterator iterator = collection.iterator(); iterator.hasNext(); flag = false) {
-                Object object = iterator.next();
-
+            for(T object : collection) {
                 if (!flag) {
-                    textcomponent.append((Component) (new TextComponent(", ")).withStyle(ChatFormatting.GRAY));
+                    textcomponent.append(new TextComponent(", ").withStyle(ChatFormatting.GRAY));
                 }
 
-                textcomponent.append((Component) function.apply(object));
+                textcomponent.append(function.apply(object));
+                flag = false;
             }
 
             return textcomponent;
Index: net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java b/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java
--- a/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java	(date 1611645202435)
@@ -63,8 +63,9 @@
     public static final SurfaceBuilder<SurfaceBuilderBaseConfiguration> NOPE = register("nope", new NopeSurfaceBuilder(SurfaceBuilderBaseConfiguration.CODEC));
     private final Codec<ConfiguredSurfaceBuilder<C>> configuredCodec;
 
+    // PistonMC - Fix decompile errors
     private static <C extends SurfaceBuilderConfiguration, F extends SurfaceBuilder<C>> F register(String s, F f0) {
-        return (SurfaceBuilder) Registry.register(Registry.SURFACE_BUILDER, s, f0);
+        return Registry.register(Registry.SURFACE_BUILDER, s, f0);
     }
 
     public SurfaceBuilder(Codec<C> codec) {
Index: net/minecraft/commands/arguments/selector/EntitySelector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/commands/arguments/selector/EntitySelector.java b/net/minecraft/commands/arguments/selector/EntitySelector.java
--- a/net/minecraft/commands/arguments/selector/EntitySelector.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/commands/arguments/selector/EntitySelector.java	(date 1611648888675)
@@ -214,21 +214,18 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private Predicate<Entity> getPredicate(Vec3 vec3) {
-        Predicate predicate = this.predicate;
+        Predicate<Entity> predicate = this.predicate;
 
         if (this.aabb != null) {
             AABB aabb = this.aabb.move(vec3);
 
-            predicate = predicate.and((entity) -> {
-                return aabb.intersects(entity.getBoundingBox());
-            });
+            predicate = predicate.and((entity) -> aabb.intersects(entity.getBoundingBox()));
         }
 
         if (!this.range.isAny()) {
-            predicate = predicate.and((entity) -> {
-                return this.range.matchesSqr(entity.distanceToSqr(vec3));
-            });
+            predicate = predicate.and((entity) -> this.range.matchesSqr(entity.distanceToSqr(vec3)));
         }
 
         return predicate;
Index: net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
--- a/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java	(date 1611603678362)
@@ -86,16 +86,17 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public void removeIf(LongPredicate longpredicate) {
         LongArrayList longarraylist = new LongArrayList();
 
-        this.computedLevels.keySet().forEach((i) -> {
+        this.computedLevels.keySet().forEach((long i) -> {
             if (longpredicate.test(i)) {
                 longarraylist.add(i);
             }
 
         });
-        longarraylist.forEach(this::removeFromQueue);
+        longarraylist.forEach((java.util.function.LongConsumer) this::removeFromQueue);
     }
 
     private void dequeue(long i, int j, int k, boolean flag) {
Index: net/minecraft/core/Registry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/Registry.java b/net/minecraft/core/Registry.java
--- a/net/minecraft/core/Registry.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/Registry.java	(date 1611589333911)
@@ -335,13 +335,14 @@
         return (DefaultedRegistry) internalRegister(resourcekey, new DefaultedRegistry<>(s, resourcekey, lifecycle), supplier, lifecycle);
     }
 
+    // PistonMC - Fix decompile errors
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourcekey, R r0, Supplier<T> supplier, Lifecycle lifecycle) {
         ResourceLocation resourcelocation = resourcekey.location();
 
         Registry.LOADERS.put(resourcelocation, supplier);
         WritableRegistry writableregistry = Registry.WRITABLE_REGISTRY;
 
-        return (WritableRegistry) writableregistry.register(resourcekey, (Object) r0, lifecycle);
+        return (R) writableregistry.register(resourcekey, r0, lifecycle);
     }
 
     protected Registry(ResourceKey<? extends Registry<T>> resourcekey, Lifecycle lifecycle) {
@@ -357,15 +358,14 @@
         return "Registry[" + this.key + " (" + this.lifecycle + ")]";
     }
 
+    // PistonMC - Fix decompile errors
     public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicops, U u0) {
         return dynamicops.compressMaps() ? dynamicops.getNumberValue(u0).flatMap((number) -> {
-            Object object = this.byId(number.intValue());
+            T object = this.byId(number.intValue());
 
             return object == null ? DataResult.error("Unknown registry id: " + number) : DataResult.success(object, this.lifecycle(object));
-        }).map((object) -> {
-            return Pair.of(object, dynamicops.empty());
-        }) : ResourceLocation.CODEC.decode(dynamicops, u0).flatMap((pair) -> {
-            Object object = this.get((ResourceLocation) pair.getFirst());
+        }).map((object) -> Pair.of(object, dynamicops.empty())) : ResourceLocation.CODEC.decode(dynamicops, u0).flatMap((pair) -> {
+            T object = this.get(pair.getFirst());
 
             return object == null ? DataResult.error("Unknown registry key: " + pair.getFirst()) : DataResult.success(Pair.of(object, pair.getSecond()), this.lifecycle(object));
         });
@@ -405,14 +405,14 @@
         return Optional.ofNullable(this.get(resourcelocation));
     }
 
+    // PistonMC - Fix decompile errors
     public T getOrThrow(ResourceKey<T> resourcekey) {
-        Object object = this.get(resourcekey);
+        T object = this.get(resourcekey);
 
         if (object == null) {
             throw new IllegalStateException("Missing: " + resourcekey);
-        } else {
-            return object;
-        }
+        }
+        return object;
     }
 
     public abstract Set<ResourceLocation> keySet();
@@ -427,12 +427,14 @@
         return register(registry, new ResourceLocation(s), t0);
     }
 
+    // PistonMC - Fix decompile errors
     public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourcelocation, T t0) {
-        return ((WritableRegistry) registry).register(ResourceKey.create(registry.key, resourcelocation), t0, Lifecycle.stable());
+        return ((WritableRegistry<V>) registry).register(ResourceKey.create(registry.key, resourcelocation), t0, Lifecycle.stable());
     }
 
+    // PistonMC - Fix decompile errors
     public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T t0) {
-        return ((WritableRegistry) registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), t0, Lifecycle.stable());
+        return ((WritableRegistry<V>) registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), t0, Lifecycle.stable());
     }
 
     static {
Index: net/minecraft/core/MappedRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/MappedRegistry.java b/net/minecraft/core/MappedRegistry.java
--- a/net/minecraft/core/MappedRegistry.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/MappedRegistry.java	(date 1611554321401)
@@ -182,41 +182,34 @@
         return Collections.unmodifiableMap(this.keyStorage).entrySet();
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public T getRandom(Random random) {
         if (this.randomCache == null) {
-            Set set = this.storage.values();
+            Set<T> set = this.storage.values();
 
             if (set.isEmpty()) {
                 return null;
             }
-
-            this.randomCache = set.toArray(new Object[set.size()]);
+            this.randomCache = set.toArray();
         }
 
-        return Util.getRandom(this.randomCache, random);
+        return (T) Util.getRandom(this.randomCache, random);
     }
 
+    // PistonMC - Fix decompile errors
     public static <T> Codec<MappedRegistry<T>> networkCodec(ResourceKey<? extends Registry<T>> resourcekey, Lifecycle lifecycle, Codec<T> codec) {
         return withNameAndId(resourcekey, codec.fieldOf("element")).codec().listOf().xmap((list) -> {
-            MappedRegistry mappedregistry = new MappedRegistry<>(resourcekey, lifecycle);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                MappedRegistry.RegistryEntry mappedregistry_registryentry = (MappedRegistry.RegistryEntry) iterator.next();
-
+            MappedRegistry<T> mappedregistry = new MappedRegistry<>(resourcekey, lifecycle);
+            for(MappedRegistry.RegistryEntry<T> mappedregistry_registryentry : list) {
                 mappedregistry.registerMapping(mappedregistry_registryentry.id, mappedregistry_registryentry.key, mappedregistry_registryentry.value, lifecycle);
             }
 
             return mappedregistry;
         }, (mappedregistry) -> {
-            Builder builder = ImmutableList.builder();
-            Iterator iterator = mappedregistry.iterator();
-
-            while (iterator.hasNext()) {
-                Object object = iterator.next();
-
-                builder.add(new MappedRegistry.RegistryEntry<>((ResourceKey) mappedregistry.getResourceKey(object).get(), mappedregistry.getId(object), object));
+            Builder<MappedRegistry.RegistryEntry<T>> builder = ImmutableList.builder();
+            for(T object : mappedregistry) {
+                builder.add(new MappedRegistry.RegistryEntry<>(mappedregistry.getResourceKey(object).get(), mappedregistry.getId(object), object));
             }
 
             return builder.build();
Index: net/minecraft/world/level/ChunkTickList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/ChunkTickList.java b/net/minecraft/world/level/ChunkTickList.java
--- a/net/minecraft/world/level/ChunkTickList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/ChunkTickList.java	(date 1611660380257)
@@ -42,15 +42,13 @@
         return false;
     }
 
+    // PistonMC - Fix decompile errors
     public ListTag save() {
         ListTag listtag = new ListTag();
-        Iterator iterator = this.ticks.iterator();
-
-        while (iterator.hasNext()) {
-            ChunkTickList.ScheduledTick chunkticklist_scheduledtick = (ChunkTickList.ScheduledTick) iterator.next();
+        for(ChunkTickList.ScheduledTick<T> chunkticklist_scheduledtick : this.ticks) {
             CompoundTag compoundtag = new CompoundTag();
 
-            compoundtag.putString("i", ((ResourceLocation) this.toId.apply(chunkticklist_scheduledtick.type)).toString());
+            compoundtag.putString("i", this.toId.apply(chunkticklist_scheduledtick.type).toString());
             compoundtag.putInt("x", chunkticklist_scheduledtick.pos.getX());
             compoundtag.putInt("y", chunkticklist_scheduledtick.pos.getY());
             compoundtag.putInt("z", chunkticklist_scheduledtick.pos.getZ());
Index: net/minecraft/core/RegistryAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/core/RegistryAccess.java b/net/minecraft/core/RegistryAccess.java
--- a/net/minecraft/core/RegistryAccess.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/core/RegistryAccess.java	(date 1611510900844)
@@ -97,24 +97,21 @@
         return registryaccess_registryholder;
     }
 
+    // PistonMC - Fix decompile errors
     private static <E> void addBuiltinElements(RegistryAccess.RegistryHolder registryaccess_registryholder, RegistryReadOps.ResourceAccess.MemoryMap registryreadops_resourceaccess_memorymap, RegistryAccess.RegistryData<E> registryaccess_registrydata) {
-        ResourceKey resourcekey = registryaccess_registrydata.key();
+        ResourceKey<? extends Registry<E>> resourcekey = registryaccess_registrydata.key();
         boolean flag = !resourcekey.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !resourcekey.equals(Registry.DIMENSION_TYPE_REGISTRY);
-        WritableRegistry writableregistry = RegistryAccess.BUILTIN.registryOrThrow(resourcekey);
-        WritableRegistry writableregistry1 = registryaccess_registryholder.registryOrThrow(resourcekey);
-        Iterator iterator = writableregistry.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            Object object = entry.getValue();
+        WritableRegistry<E> writableregistry = RegistryAccess.BUILTIN.registryOrThrow(resourcekey);
+        WritableRegistry<E> writableregistry1 = registryaccess_registryholder.registryOrThrow(resourcekey);
+        for(Entry<ResourceKey<E>, E> entry : writableregistry.entrySet()) {
+            E object = entry.getValue();
 
             if (flag) {
-                registryreadops_resourceaccess_memorymap.add(RegistryAccess.BUILTIN, (ResourceKey) entry.getKey(), registryaccess_registrydata.codec(), writableregistry.getId(object), object, writableregistry.lifecycle(object));
+                registryreadops_resourceaccess_memorymap.add(RegistryAccess.BUILTIN, entry.getKey(), registryaccess_registrydata.codec(), writableregistry.getId(object), object, writableregistry.lifecycle(object));
             } else {
-                writableregistry1.registerMapping(writableregistry.getId(object), (ResourceKey) entry.getKey(), object, writableregistry.lifecycle(object));
+                writableregistry1.registerMapping(writableregistry.getId(object), entry.getKey(), object, writableregistry.lifecycle(object));
             }
         }
-
     }
 
     private static <R extends Registry<?>> void copyBuiltin(RegistryAccess.RegistryHolder registryaccess_registryholder, ResourceKey<R> resourcekey) {
@@ -128,19 +125,14 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private static <E> void copy(RegistryAccess.RegistryHolder registryaccess_registryholder, Registry<E> registry) {
-        WritableRegistry writableregistry = (WritableRegistry) registryaccess_registryholder.registry(registry.key()).orElseThrow(() -> {
-            return new IllegalStateException("Missing registry: " + registry.key());
-        });
-        Iterator iterator = registry.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            Object object = entry.getValue();
+        WritableRegistry<E> writableregistry = registryaccess_registryholder.registry(registry.key()).orElseThrow(() -> new IllegalStateException("Missing registry: " + registry.key()));
+        for(Entry<ResourceKey<E>, E> entry : registry.entrySet()) {
+            E object = entry.getValue();
 
-            writableregistry.registerMapping(registry.getId(object), (ResourceKey) entry.getKey(), object, registry.lifecycle(object));
+            writableregistry.registerMapping(registry.getId(object), entry.getKey(), object, registry.lifecycle(object));
         }
-
     }
 
     public static void load(RegistryAccess.RegistryHolder registryaccess_registryholder, RegistryReadOps<?> registryreadops) {
@@ -154,18 +146,13 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private static <E> void readRegistry(RegistryReadOps<?> registryreadops, RegistryAccess.RegistryHolder registryaccess_registryholder, RegistryAccess.RegistryData<E> registryaccess_registrydata) {
-        ResourceKey resourcekey = registryaccess_registrydata.key();
-        MappedRegistry mappedregistry = (MappedRegistry) Optional.ofNullable(registryaccess_registryholder.registries.get(resourcekey)).map((mappedregistry1) -> {
-            return mappedregistry1;
-        }).orElseThrow(() -> {
-            return new IllegalStateException("Missing registry: " + resourcekey);
-        });
-        DataResult dataresult = registryreadops.decodeElements(mappedregistry, registryaccess_registrydata.key(), registryaccess_registrydata.codec());
+        ResourceKey<? extends Registry<E>> resourcekey = registryaccess_registrydata.key();
+        MappedRegistry<E> mappedregistry = Optional.ofNullable(registryaccess_registryholder.registries.get(resourcekey)).map((mappedregistry1) -> (MappedRegistry<E>) mappedregistry1).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourcekey));
+        DataResult<MappedRegistry<E>> dataresult = registryreadops.decodeElements(mappedregistry, registryaccess_registrydata.key(), registryaccess_registrydata.codec());
 
-        dataresult.error().ifPresent((partialresult) -> {
-            RegistryAccess.LOGGER.error("Error loading registry data: {}", partialresult.message());
-        });
+        dataresult.error().ifPresent((partialresult) -> RegistryAccess.LOGGER.error("Error loading registry data: {}", partialresult.message()));
     }
 
     public static final class RegistryHolder extends RegistryAccess {
@@ -173,16 +160,12 @@
         public static final Codec<RegistryAccess.RegistryHolder> NETWORK_CODEC = makeNetworkCodec();
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
+        // PistonMC - Fix decompile errors
         private static <E> Codec<RegistryAccess.RegistryHolder> makeNetworkCodec() {
-            Codec codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-            Codec codec1 = codec.partialDispatch("type", (mappedregistry) -> {
-                return DataResult.success(mappedregistry.key());
-            }, (resourcekey) -> {
-                return getNetworkCodec(resourcekey).map((codec2) -> {
-                    return MappedRegistry.networkCodec(resourcekey, Lifecycle.experimental(), codec2);
-                });
-            });
-            UnboundedMapCodec unboundedmapcodec = Codec.unboundedMap(codec, codec1);
+            Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
+            Codec<MappedRegistry<E>> codec1 = codec.partialDispatch("type", (mappedregistry) -> DataResult.success(mappedregistry.key()),
+                    (resourcekey) -> getNetworkCodec(resourcekey).map((codec2) -> MappedRegistry.networkCodec(resourcekey, Lifecycle.experimental(), codec2)));
+            UnboundedMapCodec<ResourceKey<? extends Registry<E>>, MappedRegistry<E>> unboundedmapcodec = Codec.unboundedMap(codec, codec1);
 
             return captureMap(unboundedmapcodec);
         }
@@ -203,23 +186,24 @@
             });
         }
 
+        // PistonMC - Fix decompile errors
         public RegistryHolder() {
-            this((Map) RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
+            this(RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
         }
 
         private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
             this.registries = map;
         }
 
-        private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourcekey) {
-            return new MappedRegistry<>(resourcekey, Lifecycle.stable());
+        // PistonMC - Fix decompile errors
+        private static <E> MappedRegistry<E> createRegistry(ResourceKey<? extends Registry<?>> resourcekey) {
+            return new MappedRegistry<E>((ResourceKey<? extends Registry<E>>) resourcekey, Lifecycle.stable());
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourcekey) {
-            return Optional.ofNullable(this.registries.get(resourcekey)).map((mappedregistry) -> {
-                return mappedregistry;
-            });
+            return Optional.ofNullable(this.registries.get(resourcekey)).map((mappedregistry) -> (MappedRegistry<E>) mappedregistry);
         }
     }
 
Index: net/minecraft/server/PlayerAdvancements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
--- a/net/minecraft/server/PlayerAdvancements.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/PlayerAdvancements.java	(date 1611645202463)
@@ -117,24 +117,17 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private void ensureAllVisible() {
-        ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.advancements.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-
-            if (((AdvancementProgress) entry.getValue()).isDone()) {
+        ArrayList<Advancement> arraylist = Lists.newArrayList();
+        for(Entry<Advancement, AdvancementProgress> entry : this.advancements.entrySet()) {
+            if (entry.getValue().isDone()) {
                 arraylist.add(entry.getKey());
                 this.progressChanged.add(entry.getKey());
             }
         }
 
-        iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            Advancement advancement = (Advancement) iterator.next();
-
+        for(Advancement advancement : arraylist) {
             this.ensureVisibility(advancement);
         }
 
@@ -154,57 +147,34 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private void load(ServerAdvancementManager serveradvancementmanager) {
         if (this.file.isFile()) {
-            try {
-                JsonReader jsonreader = new JsonReader(new StringReader(Files.toString(this.file, StandardCharsets.UTF_8)));
-                Throwable throwable = null;
-
-                try {
-                    jsonreader.setLenient(false);
-                    Dynamic dynamic = new Dynamic(JsonOps.INSTANCE, Streams.parse(jsonreader));
+            try(JsonReader jsonreader = new JsonReader(new StringReader(Files.toString(this.file, StandardCharsets.UTF_8)))) {
+                jsonreader.setLenient(false);
+                Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, Streams.parse(jsonreader));
 
-                    if (!dynamic.get("DataVersion").asNumber().result().isPresent()) {
-                        dynamic = dynamic.set("DataVersion", dynamic.createInt(1343));
-                    }
+                if (!dynamic.get("DataVersion").asNumber().result().isPresent()) {
+                    dynamic = dynamic.set("DataVersion", dynamic.createInt(1343));
+                }
 
-                    dynamic = this.dataFixer.update(DataFixTypes.ADVANCEMENTS.getType(), dynamic, dynamic.get("DataVersion").asInt(0), SharedConstants.getCurrentVersion().getWorldVersion());
-                    dynamic = dynamic.remove("DataVersion");
-                    Map map = (Map) PlayerAdvancements.GSON.getAdapter(PlayerAdvancements.TYPE_TOKEN).fromJsonTree((JsonElement) dynamic.getValue());
+                dynamic = this.dataFixer.update(DataFixTypes.ADVANCEMENTS.getType(), dynamic, dynamic.get("DataVersion").asInt(0), SharedConstants.getCurrentVersion().getWorldVersion());
+                dynamic = dynamic.remove("DataVersion");
+                Map<ResourceLocation, AdvancementProgress> map = PlayerAdvancements.GSON.getAdapter(PlayerAdvancements.TYPE_TOKEN).fromJsonTree(dynamic.getValue());
 
-                    if (map == null) {
-                        throw new JsonParseException("Found null for advancements");
-                    }
+                if (map == null) {
+                    throw new JsonParseException("Found null for advancements");
+                }
 
-                    Stream stream = map.entrySet().stream().sorted(Comparator.comparing(Entry::getValue));
-                    Iterator iterator = ((List) stream.collect(Collectors.toList())).iterator();
-
-                    while (iterator.hasNext()) {
-                        Entry entry = (Entry) iterator.next();
-                        Advancement advancement = serveradvancementmanager.getAdvancement((ResourceLocation) entry.getKey());
+                Stream<Entry<ResourceLocation, AdvancementProgress>> stream = map.entrySet().stream().sorted(Comparator.comparing(Entry::getValue));
+                for(Entry<ResourceLocation, AdvancementProgress> entry : stream.collect(Collectors.toList())) {
+                    Advancement advancement = serveradvancementmanager.getAdvancement(entry.getKey());
 
-                        if (advancement == null) {
-                            PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.file);
-                        } else {
-                            this.startProgress(advancement, (AdvancementProgress) entry.getValue());
-                        }
-                    }
-                } catch (Throwable throwable1) {
-                    throwable = throwable1;
-                    throw throwable1;
-                } finally {
-                    if (jsonreader != null) {
-                        if (throwable != null) {
-                            try {
-                                jsonreader.close();
-                            } catch (Throwable throwable2) {
-                                throwable.addSuppressed(throwable2);
-                            }
-                        } else {
-                            jsonreader.close();
-                        }
+                    if (advancement == null) {
+                        PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.file);
+                    } else {
+                        this.startProgress(advancement, entry.getValue());
                     }
-
                 }
             } catch (JsonParseException jsonparseexception) {
                 PlayerAdvancements.LOGGER.error("Couldn't parse player advancements in {}", this.file, jsonparseexception);
Index: net/minecraft/world/level/lighting/LayerLightSectionStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
--- a/net/minecraft/world/level/lighting/LayerLightSectionStorage.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/lighting/LayerLightSectionStorage.java	(date 1611604039604)
@@ -362,9 +362,10 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     protected void swapSectionMap() {
         if (!this.changedSections.isEmpty()) {
-            DataLayerStorageMap datalayerstoragemap = this.updatingSectionData.copy();
+            M datalayerstoragemap = this.updatingSectionData.copy();
 
             datalayerstoragemap.disableCache();
             this.visibleSectionData = datalayerstoragemap;
Index: net/minecraft/world/level/TickNextTickData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/TickNextTickData.java b/net/minecraft/world/level/TickNextTickData.java
--- a/net/minecraft/world/level/TickNextTickData.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/TickNextTickData.java	(date 1611648888644)
@@ -38,14 +38,9 @@
         return this.pos.hashCode();
     }
 
+    // PistonMC - Fix decompile errors
     public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-        return Comparator.comparingLong((ticknexttickdata) -> {
-            return ticknexttickdata.triggerTick;
-        }).thenComparing((ticknexttickdata) -> {
-            return ticknexttickdata.priority;
-        }).thenComparingLong((ticknexttickdata) -> {
-            return ticknexttickdata.c;
-        });
+        return Comparator.<TickNextTickData<T>>comparingLong((ticknexttickdata) -> ticknexttickdata.triggerTick).thenComparing((ticknexttickdata) -> ticknexttickdata.priority).thenComparingLong((ticknexttickdata) -> ticknexttickdata.c);
     }
 
     public String toString() {
Index: net/minecraft/stats/StatFormatter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/stats/StatFormatter.java b/net/minecraft/stats/StatFormatter.java
--- a/net/minecraft/stats/StatFormatter.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/stats/StatFormatter.java	(date 1611506325945)
@@ -6,37 +6,56 @@
 import java.util.Locale;
 import net.minecraft.Util;
 
+// PistonMC - Fix decompile errors
 public interface StatFormatter {
 
     DecimalFormat DECIMAL_FORMAT = (DecimalFormat) Util.make(new DecimalFormat("########0.00"), (decimalformat) -> {
         decimalformat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
     });
-    StatFormatter DEFAULT;
-    StatFormatter DIVIDE_BY_TEN;
-    StatFormatter DISTANCE;
-    StatFormatter TIME;
-
-    static {
-        NumberFormat numberformat = NumberFormat.getIntegerInstance(Locale.US);
-
-        DEFAULT = numberformat::format;
-        DIVIDE_BY_TEN = (i) -> {
-            return StatFormatter.DECIMAL_FORMAT.format((double) i * 0.1D);
-        };
-        DISTANCE = (i) -> {
-            double d0 = (double) i / 100.0D;
-            double d1 = d0 / 1000.0D;
+    // PistonMC - Add initialization
+    StatFormatter DEFAULT = NumberFormat.getIntegerInstance(Locale.US)::format;
+    StatFormatter DIVIDE_BY_TEN = (i) -> StatFormatter.DECIMAL_FORMAT.format(i * 0.1D);
+    StatFormatter DISTANCE = (i) -> {
+        double d0 = i / 100.0D;
+        double d1 = d0 / 1000.0D;
 
-            return d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " km" : (d0 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d0) + " m" : i + " cm");
-        };
-        TIME = (i) -> {
-            double d0 = (double) i / 20.0D;
-            double d1 = d0 / 60.0D;
-            double d2 = d1 / 60.0D;
-            double d3 = d2 / 24.0D;
-            double d4 = d3 / 365.0D;
+        return d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " km" : (d0 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d0) + " m" : i + " cm");
+    };
+    StatFormatter TIME = (i) -> {
+        double d0 = i / 20.0D;
+        double d1 = d0 / 60.0D;
+        double d2 = d1 / 60.0D;
+        double d3 = d2 / 24.0D;
+        double d4 = d3 / 365.0D;
 
-            return d4 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d4) + " y" : (d3 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d3) + " d" : (d2 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d2) + " h" : (d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " m" : d0 + " s")));
-        };
-    }
+        return d4 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d4) + " y" : (d3 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d3) + " d" : (d2 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d2) + " h" : (d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " m" : d0 + " s")));
+    };
+
+    // PistonMC - Add missing indy method
+    String format(int i);
+
+    // PistonMC - Remove disallowed static block in interface
+//    static {
+//        NumberFormat numberformat = NumberFormat.getIntegerInstance(Locale.US);
+//
+//        DEFAULT = numberformat::format;
+//        DIVIDE_BY_TEN = (i) -> {
+//            return StatFormatter.DECIMAL_FORMAT.format((double) i * 0.1D);
+//        };
+//        DISTANCE = (i) -> {
+//            double d0 = (double) i / 100.0D;
+//            double d1 = d0 / 1000.0D;
+//
+//            return d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " km" : (d0 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d0) + " m" : i + " cm");
+//        };
+//        TIME = (i) -> {
+//            double d0 = (double) i / 20.0D;
+//            double d1 = d0 / 60.0D;
+//            double d2 = d1 / 60.0D;
+//            double d3 = d2 / 24.0D;
+//            double d4 = d3 / 365.0D;
+//
+//            return d4 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d4) + " y" : (d3 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d3) + " d" : (d2 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d2) + " h" : (d1 > 0.5D ? StatFormatter.DECIMAL_FORMAT.format(d1) + " m" : d0 + " s")));
+//        };
+//    }
 }
Index: net/minecraft/world/level/biome/BiomeGenerationSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/biome/BiomeGenerationSettings.java b/net/minecraft/world/level/biome/BiomeGenerationSettings.java
--- a/net/minecraft/world/level/biome/BiomeGenerationSettings.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/biome/BiomeGenerationSettings.java	(date 1611645202540)
@@ -35,32 +35,25 @@
     public static final BiomeGenerationSettings EMPTY = new BiomeGenerationSettings(() -> {
         return SurfaceBuilders.NOPE;
     }, ImmutableMap.of(), ImmutableList.of(), ImmutableList.of());
+    // PistonMC - Fix decompile errors
     public static final MapCodec<BiomeGenerationSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        RecordCodecBuilder recordcodecbuilder = ConfiguredSurfaceBuilder.CODEC.fieldOf("surface_builder").forGetter((biomegenerationsettings) -> {
-            return biomegenerationsettings.surfaceBuilder;
-        });
-        Codec codec = GenerationStep.Carving.CODEC;
-        Codec codec1 = ConfiguredWorldCarver.LIST_CODEC;
+        RecordCodecBuilder<BiomeGenerationSettings, Supplier<ConfiguredSurfaceBuilder<?>>> recordcodecbuilder = ConfiguredSurfaceBuilder.CODEC.fieldOf("surface_builder").forGetter((biomegenerationsettings) -> biomegenerationsettings.surfaceBuilder);
+        Codec<GenerationStep.Carving> codec = GenerationStep.Carving.CODEC;
+        Codec<List<Supplier<ConfiguredWorldCarver<?>>>> codec1 = ConfiguredWorldCarver.LIST_CODEC;
         Logger logger = BiomeGenerationSettings.LOGGER;
 
-        logger.getClass();
-        RecordCodecBuilder recordcodecbuilder1 = Codec.simpleMap(codec, codec1.promotePartial(Util.prefix("Carver: ", logger::error)), StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter((biomegenerationsettings) -> {
-            return biomegenerationsettings.carvers;
-        });
+//        logger.getClass();
+        RecordCodecBuilder<BiomeGenerationSettings, Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>>> recordcodecbuilder1 = Codec.simpleMap(codec, codec1.promotePartial(Util.prefix("Carver: ", logger::error)), StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter((biomegenerationsettings) -> biomegenerationsettings.carvers);
 
-        codec1 = ConfiguredFeature.LIST_CODEC;
+        Codec<List<Supplier<ConfiguredFeature<?, ?>>>> codec2 = ConfiguredFeature.LIST_CODEC;
         logger = BiomeGenerationSettings.LOGGER;
-        logger.getClass();
-        RecordCodecBuilder recordcodecbuilder2 = codec1.promotePartial(Util.prefix("Feature: ", logger::error)).listOf().fieldOf("features").forGetter((biomegenerationsettings) -> {
-            return biomegenerationsettings.features;
-        });
-        Codec codec2 = ConfiguredStructureFeature.LIST_CODEC;
+//        logger.getClass();
+        RecordCodecBuilder<BiomeGenerationSettings, List<List<Supplier<ConfiguredFeature<?, ?>>>>> recordcodecbuilder2 = codec2.promotePartial(Util.prefix("Feature: ", logger::error)).listOf().fieldOf("features").forGetter((biomegenerationsettings) -> biomegenerationsettings.features);
+        Codec<List<Supplier<ConfiguredStructureFeature<?, ?>>>> codec3 = ConfiguredStructureFeature.LIST_CODEC;
         Logger logger1 = BiomeGenerationSettings.LOGGER;
 
-        logger1.getClass();
-        return instance.group(recordcodecbuilder, recordcodecbuilder1, recordcodecbuilder2, codec2.promotePartial(Util.prefix("Structure start: ", logger1::error)).fieldOf("starts").forGetter((biomegenerationsettings) -> {
-            return biomegenerationsettings.structureStarts;
-        })).apply(instance, BiomeGenerationSettings::new);
+//        logger1.getClass();
+        return instance.group(recordcodecbuilder, recordcodecbuilder1, recordcodecbuilder2, codec3.promotePartial(Util.prefix("Structure start: ", logger1::error)).fieldOf("starts").forGetter((biomegenerationsettings) -> biomegenerationsettings.structureStarts)).apply(instance, BiomeGenerationSettings::new);
     });
     private final Supplier<ConfiguredSurfaceBuilder<?>> surfaceBuilder;
     private final Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> carvers;
@@ -146,12 +139,9 @@
             return this;
         }
 
+        // PistonMC - Fix decompile errors
         public <C extends CarverConfiguration> BiomeGenerationSettings.Builder addCarver(GenerationStep.Carving generationstep_carving, ConfiguredWorldCarver<C> configuredworldcarver) {
-            ((List) this.carvers.computeIfAbsent(generationstep_carving, (generationstep_carving1) -> {
-                return Lists.newArrayList();
-            })).add(() -> {
-                return configuredworldcarver;
-            });
+            this.carvers.computeIfAbsent(generationstep_carving, (generationstep_carving1) -> Lists.newArrayList()).add(() -> configuredworldcarver);
             return this;
         }
 
Index: net/minecraft/stats/ServerRecipeBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/stats/ServerRecipeBook.java b/net/minecraft/stats/ServerRecipeBook.java
--- a/net/minecraft/stats/ServerRecipeBook.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/stats/ServerRecipeBook.java	(date 1611645202534)
@@ -110,13 +110,14 @@
         this.loadRecipes(listtag1, this::addHighlight, recipemanager);
     }
 
+    // PistonMC - Fix decompile errors
     private void loadRecipes(ListTag listtag, Consumer<Recipe<?>> consumer, RecipeManager recipemanager) {
         for (int i = 0; i < listtag.size(); ++i) {
             String s = listtag.getString(i);
 
             try {
                 ResourceLocation resourcelocation = new ResourceLocation(s);
-                Optional optional = recipemanager.byKey(resourcelocation);
+                Optional<? extends Recipe<?>> optional = recipemanager.byKey(resourcelocation);
 
                 if (!optional.isPresent()) {
                     ServerRecipeBook.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", resourcelocation);
Index: net/minecraft/data/models/model/ModelTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/models/model/ModelTemplate.java b/net/minecraft/data/models/model/ModelTemplate.java
--- a/net/minecraft/data/models/model/ModelTemplate.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/models/model/ModelTemplate.java	(date 1611662945854)
@@ -39,21 +39,18 @@
         return this.create(ModelLocationUtils.getModelLocation(block, s), texturemapping, biconsumer);
     }
 
+    // PistonMC - Fix decompile errors
     public ResourceLocation create(ResourceLocation resourcelocation, TextureMapping texturemapping, BiConsumer<ResourceLocation, Supplier<JsonElement>> biconsumer) {
-        Map map = this.createMap(texturemapping);
+        Map<TextureSlot, ResourceLocation> map = this.createMap(texturemapping);
 
         biconsumer.accept(resourcelocation, () -> {
             JsonObject jsonobject = new JsonObject();
 
-            this.model.ifPresent((resourcelocation1) -> {
-                jsonobject.addProperty("parent", resourcelocation1.toString());
-            });
+            this.model.ifPresent((resourcelocation1) -> jsonobject.addProperty("parent", resourcelocation1.toString()));
             if (!map.isEmpty()) {
                 JsonObject jsonobject1 = new JsonObject();
 
-                map.forEach((textureslot, resourcelocation1) -> {
-                    jsonobject1.addProperty(textureslot.getId(), resourcelocation1.toString());
-                });
+                map.forEach((textureslot, resourcelocation1) -> jsonobject1.addProperty(textureslot.getId(), resourcelocation1.toString()));
                 jsonobject.add("textures", jsonobject1);
             }
 
Index: net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
--- a/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java	(date 1611656676995)
@@ -27,23 +27,8 @@
 public class MultiNoiseBiomeSource extends BiomeSource {
 
     private static final MultiNoiseBiomeSource.NoiseParameters DEFAULT_NOISE_PARAMETERS = new MultiNoiseBiomeSource.NoiseParameters(-7, ImmutableList.of(1.0D, 1.0D));
-    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.seed;
-        }), RecordCodecBuilder.create((instance1) -> {
-            return instance1.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instance1, Pair::of);
-        }).listOf().fieldOf("biomes").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.parameters;
-        }), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.temperatureParams;
-        }), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.humidityParams;
-        }), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.altitudeParams;
-        }), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multinoisebiomesource) -> {
-            return multinoisebiomesource.weirdnessParams;
-        })).apply(instance, MultiNoiseBiomeSource::new);
-    });
+    // PistonMC - Fix decompile errors
+    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.LONG.fieldOf("seed").forGetter((multinoisebiomesource) -> multinoisebiomesource.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create((instance1) -> instance1.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instance1, Pair::of)).listOf().fieldOf("biomes").forGetter((multinoisebiomesource) -> multinoisebiomesource.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multinoisebiomesource) -> multinoisebiomesource.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multinoisebiomesource) -> multinoisebiomesource.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multinoisebiomesource) -> multinoisebiomesource.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multinoisebiomesource) -> multinoisebiomesource.weirdnessParams)).apply(instance, MultiNoiseBiomeSource::new));
     public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap((either) -> {
         return (MultiNoiseBiomeSource) either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity());
     }, (multinoisebiomesource) -> {
@@ -145,15 +130,8 @@
 
     static final class PresetInstance {
 
-        public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-            return instance.group(ResourceLocation.CODEC.flatXmap((resourcelocation) -> {
-                return (DataResult) Optional.ofNullable(MultiNoiseBiomeSource.Preset.BY_NAME.get(resourcelocation)).map(DataResult::success).orElseGet(() -> {
-                    return DataResult.error("Unknown preset: " + resourcelocation);
-                });
-            }, (multinoisebiomesource_preset) -> {
-                return DataResult.success(multinoisebiomesource_preset.name);
-            }).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(MultiNoiseBiomeSource.PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::seed)).apply(instance, instance.stable(MultiNoiseBiomeSource.PresetInstance::new));
-        });
+        // PistonMC - Fix decompile errors
+        public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.flatXmap((resourcelocation) -> Optional.ofNullable(Preset.BY_NAME.get(resourcelocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourcelocation)), (multinoisebiomesource_preset) -> DataResult.success(multinoisebiomesource_preset.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(instance, instance.stable(PresetInstance::new)));
         private final MultiNoiseBiomeSource.Preset preset;
         private final Registry<Biome> biomes;
         private final long seed;
Index: net/minecraft/stats/ServerStatsCounter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/stats/ServerStatsCounter.java b/net/minecraft/stats/ServerStatsCounter.java
--- a/net/minecraft/stats/ServerStatsCounter.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/stats/ServerStatsCounter.java	(date 1611645202529)
@@ -157,14 +157,15 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private <T> Optional<Stat<T>> getStat(StatType<T> stattype, String s) {
-        Optional optional = Optional.ofNullable(ResourceLocation.tryParse(s));
-        Registry registry = stattype.getRegistry();
+        Optional<ResourceLocation> optional = Optional.ofNullable(ResourceLocation.tryParse(s));
+        Registry<T> registry = stattype.getRegistry();
 
-        registry.getClass();
-        optional = optional.flatMap(registry::getOptional);
-        stattype.getClass();
-        return optional.map(stattype::get);
+//        registry.getClass();
+        Optional<T> optional1 = optional.flatMap(registry::getOptional);
+//        stattype.getClass();
+        return optional1.map(stattype::get);
     }
 
     private static CompoundTag fromJson(JsonObject jsonobject) {
@@ -189,26 +190,18 @@
         return compoundtag;
     }
 
+    // PistonMC - Fix decompile errors
     protected String toJson() {
-        HashMap hashmap = Maps.newHashMap();
-        ObjectIterator objectiterator = this.stats.object2IntEntrySet().iterator();
+        HashMap<StatType<?>, JsonObject> hashmap = Maps.newHashMap();
+        for(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<Stat<?>> it_unimi_dsi_fastutil_objects_object2intmap_entry : this.stats.object2IntEntrySet()) {
+            Stat<?> stat = it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
 
-        while (objectiterator.hasNext()) {
-            it.unimi.dsi.fastutil.objects.Object2IntMap.Entry it_unimi_dsi_fastutil_objects_object2intmap_entry = (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry) objectiterator.next();
-            Stat stat = (Stat) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
-
-            ((JsonObject) hashmap.computeIfAbsent(stat.getType(), (stattype) -> {
-                return new JsonObject();
-            })).addProperty(getKey(stat).toString(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue());
+            hashmap.computeIfAbsent(stat.getType(), (stattype) -> new JsonObject()).addProperty(getKey(stat).toString(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue());
         }
 
         JsonObject jsonobject = new JsonObject();
-        Iterator iterator = hashmap.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-
-            jsonobject.add(Registry.STAT_TYPE.getKey(entry.getKey()).toString(), (JsonElement) entry.getValue());
+        for(Entry<StatType<?>, JsonObject> entry : hashmap.entrySet()) {
+            jsonobject.add(Registry.STAT_TYPE.getKey(entry.getKey()).toString(), entry.getValue());
         }
 
         JsonObject jsonobject1 = new JsonObject();
Index: net/minecraft/world/item/SpawnEggItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/item/SpawnEggItem.java b/net/minecraft/world/item/SpawnEggItem.java
--- a/net/minecraft/world/item/SpawnEggItem.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/item/SpawnEggItem.java	(date 1611663355824)
@@ -147,37 +147,37 @@
         return this.defaultType;
     }
 
+    // PistonMC - Fix decompile errors
     public Optional<Mob> spawnOffspringFromSpawnEgg(Player player, Mob mob, EntityType<? extends Mob> entitytype, ServerLevel serverlevel, Vec3 vec3, ItemStack itemstack) {
         if (!this.spawnsEntity(itemstack.getTag(), entitytype)) {
             return Optional.empty();
         } else {
-            Object object;
+            Mob mob1;
 
             if (mob instanceof AgableMob) {
-                object = ((AgableMob) mob).getBreedOffspring(serverlevel, (AgableMob) mob);
+                mob1 = ((AgableMob) mob).getBreedOffspring(serverlevel, (AgableMob) mob);
             } else {
-                object = (Mob) entitytype.create(serverlevel);
+                mob1 = entitytype.create(serverlevel);
             }
 
-            if (object == null) {
+            if (mob1 == null) {
                 return Optional.empty();
-            } else {
-                ((Mob) object).setBaby(true);
-                if (!((Mob) object).isBaby()) {
-                    return Optional.empty();
-                } else {
-                    ((Mob) object).moveTo(vec3.x(), vec3.y(), vec3.z(), 0.0F, 0.0F);
-                    serverlevel.addFreshEntityWithPassengers((Entity) object);
-                    if (itemstack.hasCustomHoverName()) {
-                        ((Mob) object).setCustomName(itemstack.getHoverName());
-                    }
+            }
+            mob1.setBaby(true);
+            if (!mob1.isBaby()) {
+                return Optional.empty();
+            } else {
+                mob1.moveTo(vec3.x(), vec3.y(), vec3.z(), 0.0F, 0.0F);
+                serverlevel.addFreshEntityWithPassengers(mob1);
+                if (itemstack.hasCustomHoverName()) {
+                    mob1.setCustomName(itemstack.getHoverName());
+                }
 
-                    if (!player.abilities.instabuild) {
-                        itemstack.shrink(1);
-                    }
+                if (!player.abilities.instabuild) {
+                    itemstack.shrink(1);
+                }
 
-                    return Optional.of(object);
-                }
+                return Optional.of(mob1);
             }
         }
     }
Index: net/minecraft/data/structures/SnbtToNbt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/structures/SnbtToNbt.java b/net/minecraft/data/structures/SnbtToNbt.java
--- a/net/minecraft/data/structures/SnbtToNbt.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/structures/SnbtToNbt.java	(date 1611660380174)
@@ -57,27 +57,16 @@
         return compoundtag1;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void run(HashCache hashcache) throws IOException {
         Path path = this.generator.getOutputFolder();
-        ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.generator.getInputFolders().iterator();
-
-        while (iterator.hasNext()) {
-            Path path1 = (Path) iterator.next();
-
-            Files.walk(path1).filter((path2) -> {
-                return path2.toString().endsWith(".snbt");
-            }).forEach((path2) -> {
-                arraylist.add(CompletableFuture.supplyAsync(() -> {
-                    return this.readStructure(path2, this.getName(path1, path2));
-                }, Util.backgroundExecutor()));
-            });
+        ArrayList<CompletableFuture<TaskResult>> arraylist = Lists.newArrayList();
+        for(Path path1 : this.generator.getInputFolders()) {
+            Files.walk(path1).filter((path2) -> path2.toString().endsWith(".snbt")).forEach((path2) -> arraylist.add(CompletableFuture.supplyAsync(() -> this.readStructure(path2, this.getName(path1, path2)), Util.backgroundExecutor())));
         }
 
-        ((List) Util.sequence(arraylist).join()).stream().filter(Objects::nonNull).forEach((snbttonbt_taskresult) -> {
-            this.storeStructureIfChanged(hashcache, snbttonbt_taskresult, path);
-        });
+        Util.sequence(arraylist).join().stream().filter(Objects::nonNull).forEach((snbttonbt_taskresult) -> this.storeStructureIfChanged(hashcache, snbttonbt_taskresult, path));
     }
 
     @Override
Index: net/minecraft/util/LazyLoadedValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/LazyLoadedValue.java b/net/minecraft/util/LazyLoadedValue.java
--- a/net/minecraft/util/LazyLoadedValue.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/LazyLoadedValue.java	(date 1611572742691)
@@ -11,8 +11,9 @@
         this.factory = supplier;
     }
 
+    // PistonMC - Fix decompile errors
     public T get() {
-        Supplier supplier = this.factory;
+        Supplier<T> supplier = this.factory;
 
         if (supplier != null) {
             this.value = supplier.get();
Index: net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java b/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
--- a/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java	(date 1611660380262)
@@ -16,11 +16,12 @@
     private int nextId;
     private int size;
 
+    // PistonMC - Fix decompile errors
     public CrudeIncrementalIntIdentityHashBiMap(int i) {
         i = (int) ((float) i / 0.8F);
-        this.keys = (Object[]) (new Object[i]);
+        this.keys = (K[]) new Object[i];
         this.values = new int[i];
-        this.byId = (Object[]) (new Object[i]);
+        this.byId = (K[]) new Object[i];
     }
 
     @Override
@@ -53,13 +54,14 @@
         return this.nextId;
     }
 
+    // PistonMC - Fix decompile errors
     private void grow(int i) {
-        Object[] aobject = this.keys;
+        K[] aobject = this.keys;
         int[] aint = this.values;
 
-        this.keys = (Object[]) (new Object[i]);
+        this.keys = (K[]) new Object[i];
         this.values = new int[i];
-        this.byId = (Object[]) (new Object[i]);
+        this.byId = (K[]) new Object[i];
         this.nextId = 0;
         this.size = 0;
 
Index: net/minecraft/data/tags/EntityTypeTagsProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/tags/EntityTypeTagsProvider.java b/net/minecraft/data/tags/EntityTypeTagsProvider.java
--- a/net/minecraft/data/tags/EntityTypeTagsProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/tags/EntityTypeTagsProvider.java	(date 1611502998539)
@@ -15,11 +15,12 @@
 
     @Override
     protected void addTags() {
-        this.tag(EntityTypeTags.SKELETONS).add((Object[])(EntityType.SKELETON, EntityType.STRAY, EntityType.WITHER_SKELETON));
-        this.tag(EntityTypeTags.RAIDERS).add((Object[])(EntityType.EVOKER, EntityType.PILLAGER, EntityType.RAVAGER, EntityType.VINDICATOR, EntityType.ILLUSIONER, EntityType.WITCH));
-        this.tag(EntityTypeTags.BEEHIVE_INHABITORS).add((Object)EntityType.BEE);
-        this.tag(EntityTypeTags.ARROWS).add((Object[])(EntityType.ARROW, EntityType.SPECTRAL_ARROW));
-        this.tag(EntityTypeTags.IMPACT_PROJECTILES).addTag(EntityTypeTags.ARROWS).add((Object[])(EntityType.SNOWBALL, EntityType.FIREBALL, EntityType.SMALL_FIREBALL, EntityType.EGG, EntityType.TRIDENT, EntityType.DRAGON_FIREBALL, EntityType.WITHER_SKULL));
+        // PistonMC - Fix decompile errors
+        this.tag(EntityTypeTags.SKELETONS).add(EntityType.SKELETON, EntityType.STRAY, EntityType.WITHER_SKELETON);
+        this.tag(EntityTypeTags.RAIDERS).add(EntityType.EVOKER, EntityType.PILLAGER, EntityType.RAVAGER, EntityType.VINDICATOR, EntityType.ILLUSIONER, EntityType.WITCH);
+        this.tag(EntityTypeTags.BEEHIVE_INHABITORS).add(EntityType.BEE);
+        this.tag(EntityTypeTags.ARROWS).add(EntityType.ARROW, EntityType.SPECTRAL_ARROW);
+        this.tag(EntityTypeTags.IMPACT_PROJECTILES).addTag(EntityTypeTags.ARROWS).add(EntityType.SNOWBALL, EntityType.FIREBALL, EntityType.SMALL_FIREBALL, EntityType.EGG, EntityType.TRIDENT, EntityType.DRAGON_FIREBALL, EntityType.WITHER_SKULL);
     }
 
     @Override
Index: net/minecraft/util/FormattedCharSink.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/FormattedCharSink.java b/net/minecraft/util/FormattedCharSink.java
--- a/net/minecraft/util/FormattedCharSink.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/FormattedCharSink.java	(date 1611647344925)
@@ -1,4 +1,7 @@
 package net.minecraft.util;
 
+// PistonMC - Fix decompile errors - Add missing indy method
 @FunctionalInterface
-public interface FormattedCharSink {}
+public interface FormattedCharSink {
+    boolean accept(int i, net.minecraft.network.chat.Style style, int j);
+}
Index: net/minecraft/data/tags/BlockTagsProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/tags/BlockTagsProvider.java b/net/minecraft/data/tags/BlockTagsProvider.java
--- a/net/minecraft/data/tags/BlockTagsProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/tags/BlockTagsProvider.java	(date 1611505280601)
@@ -16,92 +16,93 @@
 
     @Override
     protected void addTags() {
-        this.tag(BlockTags.WOOL).add((Object[])(Blocks.WHITE_WOOL, Blocks.ORANGE_WOOL, Blocks.MAGENTA_WOOL, Blocks.LIGHT_BLUE_WOOL, Blocks.YELLOW_WOOL, Blocks.LIME_WOOL, Blocks.PINK_WOOL, Blocks.GRAY_WOOL, Blocks.LIGHT_GRAY_WOOL, Blocks.CYAN_WOOL, Blocks.PURPLE_WOOL, Blocks.BLUE_WOOL, Blocks.BROWN_WOOL, Blocks.GREEN_WOOL, Blocks.RED_WOOL, Blocks.BLACK_WOOL));
-        this.tag(BlockTags.PLANKS).add((Object[])(Blocks.OAK_PLANKS, Blocks.SPRUCE_PLANKS, Blocks.BIRCH_PLANKS, Blocks.JUNGLE_PLANKS, Blocks.ACACIA_PLANKS, Blocks.DARK_OAK_PLANKS, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS));
-        this.tag(BlockTags.STONE_BRICKS).add((Object[])(Blocks.STONE_BRICKS, Blocks.MOSSY_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS));
-        this.tag(BlockTags.WOODEN_BUTTONS).add((Object[])(Blocks.OAK_BUTTON, Blocks.SPRUCE_BUTTON, Blocks.BIRCH_BUTTON, Blocks.JUNGLE_BUTTON, Blocks.ACACIA_BUTTON, Blocks.DARK_OAK_BUTTON, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON));
-        this.tag(BlockTags.BUTTONS).addTag(BlockTags.WOODEN_BUTTONS).add((Object)Blocks.STONE_BUTTON).add((Object)Blocks.POLISHED_BLACKSTONE_BUTTON);
-        this.tag(BlockTags.CARPETS).add((Object[])(Blocks.WHITE_CARPET, Blocks.ORANGE_CARPET, Blocks.MAGENTA_CARPET, Blocks.LIGHT_BLUE_CARPET, Blocks.YELLOW_CARPET, Blocks.LIME_CARPET, Blocks.PINK_CARPET, Blocks.GRAY_CARPET, Blocks.LIGHT_GRAY_CARPET, Blocks.CYAN_CARPET, Blocks.PURPLE_CARPET, Blocks.BLUE_CARPET, Blocks.BROWN_CARPET, Blocks.GREEN_CARPET, Blocks.RED_CARPET, Blocks.BLACK_CARPET));
-        this.tag(BlockTags.WOODEN_DOORS).add((Object[])(Blocks.OAK_DOOR, Blocks.SPRUCE_DOOR, Blocks.BIRCH_DOOR, Blocks.JUNGLE_DOOR, Blocks.ACACIA_DOOR, Blocks.DARK_OAK_DOOR, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR));
-        this.tag(BlockTags.WOODEN_STAIRS).add((Object[])(Blocks.OAK_STAIRS, Blocks.SPRUCE_STAIRS, Blocks.BIRCH_STAIRS, Blocks.JUNGLE_STAIRS, Blocks.ACACIA_STAIRS, Blocks.DARK_OAK_STAIRS, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS));
-        this.tag(BlockTags.WOODEN_SLABS).add((Object[])(Blocks.OAK_SLAB, Blocks.SPRUCE_SLAB, Blocks.BIRCH_SLAB, Blocks.JUNGLE_SLAB, Blocks.ACACIA_SLAB, Blocks.DARK_OAK_SLAB, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB));
-        this.tag(BlockTags.WOODEN_FENCES).add((Object[])(Blocks.OAK_FENCE, Blocks.ACACIA_FENCE, Blocks.DARK_OAK_FENCE, Blocks.SPRUCE_FENCE, Blocks.BIRCH_FENCE, Blocks.JUNGLE_FENCE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE));
-        this.tag(BlockTags.DOORS).addTag(BlockTags.WOODEN_DOORS).add((Object)Blocks.IRON_DOOR);
-        this.tag(BlockTags.SAPLINGS).add((Object[])(Blocks.OAK_SAPLING, Blocks.SPRUCE_SAPLING, Blocks.BIRCH_SAPLING, Blocks.JUNGLE_SAPLING, Blocks.ACACIA_SAPLING, Blocks.DARK_OAK_SAPLING));
-        this.tag(BlockTags.DARK_OAK_LOGS).add((Object[])(Blocks.DARK_OAK_LOG, Blocks.DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_LOG, Blocks.STRIPPED_DARK_OAK_WOOD));
-        this.tag(BlockTags.OAK_LOGS).add((Object[])(Blocks.OAK_LOG, Blocks.OAK_WOOD, Blocks.STRIPPED_OAK_LOG, Blocks.STRIPPED_OAK_WOOD));
-        this.tag(BlockTags.ACACIA_LOGS).add((Object[])(Blocks.ACACIA_LOG, Blocks.ACACIA_WOOD, Blocks.STRIPPED_ACACIA_LOG, Blocks.STRIPPED_ACACIA_WOOD));
-        this.tag(BlockTags.BIRCH_LOGS).add((Object[])(Blocks.BIRCH_LOG, Blocks.BIRCH_WOOD, Blocks.STRIPPED_BIRCH_LOG, Blocks.STRIPPED_BIRCH_WOOD));
-        this.tag(BlockTags.JUNGLE_LOGS).add((Object[])(Blocks.JUNGLE_LOG, Blocks.JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_LOG, Blocks.STRIPPED_JUNGLE_WOOD));
-        this.tag(BlockTags.SPRUCE_LOGS).add((Object[])(Blocks.SPRUCE_LOG, Blocks.SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_LOG, Blocks.STRIPPED_SPRUCE_WOOD));
-        this.tag(BlockTags.CRIMSON_STEMS).add((Object[])(Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE));
-        this.tag(BlockTags.WARPED_STEMS).add((Object[])(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE));
+        // PistonMC - Fix decompile errors
+        this.tag(BlockTags.WOOL).add(Blocks.WHITE_WOOL, Blocks.ORANGE_WOOL, Blocks.MAGENTA_WOOL, Blocks.LIGHT_BLUE_WOOL, Blocks.YELLOW_WOOL, Blocks.LIME_WOOL, Blocks.PINK_WOOL, Blocks.GRAY_WOOL, Blocks.LIGHT_GRAY_WOOL, Blocks.CYAN_WOOL, Blocks.PURPLE_WOOL, Blocks.BLUE_WOOL, Blocks.BROWN_WOOL, Blocks.GREEN_WOOL, Blocks.RED_WOOL, Blocks.BLACK_WOOL);
+        this.tag(BlockTags.PLANKS).add(Blocks.OAK_PLANKS, Blocks.SPRUCE_PLANKS, Blocks.BIRCH_PLANKS, Blocks.JUNGLE_PLANKS, Blocks.ACACIA_PLANKS, Blocks.DARK_OAK_PLANKS, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS);
+        this.tag(BlockTags.STONE_BRICKS).add(Blocks.STONE_BRICKS, Blocks.MOSSY_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS);
+        this.tag(BlockTags.WOODEN_BUTTONS).add(Blocks.OAK_BUTTON, Blocks.SPRUCE_BUTTON, Blocks.BIRCH_BUTTON, Blocks.JUNGLE_BUTTON, Blocks.ACACIA_BUTTON, Blocks.DARK_OAK_BUTTON, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON);
+        this.tag(BlockTags.BUTTONS).addTag(BlockTags.WOODEN_BUTTONS).add(Blocks.STONE_BUTTON).add(Blocks.POLISHED_BLACKSTONE_BUTTON);
+        this.tag(BlockTags.CARPETS).add(Blocks.WHITE_CARPET, Blocks.ORANGE_CARPET, Blocks.MAGENTA_CARPET, Blocks.LIGHT_BLUE_CARPET, Blocks.YELLOW_CARPET, Blocks.LIME_CARPET, Blocks.PINK_CARPET, Blocks.GRAY_CARPET, Blocks.LIGHT_GRAY_CARPET, Blocks.CYAN_CARPET, Blocks.PURPLE_CARPET, Blocks.BLUE_CARPET, Blocks.BROWN_CARPET, Blocks.GREEN_CARPET, Blocks.RED_CARPET, Blocks.BLACK_CARPET);
+        this.tag(BlockTags.WOODEN_DOORS).add(Blocks.OAK_DOOR, Blocks.SPRUCE_DOOR, Blocks.BIRCH_DOOR, Blocks.JUNGLE_DOOR, Blocks.ACACIA_DOOR, Blocks.DARK_OAK_DOOR, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR);
+        this.tag(BlockTags.WOODEN_STAIRS).add(Blocks.OAK_STAIRS, Blocks.SPRUCE_STAIRS, Blocks.BIRCH_STAIRS, Blocks.JUNGLE_STAIRS, Blocks.ACACIA_STAIRS, Blocks.DARK_OAK_STAIRS, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS);
+        this.tag(BlockTags.WOODEN_SLABS).add(Blocks.OAK_SLAB, Blocks.SPRUCE_SLAB, Blocks.BIRCH_SLAB, Blocks.JUNGLE_SLAB, Blocks.ACACIA_SLAB, Blocks.DARK_OAK_SLAB, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB);
+        this.tag(BlockTags.WOODEN_FENCES).add(Blocks.OAK_FENCE, Blocks.ACACIA_FENCE, Blocks.DARK_OAK_FENCE, Blocks.SPRUCE_FENCE, Blocks.BIRCH_FENCE, Blocks.JUNGLE_FENCE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE);
+        this.tag(BlockTags.DOORS).addTag(BlockTags.WOODEN_DOORS).add(Blocks.IRON_DOOR);
+        this.tag(BlockTags.SAPLINGS).add(Blocks.OAK_SAPLING, Blocks.SPRUCE_SAPLING, Blocks.BIRCH_SAPLING, Blocks.JUNGLE_SAPLING, Blocks.ACACIA_SAPLING, Blocks.DARK_OAK_SAPLING);
+        this.tag(BlockTags.DARK_OAK_LOGS).add(Blocks.DARK_OAK_LOG, Blocks.DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_LOG, Blocks.STRIPPED_DARK_OAK_WOOD);
+        this.tag(BlockTags.OAK_LOGS).add(Blocks.OAK_LOG, Blocks.OAK_WOOD, Blocks.STRIPPED_OAK_LOG, Blocks.STRIPPED_OAK_WOOD);
+        this.tag(BlockTags.ACACIA_LOGS).add(Blocks.ACACIA_LOG, Blocks.ACACIA_WOOD, Blocks.STRIPPED_ACACIA_LOG, Blocks.STRIPPED_ACACIA_WOOD);
+        this.tag(BlockTags.BIRCH_LOGS).add(Blocks.BIRCH_LOG, Blocks.BIRCH_WOOD, Blocks.STRIPPED_BIRCH_LOG, Blocks.STRIPPED_BIRCH_WOOD);
+        this.tag(BlockTags.JUNGLE_LOGS).add(Blocks.JUNGLE_LOG, Blocks.JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_LOG, Blocks.STRIPPED_JUNGLE_WOOD);
+        this.tag(BlockTags.SPRUCE_LOGS).add(Blocks.SPRUCE_LOG, Blocks.SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_LOG, Blocks.STRIPPED_SPRUCE_WOOD);
+        this.tag(BlockTags.CRIMSON_STEMS).add(Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE);
+        this.tag(BlockTags.WARPED_STEMS).add(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE);
         this.tag(BlockTags.LOGS_THAT_BURN).addTag(BlockTags.DARK_OAK_LOGS).addTag(BlockTags.OAK_LOGS).addTag(BlockTags.ACACIA_LOGS).addTag(BlockTags.BIRCH_LOGS).addTag(BlockTags.JUNGLE_LOGS).addTag(BlockTags.SPRUCE_LOGS);
         this.tag(BlockTags.LOGS).addTag(BlockTags.LOGS_THAT_BURN).addTag(BlockTags.CRIMSON_STEMS).addTag(BlockTags.WARPED_STEMS);
-        this.tag(BlockTags.ANVIL).add((Object[])(Blocks.ANVIL, Blocks.CHIPPED_ANVIL, Blocks.DAMAGED_ANVIL));
-        this.tag(BlockTags.SMALL_FLOWERS).add((Object[])(Blocks.DANDELION, Blocks.POPPY, Blocks.BLUE_ORCHID, Blocks.ALLIUM, Blocks.AZURE_BLUET, Blocks.RED_TULIP, Blocks.ORANGE_TULIP, Blocks.WHITE_TULIP, Blocks.PINK_TULIP, Blocks.OXEYE_DAISY, Blocks.CORNFLOWER, Blocks.LILY_OF_THE_VALLEY, Blocks.WITHER_ROSE));
-        this.tag(BlockTags.ENDERMAN_HOLDABLE).addTag(BlockTags.SMALL_FLOWERS).add((Object[])(Blocks.GRASS_BLOCK, Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.PODZOL, Blocks.SAND, Blocks.RED_SAND, Blocks.GRAVEL, Blocks.BROWN_MUSHROOM, Blocks.RED_MUSHROOM, Blocks.TNT, Blocks.CACTUS, Blocks.CLAY, Blocks.PUMPKIN, Blocks.CARVED_PUMPKIN, Blocks.MELON, Blocks.MYCELIUM, Blocks.CRIMSON_FUNGUS, Blocks.CRIMSON_NYLIUM, Blocks.CRIMSON_ROOTS, Blocks.WARPED_FUNGUS, Blocks.WARPED_NYLIUM, Blocks.WARPED_ROOTS));
-        this.tag(BlockTags.FLOWER_POTS).add((Object[])(Blocks.FLOWER_POT, Blocks.POTTED_POPPY, Blocks.POTTED_BLUE_ORCHID, Blocks.POTTED_ALLIUM, Blocks.POTTED_AZURE_BLUET, Blocks.POTTED_RED_TULIP, Blocks.POTTED_ORANGE_TULIP, Blocks.POTTED_WHITE_TULIP, Blocks.POTTED_PINK_TULIP, Blocks.POTTED_OXEYE_DAISY, Blocks.POTTED_DANDELION, Blocks.POTTED_OAK_SAPLING, Blocks.POTTED_SPRUCE_SAPLING, Blocks.POTTED_BIRCH_SAPLING, Blocks.POTTED_JUNGLE_SAPLING, Blocks.POTTED_ACACIA_SAPLING, Blocks.POTTED_DARK_OAK_SAPLING, Blocks.POTTED_RED_MUSHROOM, Blocks.POTTED_BROWN_MUSHROOM, Blocks.POTTED_DEAD_BUSH, Blocks.POTTED_FERN, Blocks.POTTED_CACTUS, Blocks.POTTED_CORNFLOWER, Blocks.POTTED_LILY_OF_THE_VALLEY, Blocks.POTTED_WITHER_ROSE, Blocks.POTTED_BAMBOO, Blocks.POTTED_CRIMSON_FUNGUS, Blocks.POTTED_WARPED_FUNGUS, Blocks.POTTED_CRIMSON_ROOTS, Blocks.POTTED_WARPED_ROOTS));
-        this.tag(BlockTags.BANNERS).add((Object[])(Blocks.WHITE_BANNER, Blocks.ORANGE_BANNER, Blocks.MAGENTA_BANNER, Blocks.LIGHT_BLUE_BANNER, Blocks.YELLOW_BANNER, Blocks.LIME_BANNER, Blocks.PINK_BANNER, Blocks.GRAY_BANNER, Blocks.LIGHT_GRAY_BANNER, Blocks.CYAN_BANNER, Blocks.PURPLE_BANNER, Blocks.BLUE_BANNER, Blocks.BROWN_BANNER, Blocks.GREEN_BANNER, Blocks.RED_BANNER, Blocks.BLACK_BANNER, Blocks.WHITE_WALL_BANNER, Blocks.ORANGE_WALL_BANNER, Blocks.MAGENTA_WALL_BANNER, Blocks.LIGHT_BLUE_WALL_BANNER, Blocks.YELLOW_WALL_BANNER, Blocks.LIME_WALL_BANNER, Blocks.PINK_WALL_BANNER, Blocks.GRAY_WALL_BANNER, Blocks.LIGHT_GRAY_WALL_BANNER, Blocks.CYAN_WALL_BANNER, Blocks.PURPLE_WALL_BANNER, Blocks.BLUE_WALL_BANNER, Blocks.BROWN_WALL_BANNER, Blocks.GREEN_WALL_BANNER, Blocks.RED_WALL_BANNER, Blocks.BLACK_WALL_BANNER));
-        this.tag(BlockTags.WOODEN_PRESSURE_PLATES).add((Object[])(Blocks.OAK_PRESSURE_PLATE, Blocks.SPRUCE_PRESSURE_PLATE, Blocks.BIRCH_PRESSURE_PLATE, Blocks.JUNGLE_PRESSURE_PLATE, Blocks.ACACIA_PRESSURE_PLATE, Blocks.DARK_OAK_PRESSURE_PLATE, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE));
-        this.tag(BlockTags.STONE_PRESSURE_PLATES).add((Object[])(Blocks.STONE_PRESSURE_PLATE, Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE));
-        this.tag(BlockTags.PRESSURE_PLATES).add((Object[])(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE)).addTag(BlockTags.WOODEN_PRESSURE_PLATES).addTag(BlockTags.STONE_PRESSURE_PLATES);
-        this.tag(BlockTags.STAIRS).addTag(BlockTags.WOODEN_STAIRS).add((Object[])(Blocks.COBBLESTONE_STAIRS, Blocks.SANDSTONE_STAIRS, Blocks.NETHER_BRICK_STAIRS, Blocks.STONE_BRICK_STAIRS, Blocks.BRICK_STAIRS, Blocks.PURPUR_STAIRS, Blocks.QUARTZ_STAIRS, Blocks.RED_SANDSTONE_STAIRS, Blocks.PRISMARINE_BRICK_STAIRS, Blocks.PRISMARINE_STAIRS, Blocks.DARK_PRISMARINE_STAIRS, Blocks.POLISHED_GRANITE_STAIRS, Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Blocks.MOSSY_STONE_BRICK_STAIRS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.MOSSY_COBBLESTONE_STAIRS, Blocks.END_STONE_BRICK_STAIRS, Blocks.STONE_STAIRS, Blocks.SMOOTH_SANDSTONE_STAIRS, Blocks.SMOOTH_QUARTZ_STAIRS, Blocks.GRANITE_STAIRS, Blocks.ANDESITE_STAIRS, Blocks.RED_NETHER_BRICK_STAIRS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.DIORITE_STAIRS, Blocks.BLACKSTONE_STAIRS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.POLISHED_BLACKSTONE_STAIRS));
-        this.tag(BlockTags.SLABS).addTag(BlockTags.WOODEN_SLABS).add((Object[])(Blocks.STONE_SLAB, Blocks.SMOOTH_STONE_SLAB, Blocks.STONE_BRICK_SLAB, Blocks.SANDSTONE_SLAB, Blocks.PURPUR_SLAB, Blocks.QUARTZ_SLAB, Blocks.RED_SANDSTONE_SLAB, Blocks.BRICK_SLAB, Blocks.COBBLESTONE_SLAB, Blocks.NETHER_BRICK_SLAB, Blocks.PETRIFIED_OAK_SLAB, Blocks.PRISMARINE_SLAB, Blocks.PRISMARINE_BRICK_SLAB, Blocks.DARK_PRISMARINE_SLAB, Blocks.POLISHED_GRANITE_SLAB, Blocks.SMOOTH_RED_SANDSTONE_SLAB, Blocks.MOSSY_STONE_BRICK_SLAB, Blocks.POLISHED_DIORITE_SLAB, Blocks.MOSSY_COBBLESTONE_SLAB, Blocks.END_STONE_BRICK_SLAB, Blocks.SMOOTH_SANDSTONE_SLAB, Blocks.SMOOTH_QUARTZ_SLAB, Blocks.GRANITE_SLAB, Blocks.ANDESITE_SLAB, Blocks.RED_NETHER_BRICK_SLAB, Blocks.POLISHED_ANDESITE_SLAB, Blocks.DIORITE_SLAB, Blocks.CUT_SANDSTONE_SLAB, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE_SLAB));
-        this.tag(BlockTags.WALLS).add((Object[])(Blocks.COBBLESTONE_WALL, Blocks.MOSSY_COBBLESTONE_WALL, Blocks.BRICK_WALL, Blocks.PRISMARINE_WALL, Blocks.RED_SANDSTONE_WALL, Blocks.MOSSY_STONE_BRICK_WALL, Blocks.GRANITE_WALL, Blocks.STONE_BRICK_WALL, Blocks.NETHER_BRICK_WALL, Blocks.ANDESITE_WALL, Blocks.RED_NETHER_BRICK_WALL, Blocks.SANDSTONE_WALL, Blocks.END_STONE_BRICK_WALL, Blocks.DIORITE_WALL, Blocks.BLACKSTONE_WALL, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.POLISHED_BLACKSTONE_WALL));
-        this.tag(BlockTags.CORAL_PLANTS).add((Object[])(Blocks.TUBE_CORAL, Blocks.BRAIN_CORAL, Blocks.BUBBLE_CORAL, Blocks.FIRE_CORAL, Blocks.HORN_CORAL));
-        this.tag(BlockTags.CORALS).addTag(BlockTags.CORAL_PLANTS).add((Object[])(Blocks.TUBE_CORAL_FAN, Blocks.BRAIN_CORAL_FAN, Blocks.BUBBLE_CORAL_FAN, Blocks.FIRE_CORAL_FAN, Blocks.HORN_CORAL_FAN));
-        this.tag(BlockTags.WALL_CORALS).add((Object[])(Blocks.TUBE_CORAL_WALL_FAN, Blocks.BRAIN_CORAL_WALL_FAN, Blocks.BUBBLE_CORAL_WALL_FAN, Blocks.FIRE_CORAL_WALL_FAN, Blocks.HORN_CORAL_WALL_FAN));
-        this.tag(BlockTags.SAND).add((Object[])(Blocks.SAND, Blocks.RED_SAND));
-        this.tag(BlockTags.RAILS).add((Object[])(Blocks.RAIL, Blocks.POWERED_RAIL, Blocks.DETECTOR_RAIL, Blocks.ACTIVATOR_RAIL));
-        this.tag(BlockTags.CORAL_BLOCKS).add((Object[])(Blocks.TUBE_CORAL_BLOCK, Blocks.BRAIN_CORAL_BLOCK, Blocks.BUBBLE_CORAL_BLOCK, Blocks.FIRE_CORAL_BLOCK, Blocks.HORN_CORAL_BLOCK));
-        this.tag(BlockTags.ICE).add((Object[])(Blocks.ICE, Blocks.PACKED_ICE, Blocks.BLUE_ICE, Blocks.FROSTED_ICE));
-        this.tag(BlockTags.VALID_SPAWN).add((Object[])(Blocks.GRASS_BLOCK, Blocks.PODZOL));
-        this.tag(BlockTags.LEAVES).add((Object[])(Blocks.JUNGLE_LEAVES, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.ACACIA_LEAVES, Blocks.BIRCH_LEAVES));
-        this.tag(BlockTags.IMPERMEABLE).add((Object[])(Blocks.GLASS, Blocks.WHITE_STAINED_GLASS, Blocks.ORANGE_STAINED_GLASS, Blocks.MAGENTA_STAINED_GLASS, Blocks.LIGHT_BLUE_STAINED_GLASS, Blocks.YELLOW_STAINED_GLASS, Blocks.LIME_STAINED_GLASS, Blocks.PINK_STAINED_GLASS, Blocks.GRAY_STAINED_GLASS, Blocks.LIGHT_GRAY_STAINED_GLASS, Blocks.CYAN_STAINED_GLASS, Blocks.PURPLE_STAINED_GLASS, Blocks.BLUE_STAINED_GLASS, Blocks.BROWN_STAINED_GLASS, Blocks.GREEN_STAINED_GLASS, Blocks.RED_STAINED_GLASS, Blocks.BLACK_STAINED_GLASS));
-        this.tag(BlockTags.WOODEN_TRAPDOORS).add((Object[])(Blocks.ACACIA_TRAPDOOR, Blocks.BIRCH_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.JUNGLE_TRAPDOOR, Blocks.OAK_TRAPDOOR, Blocks.SPRUCE_TRAPDOOR, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR));
-        this.tag(BlockTags.TRAPDOORS).addTag(BlockTags.WOODEN_TRAPDOORS).add((Object)Blocks.IRON_TRAPDOOR);
-        this.tag(BlockTags.UNDERWATER_BONEMEALS).add((Object)Blocks.SEAGRASS).addTag(BlockTags.CORALS).addTag(BlockTags.WALL_CORALS);
-        this.tag(BlockTags.BAMBOO_PLANTABLE_ON).addTag(BlockTags.SAND).add((Object[])(Blocks.BAMBOO, Blocks.BAMBOO_SAPLING, Blocks.GRAVEL, Blocks.DIRT, Blocks.GRASS_BLOCK, Blocks.PODZOL, Blocks.COARSE_DIRT, Blocks.MYCELIUM));
-        this.tag(BlockTags.STANDING_SIGNS).add((Object[])(Blocks.OAK_SIGN, Blocks.SPRUCE_SIGN, Blocks.BIRCH_SIGN, Blocks.ACACIA_SIGN, Blocks.JUNGLE_SIGN, Blocks.DARK_OAK_SIGN, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN));
-        this.tag(BlockTags.WALL_SIGNS).add((Object[])(Blocks.OAK_WALL_SIGN, Blocks.SPRUCE_WALL_SIGN, Blocks.BIRCH_WALL_SIGN, Blocks.ACACIA_WALL_SIGN, Blocks.JUNGLE_WALL_SIGN, Blocks.DARK_OAK_WALL_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN));
+        this.tag(BlockTags.ANVIL).add(Blocks.ANVIL, Blocks.CHIPPED_ANVIL, Blocks.DAMAGED_ANVIL);
+        this.tag(BlockTags.SMALL_FLOWERS).add(Blocks.DANDELION, Blocks.POPPY, Blocks.BLUE_ORCHID, Blocks.ALLIUM, Blocks.AZURE_BLUET, Blocks.RED_TULIP, Blocks.ORANGE_TULIP, Blocks.WHITE_TULIP, Blocks.PINK_TULIP, Blocks.OXEYE_DAISY, Blocks.CORNFLOWER, Blocks.LILY_OF_THE_VALLEY, Blocks.WITHER_ROSE);
+        this.tag(BlockTags.ENDERMAN_HOLDABLE).addTag(BlockTags.SMALL_FLOWERS).add(Blocks.GRASS_BLOCK, Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.PODZOL, Blocks.SAND, Blocks.RED_SAND, Blocks.GRAVEL, Blocks.BROWN_MUSHROOM, Blocks.RED_MUSHROOM, Blocks.TNT, Blocks.CACTUS, Blocks.CLAY, Blocks.PUMPKIN, Blocks.CARVED_PUMPKIN, Blocks.MELON, Blocks.MYCELIUM, Blocks.CRIMSON_FUNGUS, Blocks.CRIMSON_NYLIUM, Blocks.CRIMSON_ROOTS, Blocks.WARPED_FUNGUS, Blocks.WARPED_NYLIUM, Blocks.WARPED_ROOTS);
+        this.tag(BlockTags.FLOWER_POTS).add(Blocks.FLOWER_POT, Blocks.POTTED_POPPY, Blocks.POTTED_BLUE_ORCHID, Blocks.POTTED_ALLIUM, Blocks.POTTED_AZURE_BLUET, Blocks.POTTED_RED_TULIP, Blocks.POTTED_ORANGE_TULIP, Blocks.POTTED_WHITE_TULIP, Blocks.POTTED_PINK_TULIP, Blocks.POTTED_OXEYE_DAISY, Blocks.POTTED_DANDELION, Blocks.POTTED_OAK_SAPLING, Blocks.POTTED_SPRUCE_SAPLING, Blocks.POTTED_BIRCH_SAPLING, Blocks.POTTED_JUNGLE_SAPLING, Blocks.POTTED_ACACIA_SAPLING, Blocks.POTTED_DARK_OAK_SAPLING, Blocks.POTTED_RED_MUSHROOM, Blocks.POTTED_BROWN_MUSHROOM, Blocks.POTTED_DEAD_BUSH, Blocks.POTTED_FERN, Blocks.POTTED_CACTUS, Blocks.POTTED_CORNFLOWER, Blocks.POTTED_LILY_OF_THE_VALLEY, Blocks.POTTED_WITHER_ROSE, Blocks.POTTED_BAMBOO, Blocks.POTTED_CRIMSON_FUNGUS, Blocks.POTTED_WARPED_FUNGUS, Blocks.POTTED_CRIMSON_ROOTS, Blocks.POTTED_WARPED_ROOTS);
+        this.tag(BlockTags.BANNERS).add(Blocks.WHITE_BANNER, Blocks.ORANGE_BANNER, Blocks.MAGENTA_BANNER, Blocks.LIGHT_BLUE_BANNER, Blocks.YELLOW_BANNER, Blocks.LIME_BANNER, Blocks.PINK_BANNER, Blocks.GRAY_BANNER, Blocks.LIGHT_GRAY_BANNER, Blocks.CYAN_BANNER, Blocks.PURPLE_BANNER, Blocks.BLUE_BANNER, Blocks.BROWN_BANNER, Blocks.GREEN_BANNER, Blocks.RED_BANNER, Blocks.BLACK_BANNER, Blocks.WHITE_WALL_BANNER, Blocks.ORANGE_WALL_BANNER, Blocks.MAGENTA_WALL_BANNER, Blocks.LIGHT_BLUE_WALL_BANNER, Blocks.YELLOW_WALL_BANNER, Blocks.LIME_WALL_BANNER, Blocks.PINK_WALL_BANNER, Blocks.GRAY_WALL_BANNER, Blocks.LIGHT_GRAY_WALL_BANNER, Blocks.CYAN_WALL_BANNER, Blocks.PURPLE_WALL_BANNER, Blocks.BLUE_WALL_BANNER, Blocks.BROWN_WALL_BANNER, Blocks.GREEN_WALL_BANNER, Blocks.RED_WALL_BANNER, Blocks.BLACK_WALL_BANNER);
+        this.tag(BlockTags.WOODEN_PRESSURE_PLATES).add(Blocks.OAK_PRESSURE_PLATE, Blocks.SPRUCE_PRESSURE_PLATE, Blocks.BIRCH_PRESSURE_PLATE, Blocks.JUNGLE_PRESSURE_PLATE, Blocks.ACACIA_PRESSURE_PLATE, Blocks.DARK_OAK_PRESSURE_PLATE, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE);
+        this.tag(BlockTags.STONE_PRESSURE_PLATES).add(Blocks.STONE_PRESSURE_PLATE, Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE);
+        this.tag(BlockTags.PRESSURE_PLATES).add(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE).addTag(BlockTags.WOODEN_PRESSURE_PLATES).addTag(BlockTags.STONE_PRESSURE_PLATES);
+        this.tag(BlockTags.STAIRS).addTag(BlockTags.WOODEN_STAIRS).add(Blocks.COBBLESTONE_STAIRS, Blocks.SANDSTONE_STAIRS, Blocks.NETHER_BRICK_STAIRS, Blocks.STONE_BRICK_STAIRS, Blocks.BRICK_STAIRS, Blocks.PURPUR_STAIRS, Blocks.QUARTZ_STAIRS, Blocks.RED_SANDSTONE_STAIRS, Blocks.PRISMARINE_BRICK_STAIRS, Blocks.PRISMARINE_STAIRS, Blocks.DARK_PRISMARINE_STAIRS, Blocks.POLISHED_GRANITE_STAIRS, Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Blocks.MOSSY_STONE_BRICK_STAIRS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.MOSSY_COBBLESTONE_STAIRS, Blocks.END_STONE_BRICK_STAIRS, Blocks.STONE_STAIRS, Blocks.SMOOTH_SANDSTONE_STAIRS, Blocks.SMOOTH_QUARTZ_STAIRS, Blocks.GRANITE_STAIRS, Blocks.ANDESITE_STAIRS, Blocks.RED_NETHER_BRICK_STAIRS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.DIORITE_STAIRS, Blocks.BLACKSTONE_STAIRS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.POLISHED_BLACKSTONE_STAIRS);
+        this.tag(BlockTags.SLABS).addTag(BlockTags.WOODEN_SLABS).add(Blocks.STONE_SLAB, Blocks.SMOOTH_STONE_SLAB, Blocks.STONE_BRICK_SLAB, Blocks.SANDSTONE_SLAB, Blocks.PURPUR_SLAB, Blocks.QUARTZ_SLAB, Blocks.RED_SANDSTONE_SLAB, Blocks.BRICK_SLAB, Blocks.COBBLESTONE_SLAB, Blocks.NETHER_BRICK_SLAB, Blocks.PETRIFIED_OAK_SLAB, Blocks.PRISMARINE_SLAB, Blocks.PRISMARINE_BRICK_SLAB, Blocks.DARK_PRISMARINE_SLAB, Blocks.POLISHED_GRANITE_SLAB, Blocks.SMOOTH_RED_SANDSTONE_SLAB, Blocks.MOSSY_STONE_BRICK_SLAB, Blocks.POLISHED_DIORITE_SLAB, Blocks.MOSSY_COBBLESTONE_SLAB, Blocks.END_STONE_BRICK_SLAB, Blocks.SMOOTH_SANDSTONE_SLAB, Blocks.SMOOTH_QUARTZ_SLAB, Blocks.GRANITE_SLAB, Blocks.ANDESITE_SLAB, Blocks.RED_NETHER_BRICK_SLAB, Blocks.POLISHED_ANDESITE_SLAB, Blocks.DIORITE_SLAB, Blocks.CUT_SANDSTONE_SLAB, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE_SLAB);
+        this.tag(BlockTags.WALLS).add(Blocks.COBBLESTONE_WALL, Blocks.MOSSY_COBBLESTONE_WALL, Blocks.BRICK_WALL, Blocks.PRISMARINE_WALL, Blocks.RED_SANDSTONE_WALL, Blocks.MOSSY_STONE_BRICK_WALL, Blocks.GRANITE_WALL, Blocks.STONE_BRICK_WALL, Blocks.NETHER_BRICK_WALL, Blocks.ANDESITE_WALL, Blocks.RED_NETHER_BRICK_WALL, Blocks.SANDSTONE_WALL, Blocks.END_STONE_BRICK_WALL, Blocks.DIORITE_WALL, Blocks.BLACKSTONE_WALL, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.POLISHED_BLACKSTONE_WALL);
+        this.tag(BlockTags.CORAL_PLANTS).add(Blocks.TUBE_CORAL, Blocks.BRAIN_CORAL, Blocks.BUBBLE_CORAL, Blocks.FIRE_CORAL, Blocks.HORN_CORAL);
+        this.tag(BlockTags.CORALS).addTag(BlockTags.CORAL_PLANTS).add(Blocks.TUBE_CORAL_FAN, Blocks.BRAIN_CORAL_FAN, Blocks.BUBBLE_CORAL_FAN, Blocks.FIRE_CORAL_FAN, Blocks.HORN_CORAL_FAN);
+        this.tag(BlockTags.WALL_CORALS).add(Blocks.TUBE_CORAL_WALL_FAN, Blocks.BRAIN_CORAL_WALL_FAN, Blocks.BUBBLE_CORAL_WALL_FAN, Blocks.FIRE_CORAL_WALL_FAN, Blocks.HORN_CORAL_WALL_FAN);
+        this.tag(BlockTags.SAND).add(Blocks.SAND, Blocks.RED_SAND);
+        this.tag(BlockTags.RAILS).add(Blocks.RAIL, Blocks.POWERED_RAIL, Blocks.DETECTOR_RAIL, Blocks.ACTIVATOR_RAIL);
+        this.tag(BlockTags.CORAL_BLOCKS).add(Blocks.TUBE_CORAL_BLOCK, Blocks.BRAIN_CORAL_BLOCK, Blocks.BUBBLE_CORAL_BLOCK, Blocks.FIRE_CORAL_BLOCK, Blocks.HORN_CORAL_BLOCK);
+        this.tag(BlockTags.ICE).add(Blocks.ICE, Blocks.PACKED_ICE, Blocks.BLUE_ICE, Blocks.FROSTED_ICE);
+        this.tag(BlockTags.VALID_SPAWN).add(Blocks.GRASS_BLOCK, Blocks.PODZOL);
+        this.tag(BlockTags.LEAVES).add(Blocks.JUNGLE_LEAVES, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.ACACIA_LEAVES, Blocks.BIRCH_LEAVES);
+        this.tag(BlockTags.IMPERMEABLE).add(Blocks.GLASS, Blocks.WHITE_STAINED_GLASS, Blocks.ORANGE_STAINED_GLASS, Blocks.MAGENTA_STAINED_GLASS, Blocks.LIGHT_BLUE_STAINED_GLASS, Blocks.YELLOW_STAINED_GLASS, Blocks.LIME_STAINED_GLASS, Blocks.PINK_STAINED_GLASS, Blocks.GRAY_STAINED_GLASS, Blocks.LIGHT_GRAY_STAINED_GLASS, Blocks.CYAN_STAINED_GLASS, Blocks.PURPLE_STAINED_GLASS, Blocks.BLUE_STAINED_GLASS, Blocks.BROWN_STAINED_GLASS, Blocks.GREEN_STAINED_GLASS, Blocks.RED_STAINED_GLASS, Blocks.BLACK_STAINED_GLASS);
+        this.tag(BlockTags.WOODEN_TRAPDOORS).add(Blocks.ACACIA_TRAPDOOR, Blocks.BIRCH_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.JUNGLE_TRAPDOOR, Blocks.OAK_TRAPDOOR, Blocks.SPRUCE_TRAPDOOR, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR);
+        this.tag(BlockTags.TRAPDOORS).addTag(BlockTags.WOODEN_TRAPDOORS).add(Blocks.IRON_TRAPDOOR);
+        this.tag(BlockTags.UNDERWATER_BONEMEALS).add(Blocks.SEAGRASS).addTag(BlockTags.CORALS).addTag(BlockTags.WALL_CORALS);
+        this.tag(BlockTags.BAMBOO_PLANTABLE_ON).addTag(BlockTags.SAND).add(Blocks.BAMBOO, Blocks.BAMBOO_SAPLING, Blocks.GRAVEL, Blocks.DIRT, Blocks.GRASS_BLOCK, Blocks.PODZOL, Blocks.COARSE_DIRT, Blocks.MYCELIUM);
+        this.tag(BlockTags.STANDING_SIGNS).add(Blocks.OAK_SIGN, Blocks.SPRUCE_SIGN, Blocks.BIRCH_SIGN, Blocks.ACACIA_SIGN, Blocks.JUNGLE_SIGN, Blocks.DARK_OAK_SIGN, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN);
+        this.tag(BlockTags.WALL_SIGNS).add(Blocks.OAK_WALL_SIGN, Blocks.SPRUCE_WALL_SIGN, Blocks.BIRCH_WALL_SIGN, Blocks.ACACIA_WALL_SIGN, Blocks.JUNGLE_WALL_SIGN, Blocks.DARK_OAK_WALL_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN);
         this.tag(BlockTags.SIGNS).addTag(BlockTags.STANDING_SIGNS).addTag(BlockTags.WALL_SIGNS);
-        this.tag(BlockTags.BEDS).add((Object[])(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED));
-        this.tag(BlockTags.FENCES).addTag(BlockTags.WOODEN_FENCES).add((Object)Blocks.NETHER_BRICK_FENCE);
-        this.tag(BlockTags.DRAGON_IMMUNE).add((Object[])(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON, Blocks.OBSIDIAN, Blocks.CRYING_OBSIDIAN, Blocks.END_STONE, Blocks.IRON_BARS, Blocks.RESPAWN_ANCHOR));
-        this.tag(BlockTags.WITHER_IMMUNE).add((Object[])(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON));
-        this.tag(BlockTags.WITHER_SUMMON_BASE_BLOCKS).add((Object[])(Blocks.SOUL_SAND, Blocks.SOUL_SOIL));
-        this.tag(BlockTags.TALL_FLOWERS).add((Object[])(Blocks.SUNFLOWER, Blocks.LILAC, Blocks.PEONY, Blocks.ROSE_BUSH));
+        this.tag(BlockTags.BEDS).add(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED);
+        this.tag(BlockTags.FENCES).addTag(BlockTags.WOODEN_FENCES).add(Blocks.NETHER_BRICK_FENCE);
+        this.tag(BlockTags.DRAGON_IMMUNE).add(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON, Blocks.OBSIDIAN, Blocks.CRYING_OBSIDIAN, Blocks.END_STONE, Blocks.IRON_BARS, Blocks.RESPAWN_ANCHOR);
+        this.tag(BlockTags.WITHER_IMMUNE).add(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON);
+        this.tag(BlockTags.WITHER_SUMMON_BASE_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.TALL_FLOWERS).add(Blocks.SUNFLOWER, Blocks.LILAC, Blocks.PEONY, Blocks.ROSE_BUSH);
         this.tag(BlockTags.FLOWERS).addTag(BlockTags.SMALL_FLOWERS).addTag(BlockTags.TALL_FLOWERS);
-        this.tag(BlockTags.BEEHIVES).add((Object[])(Blocks.BEE_NEST, Blocks.BEEHIVE));
-        this.tag(BlockTags.CROPS).add((Object[])(Blocks.BEETROOTS, Blocks.CARROTS, Blocks.POTATOES, Blocks.WHEAT, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM));
-        this.tag(BlockTags.BEE_GROWABLES).addTag(BlockTags.CROPS).add((Object)Blocks.SWEET_BERRY_BUSH);
-        this.tag(BlockTags.SHULKER_BOXES).add((Object[])(Blocks.SHULKER_BOX, Blocks.BLACK_SHULKER_BOX, Blocks.BLUE_SHULKER_BOX, Blocks.BROWN_SHULKER_BOX, Blocks.CYAN_SHULKER_BOX, Blocks.GRAY_SHULKER_BOX, Blocks.GREEN_SHULKER_BOX, Blocks.LIGHT_BLUE_SHULKER_BOX, Blocks.LIGHT_GRAY_SHULKER_BOX, Blocks.LIME_SHULKER_BOX, Blocks.MAGENTA_SHULKER_BOX, Blocks.ORANGE_SHULKER_BOX, Blocks.PINK_SHULKER_BOX, Blocks.PURPLE_SHULKER_BOX, Blocks.RED_SHULKER_BOX, Blocks.WHITE_SHULKER_BOX, Blocks.YELLOW_SHULKER_BOX));
-        this.tag(BlockTags.PORTALS).add((Object[])(Blocks.NETHER_PORTAL, Blocks.END_PORTAL, Blocks.END_GATEWAY));
-        this.tag(BlockTags.FIRE).add((Object[])(Blocks.FIRE, Blocks.SOUL_FIRE));
-        this.tag(BlockTags.NYLIUM).add((Object[])(Blocks.CRIMSON_NYLIUM, Blocks.WARPED_NYLIUM));
-        this.tag(BlockTags.WART_BLOCKS).add((Object[])(Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK));
-        this.tag(BlockTags.BEACON_BASE_BLOCKS).add((Object[])(Blocks.NETHERITE_BLOCK, Blocks.EMERALD_BLOCK, Blocks.DIAMOND_BLOCK, Blocks.GOLD_BLOCK, Blocks.IRON_BLOCK));
-        this.tag(BlockTags.SOUL_SPEED_BLOCKS).add((Object[])(Blocks.SOUL_SAND, Blocks.SOUL_SOIL));
-        this.tag(BlockTags.WALL_POST_OVERRIDE).add((Object[])(Blocks.TORCH, Blocks.SOUL_TORCH, Blocks.REDSTONE_TORCH, Blocks.TRIPWIRE)).addTag(BlockTags.SIGNS).addTag(BlockTags.BANNERS).addTag(BlockTags.PRESSURE_PLATES);
-        this.tag(BlockTags.CLIMBABLE).add((Object[])(Blocks.LADDER, Blocks.VINE, Blocks.SCAFFOLDING, Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT, Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT));
-        this.tag(BlockTags.PIGLIN_REPELLENTS).add((Object)Blocks.SOUL_FIRE).add((Object)Blocks.SOUL_TORCH).add((Object)Blocks.SOUL_LANTERN).add((Object)Blocks.SOUL_WALL_TORCH).add((Object)Blocks.SOUL_CAMPFIRE);
-        this.tag(BlockTags.HOGLIN_REPELLENTS).add((Object)Blocks.WARPED_FUNGUS).add((Object)Blocks.POTTED_WARPED_FUNGUS).add((Object)Blocks.NETHER_PORTAL).add((Object)Blocks.RESPAWN_ANCHOR);
-        this.tag(BlockTags.GOLD_ORES).add((Object[])(Blocks.GOLD_ORE, Blocks.NETHER_GOLD_ORE));
-        this.tag(BlockTags.SOUL_FIRE_BASE_BLOCKS).add((Object[])(Blocks.SOUL_SAND, Blocks.SOUL_SOIL));
-        this.tag(BlockTags.NON_FLAMMABLE_WOOD).add((Object[])(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE, Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN));
-        this.tag(BlockTags.STRIDER_WARM_BLOCKS).add((Object)Blocks.LAVA);
-        this.tag(BlockTags.CAMPFIRES).add((Object[])(Blocks.CAMPFIRE, Blocks.SOUL_CAMPFIRE));
-        this.tag(BlockTags.GUARDED_BY_PIGLINS).add((Object[])(Blocks.GOLD_BLOCK, Blocks.BARREL, Blocks.CHEST, Blocks.ENDER_CHEST, Blocks.GILDED_BLACKSTONE, Blocks.TRAPPED_CHEST)).addTag(BlockTags.SHULKER_BOXES).addTag(BlockTags.GOLD_ORES);
+        this.tag(BlockTags.BEEHIVES).add(Blocks.BEE_NEST, Blocks.BEEHIVE);
+        this.tag(BlockTags.CROPS).add(Blocks.BEETROOTS, Blocks.CARROTS, Blocks.POTATOES, Blocks.WHEAT, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM);
+        this.tag(BlockTags.BEE_GROWABLES).addTag(BlockTags.CROPS).add(Blocks.SWEET_BERRY_BUSH);
+        this.tag(BlockTags.SHULKER_BOXES).add(Blocks.SHULKER_BOX, Blocks.BLACK_SHULKER_BOX, Blocks.BLUE_SHULKER_BOX, Blocks.BROWN_SHULKER_BOX, Blocks.CYAN_SHULKER_BOX, Blocks.GRAY_SHULKER_BOX, Blocks.GREEN_SHULKER_BOX, Blocks.LIGHT_BLUE_SHULKER_BOX, Blocks.LIGHT_GRAY_SHULKER_BOX, Blocks.LIME_SHULKER_BOX, Blocks.MAGENTA_SHULKER_BOX, Blocks.ORANGE_SHULKER_BOX, Blocks.PINK_SHULKER_BOX, Blocks.PURPLE_SHULKER_BOX, Blocks.RED_SHULKER_BOX, Blocks.WHITE_SHULKER_BOX, Blocks.YELLOW_SHULKER_BOX);
+        this.tag(BlockTags.PORTALS).add(Blocks.NETHER_PORTAL, Blocks.END_PORTAL, Blocks.END_GATEWAY);
+        this.tag(BlockTags.FIRE).add(Blocks.FIRE, Blocks.SOUL_FIRE);
+        this.tag(BlockTags.NYLIUM).add(Blocks.CRIMSON_NYLIUM, Blocks.WARPED_NYLIUM);
+        this.tag(BlockTags.WART_BLOCKS).add(Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK);
+        this.tag(BlockTags.BEACON_BASE_BLOCKS).add(Blocks.NETHERITE_BLOCK, Blocks.EMERALD_BLOCK, Blocks.DIAMOND_BLOCK, Blocks.GOLD_BLOCK, Blocks.IRON_BLOCK);
+        this.tag(BlockTags.SOUL_SPEED_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.WALL_POST_OVERRIDE).add(Blocks.TORCH, Blocks.SOUL_TORCH, Blocks.REDSTONE_TORCH, Blocks.TRIPWIRE).addTag(BlockTags.SIGNS).addTag(BlockTags.BANNERS).addTag(BlockTags.PRESSURE_PLATES);
+        this.tag(BlockTags.CLIMBABLE).add(Blocks.LADDER, Blocks.VINE, Blocks.SCAFFOLDING, Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT, Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT);
+        this.tag(BlockTags.PIGLIN_REPELLENTS).add(Blocks.SOUL_FIRE).add(Blocks.SOUL_TORCH).add(Blocks.SOUL_LANTERN).add(Blocks.SOUL_WALL_TORCH).add(Blocks.SOUL_CAMPFIRE);
+        this.tag(BlockTags.HOGLIN_REPELLENTS).add(Blocks.WARPED_FUNGUS).add(Blocks.POTTED_WARPED_FUNGUS).add(Blocks.NETHER_PORTAL).add(Blocks.RESPAWN_ANCHOR);
+        this.tag(BlockTags.GOLD_ORES).add(Blocks.GOLD_ORE, Blocks.NETHER_GOLD_ORE);
+        this.tag(BlockTags.SOUL_FIRE_BASE_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.NON_FLAMMABLE_WOOD).add(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE, Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN);
+        this.tag(BlockTags.STRIDER_WARM_BLOCKS).add(Blocks.LAVA);
+        this.tag(BlockTags.CAMPFIRES).add(Blocks.CAMPFIRE, Blocks.SOUL_CAMPFIRE);
+        this.tag(BlockTags.GUARDED_BY_PIGLINS).add(Blocks.GOLD_BLOCK, Blocks.BARREL, Blocks.CHEST, Blocks.ENDER_CHEST, Blocks.GILDED_BLACKSTONE, Blocks.TRAPPED_CHEST).addTag(BlockTags.SHULKER_BOXES).addTag(BlockTags.GOLD_ORES);
         this.tag(BlockTags.PREVENT_MOB_SPAWNING_INSIDE).addTag(BlockTags.RAILS);
-        this.tag(BlockTags.FENCE_GATES).add((Object[])(Blocks.ACACIA_FENCE_GATE, Blocks.BIRCH_FENCE_GATE, Blocks.DARK_OAK_FENCE_GATE, Blocks.JUNGLE_FENCE_GATE, Blocks.OAK_FENCE_GATE, Blocks.SPRUCE_FENCE_GATE, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE));
+        this.tag(BlockTags.FENCE_GATES).add(Blocks.ACACIA_FENCE_GATE, Blocks.BIRCH_FENCE_GATE, Blocks.DARK_OAK_FENCE_GATE, Blocks.JUNGLE_FENCE_GATE, Blocks.OAK_FENCE_GATE, Blocks.SPRUCE_FENCE_GATE, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE);
         this.tag(BlockTags.UNSTABLE_BOTTOM_CENTER).addTag(BlockTags.FENCE_GATES);
-        this.tag(BlockTags.MUSHROOM_GROW_BLOCK).add((Object)Blocks.MYCELIUM).add((Object)Blocks.PODZOL).add((Object)Blocks.CRIMSON_NYLIUM).add((Object)Blocks.WARPED_NYLIUM);
-        this.tag(BlockTags.INFINIBURN_OVERWORLD).add((Object[])(Blocks.NETHERRACK, Blocks.MAGMA_BLOCK));
+        this.tag(BlockTags.MUSHROOM_GROW_BLOCK).add(Blocks.MYCELIUM).add(Blocks.PODZOL).add(Blocks.CRIMSON_NYLIUM).add(Blocks.WARPED_NYLIUM);
+        this.tag(BlockTags.INFINIBURN_OVERWORLD).add(Blocks.NETHERRACK, Blocks.MAGMA_BLOCK);
         this.tag(BlockTags.INFINIBURN_NETHER).addTag(BlockTags.INFINIBURN_OVERWORLD);
-        this.tag(BlockTags.INFINIBURN_END).addTag(BlockTags.INFINIBURN_OVERWORLD).add((Object)Blocks.BEDROCK);
-        this.tag(BlockTags.BASE_STONE_OVERWORLD).add((Object)Blocks.STONE).add((Object)Blocks.GRANITE).add((Object)Blocks.DIORITE).add((Object)Blocks.ANDESITE);
-        this.tag(BlockTags.BASE_STONE_NETHER).add((Object)Blocks.NETHERRACK).add((Object)Blocks.BASALT).add((Object)Blocks.BLACKSTONE);
+        this.tag(BlockTags.INFINIBURN_END).addTag(BlockTags.INFINIBURN_OVERWORLD).add(Blocks.BEDROCK);
+        this.tag(BlockTags.BASE_STONE_OVERWORLD).add(Blocks.STONE).add(Blocks.GRANITE).add(Blocks.DIORITE).add(Blocks.ANDESITE);
+        this.tag(BlockTags.BASE_STONE_NETHER).add(Blocks.NETHERRACK).add(Blocks.BASALT).add(Blocks.BLACKSTONE);
     }
 
     @Override
Index: net/minecraft/util/StringRepresentable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/StringRepresentable.java b/net/minecraft/util/StringRepresentable.java
--- a/net/minecraft/util/StringRepresentable.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/StringRepresentable.java	(date 1611565399221)
@@ -18,12 +18,11 @@
 
     String getSerializedName();
 
+    // PistonMC - Fix decompile errors
     static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> supplier, Function<? super String, ? extends E> function) {
-        Enum[] aenum = (Enum[]) supplier.get();
+        E[] aenum = supplier.get();
 
-        return fromStringResolver(Enum::ordinal, (i) -> {
-            return aenum[i];
-        }, function);
+        return fromStringResolver(Enum::ordinal, (i) -> aenum[i], function);
     }
 
     static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> tointfunction, final IntFunction<E> intfunction, final Function<? super String, ? extends E> function) {
@@ -54,18 +53,19 @@
         };
     }
 
+    // PistonMC - Fix decompile errors
     static Keyable keys(final StringRepresentable[] astringrepresentable) {
         return new Keyable() {
             public <T> Stream<T> keys(DynamicOps<T> dynamicops) {
                 if (dynamicops.compressMaps()) {
                     IntStream intstream = IntStream.range(0, astringrepresentable.length);
 
-                    dynamicops.getClass();
+//                    dynamicops.getClass();
                     return intstream.mapToObj(dynamicops::createInt);
                 } else {
-                    Stream stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
+                    Stream<String> stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
 
-                    dynamicops.getClass();
+//                    dynamicops.getClass();
                     return stream.map(dynamicops::createString);
                 }
             }
Index: net/minecraft/data/tags/TagsProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/tags/TagsProvider.java b/net/minecraft/data/tags/TagsProvider.java
--- a/net/minecraft/data/tags/TagsProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/tags/TagsProvider.java	(date 1611657623586)
@@ -40,62 +40,38 @@
 
     protected abstract void addTags();
 
+    // PistonMC - Fix decompile errors
     @Override
     public void run(HashCache hashcache) {
         this.builders.clear();
         this.addTags();
-        SetTag settag = SetTag.empty();
-        Function function = (resourcelocation) -> {
-            return this.builders.containsKey(resourcelocation) ? settag : null;
-        };
-        Function function1 = (resourcelocation) -> {
-            return this.registry.getOptional(resourcelocation).orElse((Object) null);
-        };
+        SetTag<T> settag = SetTag.empty();
+        Function<ResourceLocation, Tag<T>> function = (resourcelocation) -> this.builders.containsKey(resourcelocation) ? settag : null;
+        Function<ResourceLocation, T> function1 = (resourcelocation) -> this.registry.getOptional(resourcelocation).orElse(null);
 
         this.builders.forEach((resourcelocation, tag_builder) -> {
-            List list = (List) tag_builder.getUnresolvedEntries(function, function1).collect(Collectors.toList());
+            List<Tag.BuilderEntry> list = tag_builder.getUnresolvedEntries(function, function1).collect(Collectors.toList());
 
             if (!list.isEmpty()) {
                 throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", resourcelocation, list.stream().map(Objects::toString).collect(Collectors.joining(","))));
-            } else {
-                JsonObject jsonobject = tag_builder.serializeToJson();
-                Path path = this.getPath(resourcelocation);
+            }
+            JsonObject jsonobject = tag_builder.serializeToJson();
+            Path path = this.getPath(resourcelocation);
 
-                try {
-                    String s = TagsProvider.GSON.toJson(jsonobject);
-                    String s1 = TagsProvider.SHA1.hashUnencodedChars(s).toString();
+            try {
+                String s = TagsProvider.GSON.toJson(jsonobject);
+                String s1 = TagsProvider.SHA1.hashUnencodedChars(s).toString();
 
-                    if (!Objects.equals(hashcache.getHash(path), s1) || !Files.exists(path, new LinkOption[0])) {
-                        Files.createDirectories(path.getParent());
-                        BufferedWriter bufferedwriter = Files.newBufferedWriter(path);
-                        Throwable throwable = null;
-
-                        try {
-                            bufferedwriter.write(s);
-                        } catch (Throwable throwable1) {
-                            throwable = throwable1;
-                            throw throwable1;
-                        } finally {
-                            if (bufferedwriter != null) {
-                                if (throwable != null) {
-                                    try {
-                                        bufferedwriter.close();
-                                    } catch (Throwable throwable2) {
-                                        throwable.addSuppressed(throwable2);
-                                    }
-                                } else {
-                                    bufferedwriter.close();
-                                }
-                            }
-
-                        }
-                    }
+                if (!Objects.equals(hashcache.getHash(path), s1) || !Files.exists(path)) {
+                    Files.createDirectories(path.getParent());
+                    try(BufferedWriter bufferedwriter = Files.newBufferedWriter(path)) {
+                        bufferedwriter.write(s);
+                    }
+                }
 
-                    hashcache.putNew(path, s1);
-                } catch (IOException ioexception) {
-                    TagsProvider.LOGGER.error("Couldn't save tags to {}", path, ioexception);
-                }
-
+                hashcache.putNew(path, s1);
+            } catch (IOException ioexception) {
+                TagsProvider.LOGGER.error("Couldn't save tags to {}", path, ioexception);
             }
         });
     }
@@ -136,15 +112,14 @@
             return this;
         }
 
+        // PistonMC - Fix decompile errors
         @SafeVarargs
         public final TagsProvider.TagAppender<T> add(T... at) {
-            Stream stream = Stream.of(at);
-            Registry registry = this.registry;
+            Stream<T> stream = Stream.of(at);
+            Registry<T> registry = this.registry;
 
-            this.registry.getClass();
-            stream.map(registry::getKey).forEach((resourcelocation) -> {
-                this.builder.addElement(resourcelocation, this.source);
-            });
+//            this.registry.getClass();
+            stream.map(registry::getKey).forEach((resourcelocation) -> this.builder.addElement(resourcelocation, this.source));
             return this;
         }
     }
Index: net/minecraft/data/tags/ItemTagsProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/tags/ItemTagsProvider.java b/net/minecraft/data/tags/ItemTagsProvider.java
--- a/net/minecraft/data/tags/ItemTagsProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/tags/ItemTagsProvider.java	(date 1611502998546)
@@ -62,21 +62,22 @@
         this.copy(BlockTags.FLOWERS, ItemTags.FLOWERS);
         this.copy(BlockTags.GOLD_ORES, ItemTags.GOLD_ORES);
         this.copy(BlockTags.SOUL_FIRE_BASE_BLOCKS, ItemTags.SOUL_FIRE_BASE_BLOCKS);
-        this.tag(ItemTags.BANNERS).add((Object[])(Items.WHITE_BANNER, Items.ORANGE_BANNER, Items.MAGENTA_BANNER, Items.LIGHT_BLUE_BANNER, Items.YELLOW_BANNER, Items.LIME_BANNER, Items.PINK_BANNER, Items.GRAY_BANNER, Items.LIGHT_GRAY_BANNER, Items.CYAN_BANNER, Items.PURPLE_BANNER, Items.BLUE_BANNER, Items.BROWN_BANNER, Items.GREEN_BANNER, Items.RED_BANNER, Items.BLACK_BANNER));
-        this.tag(ItemTags.BOATS).add((Object[])(Items.OAK_BOAT, Items.SPRUCE_BOAT, Items.BIRCH_BOAT, Items.JUNGLE_BOAT, Items.ACACIA_BOAT, Items.DARK_OAK_BOAT));
-        this.tag(ItemTags.FISHES).add((Object[])(Items.COD, Items.COOKED_COD, Items.SALMON, Items.COOKED_SALMON, Items.PUFFERFISH, Items.TROPICAL_FISH));
+        // PistonMC - Fix decompile errors
+        this.tag(ItemTags.BANNERS).add(Items.WHITE_BANNER, Items.ORANGE_BANNER, Items.MAGENTA_BANNER, Items.LIGHT_BLUE_BANNER, Items.YELLOW_BANNER, Items.LIME_BANNER, Items.PINK_BANNER, Items.GRAY_BANNER, Items.LIGHT_GRAY_BANNER, Items.CYAN_BANNER, Items.PURPLE_BANNER, Items.BLUE_BANNER, Items.BROWN_BANNER, Items.GREEN_BANNER, Items.RED_BANNER, Items.BLACK_BANNER);
+        this.tag(ItemTags.BOATS).add(Items.OAK_BOAT, Items.SPRUCE_BOAT, Items.BIRCH_BOAT, Items.JUNGLE_BOAT, Items.ACACIA_BOAT, Items.DARK_OAK_BOAT);
+        this.tag(ItemTags.FISHES).add(Items.COD, Items.COOKED_COD, Items.SALMON, Items.COOKED_SALMON, Items.PUFFERFISH, Items.TROPICAL_FISH);
         this.copy(BlockTags.STANDING_SIGNS, ItemTags.SIGNS);
-        this.tag(ItemTags.CREEPER_DROP_MUSIC_DISCS).add((Object[])(Items.MUSIC_DISC_13, Items.MUSIC_DISC_CAT, Items.MUSIC_DISC_BLOCKS, Items.MUSIC_DISC_CHIRP, Items.MUSIC_DISC_FAR, Items.MUSIC_DISC_MALL, Items.MUSIC_DISC_MELLOHI, Items.MUSIC_DISC_STAL, Items.MUSIC_DISC_STRAD, Items.MUSIC_DISC_WARD, Items.MUSIC_DISC_11, Items.MUSIC_DISC_WAIT));
-        this.tag(ItemTags.MUSIC_DISCS).addTag(ItemTags.CREEPER_DROP_MUSIC_DISCS).add((Object)Items.MUSIC_DISC_PIGSTEP);
-        this.tag(ItemTags.COALS).add((Object[])(Items.COAL, Items.CHARCOAL));
-        this.tag(ItemTags.ARROWS).add((Object[])(Items.ARROW, Items.TIPPED_ARROW, Items.SPECTRAL_ARROW));
-        this.tag(ItemTags.LECTERN_BOOKS).add((Object[])(Items.WRITTEN_BOOK, Items.WRITABLE_BOOK));
-        this.tag(ItemTags.BEACON_PAYMENT_ITEMS).add((Object[])(Items.NETHERITE_INGOT, Items.EMERALD, Items.DIAMOND, Items.GOLD_INGOT, Items.IRON_INGOT));
-        this.tag(ItemTags.PIGLIN_REPELLENTS).add((Object)Items.SOUL_TORCH).add((Object)Items.SOUL_LANTERN).add((Object)Items.SOUL_CAMPFIRE);
-        this.tag(ItemTags.PIGLIN_LOVED).addTag(ItemTags.GOLD_ORES).add((Object[])(Items.GOLD_BLOCK, Items.GILDED_BLACKSTONE, Items.LIGHT_WEIGHTED_PRESSURE_PLATE, Items.GOLD_INGOT, Items.BELL, Items.CLOCK, Items.GOLDEN_CARROT, Items.GLISTERING_MELON_SLICE, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE, Items.GOLDEN_HELMET, Items.GOLDEN_CHESTPLATE, Items.GOLDEN_LEGGINGS, Items.GOLDEN_BOOTS, Items.GOLDEN_HORSE_ARMOR, Items.GOLDEN_SWORD, Items.GOLDEN_PICKAXE, Items.GOLDEN_SHOVEL, Items.GOLDEN_AXE, Items.GOLDEN_HOE));
-        this.tag(ItemTags.NON_FLAMMABLE_WOOD).add((Object[])(Items.WARPED_STEM, Items.STRIPPED_WARPED_STEM, Items.WARPED_HYPHAE, Items.STRIPPED_WARPED_HYPHAE, Items.CRIMSON_STEM, Items.STRIPPED_CRIMSON_STEM, Items.CRIMSON_HYPHAE, Items.STRIPPED_CRIMSON_HYPHAE, Items.CRIMSON_PLANKS, Items.WARPED_PLANKS, Items.CRIMSON_SLAB, Items.WARPED_SLAB, Items.CRIMSON_PRESSURE_PLATE, Items.WARPED_PRESSURE_PLATE, Items.CRIMSON_FENCE, Items.WARPED_FENCE, Items.CRIMSON_TRAPDOOR, Items.WARPED_TRAPDOOR, Items.CRIMSON_FENCE_GATE, Items.WARPED_FENCE_GATE, Items.CRIMSON_STAIRS, Items.WARPED_STAIRS, Items.CRIMSON_BUTTON, Items.WARPED_BUTTON, Items.CRIMSON_DOOR, Items.WARPED_DOOR, Items.CRIMSON_SIGN, Items.WARPED_SIGN));
-        this.tag(ItemTags.STONE_TOOL_MATERIALS).add((Object[])(Items.COBBLESTONE, Items.BLACKSTONE));
-        this.tag(ItemTags.STONE_CRAFTING_MATERIALS).add((Object[])(Items.COBBLESTONE, Items.BLACKSTONE));
+        this.tag(ItemTags.CREEPER_DROP_MUSIC_DISCS).add(Items.MUSIC_DISC_13, Items.MUSIC_DISC_CAT, Items.MUSIC_DISC_BLOCKS, Items.MUSIC_DISC_CHIRP, Items.MUSIC_DISC_FAR, Items.MUSIC_DISC_MALL, Items.MUSIC_DISC_MELLOHI, Items.MUSIC_DISC_STAL, Items.MUSIC_DISC_STRAD, Items.MUSIC_DISC_WARD, Items.MUSIC_DISC_11, Items.MUSIC_DISC_WAIT);
+        this.tag(ItemTags.MUSIC_DISCS).addTag(ItemTags.CREEPER_DROP_MUSIC_DISCS).add(Items.MUSIC_DISC_PIGSTEP);
+        this.tag(ItemTags.COALS).add(Items.COAL, Items.CHARCOAL);
+        this.tag(ItemTags.ARROWS).add(Items.ARROW, Items.TIPPED_ARROW, Items.SPECTRAL_ARROW);
+        this.tag(ItemTags.LECTERN_BOOKS).add(Items.WRITTEN_BOOK, Items.WRITABLE_BOOK);
+        this.tag(ItemTags.BEACON_PAYMENT_ITEMS).add(Items.NETHERITE_INGOT, Items.EMERALD, Items.DIAMOND, Items.GOLD_INGOT, Items.IRON_INGOT);
+        this.tag(ItemTags.PIGLIN_REPELLENTS).add(Items.SOUL_TORCH).add(Items.SOUL_LANTERN).add(Items.SOUL_CAMPFIRE);
+        this.tag(ItemTags.PIGLIN_LOVED).addTag(ItemTags.GOLD_ORES).add(Items.GOLD_BLOCK, Items.GILDED_BLACKSTONE, Items.LIGHT_WEIGHTED_PRESSURE_PLATE, Items.GOLD_INGOT, Items.BELL, Items.CLOCK, Items.GOLDEN_CARROT, Items.GLISTERING_MELON_SLICE, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE, Items.GOLDEN_HELMET, Items.GOLDEN_CHESTPLATE, Items.GOLDEN_LEGGINGS, Items.GOLDEN_BOOTS, Items.GOLDEN_HORSE_ARMOR, Items.GOLDEN_SWORD, Items.GOLDEN_PICKAXE, Items.GOLDEN_SHOVEL, Items.GOLDEN_AXE, Items.GOLDEN_HOE);
+        this.tag(ItemTags.NON_FLAMMABLE_WOOD).add(Items.WARPED_STEM, Items.STRIPPED_WARPED_STEM, Items.WARPED_HYPHAE, Items.STRIPPED_WARPED_HYPHAE, Items.CRIMSON_STEM, Items.STRIPPED_CRIMSON_STEM, Items.CRIMSON_HYPHAE, Items.STRIPPED_CRIMSON_HYPHAE, Items.CRIMSON_PLANKS, Items.WARPED_PLANKS, Items.CRIMSON_SLAB, Items.WARPED_SLAB, Items.CRIMSON_PRESSURE_PLATE, Items.WARPED_PRESSURE_PLATE, Items.CRIMSON_FENCE, Items.WARPED_FENCE, Items.CRIMSON_TRAPDOOR, Items.WARPED_TRAPDOOR, Items.CRIMSON_FENCE_GATE, Items.WARPED_FENCE_GATE, Items.CRIMSON_STAIRS, Items.WARPED_STAIRS, Items.CRIMSON_BUTTON, Items.WARPED_BUTTON, Items.CRIMSON_DOOR, Items.WARPED_DOOR, Items.CRIMSON_SIGN, Items.WARPED_SIGN);
+        this.tag(ItemTags.STONE_TOOL_MATERIALS).add(Items.COBBLESTONE, Items.BLACKSTONE);
+        this.tag(ItemTags.STONE_CRAFTING_MATERIALS).add(Items.COBBLESTONE, Items.BLACKSTONE);
     }
 
     protected void copy(Tag.Named<Block> tag_named, Tag.Named<Item> tag_named1) {
Index: net/minecraft/util/FormattedCharSequence.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/FormattedCharSequence.java b/net/minecraft/util/FormattedCharSequence.java
--- a/net/minecraft/util/FormattedCharSequence.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/FormattedCharSequence.java	(date 1611605433255)
@@ -1,9 +1,10 @@
 package net.minecraft.util;
 
+// PistonMC - Fix decompile errors - Add missing indy method
 @FunctionalInterface
 public interface FormattedCharSequence {
 
-    FormattedCharSequence EMPTY = (formattedcharsink) -> {
-        return true;
-    };
+    boolean accept(FormattedCharSink formattedcharsink);
+
+    FormattedCharSequence EMPTY = (formattedcharsink) -> true;
 }
Index: net/minecraft/world/level/BlockGetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/BlockGetter.java b/net/minecraft/world/level/BlockGetter.java
--- a/net/minecraft/world/level/BlockGetter.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/BlockGetter.java	(date 1611508050330)
@@ -95,6 +95,7 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     static <T> T traverseBlocks(ClipContext clipcontext, BiFunction<ClipContext, BlockPos, T> bifunction, Function<ClipContext, T> function) {
         Vec3 vec3 = clipcontext.getFrom();
         Vec3 vec31 = clipcontext.getTo();
@@ -112,7 +113,7 @@
             int j = Mth.floor(d4);
             int k = Mth.floor(d5);
             BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos(i, j, k);
-            Object object = bifunction.apply(clipcontext, blockpos_mutableblockpos);
+            T object = bifunction.apply(clipcontext, blockpos_mutableblockpos);
 
             if (object != null) {
                 return object;
@@ -130,7 +131,7 @@
                 double d13 = d10 * (i1 > 0 ? 1.0D - Mth.frac(d4) : Mth.frac(d4));
                 double d14 = d11 * (j1 > 0 ? 1.0D - Mth.frac(d5) : Mth.frac(d5));
 
-                Object object1;
+                T object1;
 
                 do {
                     if (d12 > 1.0D && d13 > 1.0D && d14 > 1.0D) {
Index: net/minecraft/util/SortedArraySet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/SortedArraySet.java b/net/minecraft/util/SortedArraySet.java
--- a/net/minecraft/util/SortedArraySet.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/SortedArraySet.java	(date 1611603678560)
@@ -22,12 +22,14 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public static <T extends Comparable<T>> SortedArraySet<T> create(int i) {
-        return new SortedArraySet<>(i, Comparator.naturalOrder());
+        return new SortedArraySet<>(i, Comparator.<T>naturalOrder());
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> T[] castRawArray(Object[] aobject) {
-        return (Object[]) aobject;
+        return (T[]) aobject;
     }
 
     private int findIndex(T t0) {
@@ -100,8 +102,9 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public boolean remove(Object object) {
-        int i = this.findIndex(object);
+        int i = this.findIndex((T) object);
 
         if (i >= 0) {
             this.removeInternal(i);
@@ -115,8 +118,9 @@
         return this.getInternal(0);
     }
 
+    // PistonMC - Fix decompile errors
     public boolean contains(Object object) {
-        int i = this.findIndex(object);
+        int i = this.findIndex((T) object);
 
         return i >= 0;
     }
@@ -133,9 +137,10 @@
         return (Object[]) this.contents.clone();
     }
 
+    // PistonMC - Fix decompile errors
     public <U> U[] toArray(U[] au) {
         if (au.length < this.size) {
-            return (Object[]) Arrays.copyOf(this.contents, this.size, au.getClass());
+            return (U[]) Arrays.copyOf(this.contents, this.size, au.getClass());
         } else {
             System.arraycopy(this.contents, 0, au, 0, this.size);
             if (au.length > this.size) {
Index: net/minecraft/world/level/Explosion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/Explosion.java b/net/minecraft/world/level/Explosion.java
--- a/net/minecraft/world/level/Explosion.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/Explosion.java	(date 1611565399213)
@@ -283,12 +283,13 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private static void addBlockDrops(ObjectArrayList<Pair<ItemStack, BlockPos>> objectarraylist, ItemStack itemstack, BlockPos blockpos) {
         int i = objectarraylist.size();
 
         for (int j = 0; j < i; ++j) {
-            Pair pair = (Pair) objectarraylist.get(j);
-            ItemStack itemstack1 = (ItemStack) pair.getFirst();
+            Pair<ItemStack, BlockPos> pair = objectarraylist.get(j);
+            ItemStack itemstack1 = pair.getFirst();
 
             if (ItemEntity.areMergable(itemstack1, itemstack)) {
                 ItemStack itemstack2 = ItemEntity.merge(itemstack1, itemstack, 16);
Index: net/minecraft/world/level/EntityGetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/EntityGetter.java b/net/minecraft/world/level/EntityGetter.java
--- a/net/minecraft/world/level/EntityGetter.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/EntityGetter.java	(date 1611508050340)
@@ -166,25 +166,24 @@
         return (Player) this.getNearestEntity(this.players(), targetingconditions, (LivingEntity) null, d0, d1, d2);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     default <T extends LivingEntity> T getNearestEntity(Class<? extends T> oclass, TargetingConditions targetingconditions, @Nullable LivingEntity livingentity, double d0, double d1, double d2, AABB aabb) {
-        return this.getNearestEntity(this.getEntitiesOfClass(oclass, aabb, (Predicate) null), targetingconditions, livingentity, d0, d1, d2);
+        return this.getNearestEntity(this.getEntitiesOfClass(oclass, aabb, null), targetingconditions, livingentity, d0, d1, d2);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     default <T extends LivingEntity> T getNearestLoadedEntity(Class<? extends T> oclass, TargetingConditions targetingconditions, @Nullable LivingEntity livingentity, double d0, double d1, double d2, AABB aabb) {
-        return this.getNearestEntity(this.getLoadedEntitiesOfClass(oclass, aabb, (Predicate) null), targetingconditions, livingentity, d0, d1, d2);
+        return this.getNearestEntity(this.getLoadedEntitiesOfClass(oclass, aabb, null), targetingconditions, livingentity, d0, d1, d2);
     }
 
+    // PistonMC - Fix decompile errors
     @Nullable
     default <T extends LivingEntity> T getNearestEntity(List<? extends T> list, TargetingConditions targetingconditions, @Nullable LivingEntity livingentity, double d0, double d1, double d2) {
         double d3 = -1.0D;
-        LivingEntity livingentity1 = null;
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            LivingEntity livingentity2 = (LivingEntity) iterator.next();
-
+        T livingentity1 = null;
+        for(T livingentity2 : list) {
             if (targetingconditions.test(livingentity, livingentity2)) {
                 double d4 = livingentity2.distanceToSqr(d0, d1, d2);
 
Index: net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
--- a/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java	(date 1611653827840)
@@ -17,20 +17,16 @@
 
     public LowerCaseEnumTypeAdapterFactory() {}
 
+    // PistonMC - Fix decompile errors
     @Nullable
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typetoken) {
-        Class oclass = typetoken.getRawType();
+        Class<T> oclass = (Class<T>) typetoken.getRawType();
 
         if (!oclass.isEnum()) {
             return null;
         } else {
-            final HashMap hashmap = Maps.newHashMap();
-            Object[] aobject = oclass.getEnumConstants();
-            int i = aobject.length;
-
-            for (int j = 0; j < i; ++j) {
-                Object object = aobject[j];
-
+            final HashMap<String, T> hashmap = Maps.newHashMap();
+            for(T object : oclass.getEnumConstants()) {
                 hashmap.put(this.toLowercase(object), object);
             }
 
Index: net/minecraft/world/level/GameRules.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/GameRules.java b/net/minecraft/world/level/GameRules.java
--- a/net/minecraft/world/level/GameRules.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/GameRules.java	(date 1611586088486)
@@ -112,8 +112,9 @@
         this.rules = map;
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends GameRules.Value<T>> T getRule(GameRules.Key<T> gamerules_key) {
-        return (GameRules.Value) this.rules.get(gamerules_key);
+        return (T) this.rules.get(gamerules_key);
     }
 
     public CompoundTag createTag() {
@@ -143,9 +144,10 @@
         });
     }
 
+    // PistonMC - Fix decompile errors
     private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gamerules_gameruletypevisitor, GameRules.Key<?> gamerules_key, GameRules.Type<?> gamerules_type) {
-        gamerules_gameruletypevisitor.visit(gamerules_key, gamerules_type);
-        gamerules_type.callVisitor(gamerules_gameruletypevisitor, gamerules_key);
+        gamerules_gameruletypevisitor.visit((GameRules.Key<T>) gamerules_key, (GameRules.Type<T>) gamerules_type);
+        ((GameRules.Type<T>) gamerules_type).callVisitor(gamerules_gameruletypevisitor, (GameRules.Key<T>) gamerules_key);
     }
 
     public boolean getBoolean(GameRules.Key<GameRules.BooleanValue> gamerules_key) {
@@ -338,8 +340,9 @@
             return Commands.argument(s, (ArgumentType) this.argument.get());
         }
 
+        // PistonMC - Fix decompile errors
         public T createRule() {
-            return (GameRules.Value) this.constructor.apply(this);
+            return this.constructor.apply(this);
         }
 
         public void callVisitor(GameRules.GameRuleTypeVisitor gamerules_gameruletypevisitor, GameRules.Key<T> gamerules_key) {
Index: net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java b/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
--- a/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java	(date 1611574661903)
@@ -66,8 +66,9 @@
         friendlybytebuf.writeVarInt(object2intmap.get(this.root));
     }
 
+    // PistonMC - Fix decompile errors
     private static void resolveEntries(ClientboundCommandsPacket.Entry[] aclientboundcommandspacket_entry) {
-        ArrayList arraylist = Lists.newArrayList(aclientboundcommandspacket_entry);
+        ArrayList<Entry> arraylist = Lists.newArrayList(aclientboundcommandspacket_entry);
 
         boolean flag;
 
@@ -76,9 +77,7 @@
                 return;
             }
 
-            flag = arraylist.removeIf((clientboundcommandspacket_entry) -> {
-                return clientboundcommandspacket_entry.build(aclientboundcommandspacket_entry);
-            });
+            flag = arraylist.removeIf((clientboundcommandspacket_entry) -> clientboundcommandspacket_entry.build(aclientboundcommandspacket_entry));
         } while (flag);
 
         throw new IllegalStateException("Server sent an impossible command tree");
Index: net/minecraft/locale/Language.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/locale/Language.java b/net/minecraft/locale/Language.java
--- a/net/minecraft/locale/Language.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/locale/Language.java	(date 1611653827846)
@@ -73,13 +73,11 @@
         };
     }
 
+    // PistonMC - Fix decompile errors
     public static void loadFromJson(InputStream inputstream, BiConsumer<String, String> biconsumer) {
-        JsonObject jsonobject = (JsonObject) Language.GSON.fromJson(new InputStreamReader(inputstream, StandardCharsets.UTF_8), JsonObject.class);
-        Iterator iterator = jsonobject.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
-            String s = Language.UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString((JsonElement) entry.getValue(), (String) entry.getKey())).replaceAll("%$1s");
+        JsonObject jsonobject = Language.GSON.fromJson(new InputStreamReader(inputstream, StandardCharsets.UTF_8), JsonObject.class);
+        for(Entry<String, JsonElement> entry : jsonobject.entrySet()) {
+            String s = Language.UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString(entry.getValue(), entry.getKey())).replaceAll("%$1s");
 
             biconsumer.accept(entry.getKey(), s);
         }
Index: net/minecraft/world/level/ServerTickList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/ServerTickList.java b/net/minecraft/world/level/ServerTickList.java
--- a/net/minecraft/world/level/ServerTickList.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/ServerTickList.java	(date 1611648888630)
@@ -44,6 +44,7 @@
         this.ticker = consumer;
     }
 
+    // PistonMC - Fix decompile errors
     public void tick() {
         int i = this.tickNextTickList.size();
 
@@ -55,14 +56,14 @@
             }
 
             ServerChunkCache serverchunkcache = this.level.getChunkSource();
-            Iterator iterator = this.tickNextTickList.iterator();
+            Iterator<TickNextTickData<T>> iterator = this.tickNextTickList.iterator();
 
             this.level.getProfiler().push("cleaning");
 
-            TickNextTickData ticknexttickdata;
+            TickNextTickData<T> ticknexttickdata;
 
             while (i > 0 && iterator.hasNext()) {
-                ticknexttickdata = (TickNextTickData) iterator.next();
+                ticknexttickdata = iterator.next();
                 if (ticknexttickdata.triggerTick > this.level.getGameTime()) {
                     break;
                 }
@@ -77,7 +78,7 @@
 
             this.level.getProfiler().popPush("ticking");
 
-            while ((ticknexttickdata = (TickNextTickData) this.currentlyTicking.poll()) != null) {
+            while ((ticknexttickdata = this.currentlyTicking.poll()) != null) {
                 if (serverchunkcache.isTickingChunk(ticknexttickdata.pos)) {
                     try {
                         this.alreadyTicked.add(ticknexttickdata);
@@ -153,16 +154,13 @@
         return (List) list;
     }
 
+    // PistonMC - Fix decompile errors
     public void copy(BoundingBox boundingbox, BlockPos blockpos) {
-        List list = this.fetchTicksInArea(boundingbox, false, false);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            TickNextTickData ticknexttickdata = (TickNextTickData) iterator.next();
-
+        List<TickNextTickData<T>> list = this.fetchTicksInArea(boundingbox, false, false);
+        for(TickNextTickData<T> ticknexttickdata : list) {
             if (boundingbox.isInside(ticknexttickdata.pos)) {
                 BlockPos blockpos1 = ticknexttickdata.pos.offset(blockpos);
-                Object object = ticknexttickdata.getType();
+                T object = ticknexttickdata.getType();
 
                 this.addTickData(new TickNextTickData<>(blockpos1, object, ticknexttickdata.triggerTick, ticknexttickdata.priority));
             }
@@ -176,15 +174,13 @@
         return saveTickList(this.toId, list, this.level.getGameTime());
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> ListTag saveTickList(Function<T, ResourceLocation> function, Iterable<TickNextTickData<T>> iterable, long i) {
         ListTag listtag = new ListTag();
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            TickNextTickData ticknexttickdata = (TickNextTickData) iterator.next();
+        for(TickNextTickData<T> ticknexttickdata : iterable) {
             CompoundTag compoundtag = new CompoundTag();
 
-            compoundtag.putString("i", ((ResourceLocation) function.apply(ticknexttickdata.getType())).toString());
+            compoundtag.putString("i", function.apply(ticknexttickdata.getType()).toString());
             compoundtag.putInt("x", ticknexttickdata.pos.getX());
             compoundtag.putInt("y", ticknexttickdata.pos.getY());
             compoundtag.putInt("z", ticknexttickdata.pos.getZ());
Index: net/minecraft/world/level/block/DoubleBlockCombiner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/DoubleBlockCombiner.java b/net/minecraft/world/level/block/DoubleBlockCombiner.java
--- a/net/minecraft/world/level/block/DoubleBlockCombiner.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/DoubleBlockCombiner.java	(date 1611658076204)
@@ -12,37 +12,38 @@
 
 public class DoubleBlockCombiner {
 
+    // PistonMC - Fix decompile errors
     public static <S extends BlockEntity> DoubleBlockCombiner.NeighborCombineResult<S> combineWithNeigbour(BlockEntityType<S> blockentitytype, Function<BlockState, DoubleBlockCombiner.BlockType> function, Function<BlockState, Direction> function1, DirectionProperty directionproperty, BlockState blockstate, LevelAccessor levelaccessor, BlockPos blockpos, BiPredicate<LevelAccessor, BlockPos> bipredicate) {
-        BlockEntity blockentity = blockentitytype.getBlockEntity(levelaccessor, blockpos);
+        S blockentity = blockentitytype.getBlockEntity(levelaccessor, blockpos);
 
         if (blockentity == null) {
             return DoubleBlockCombiner.Combiner::acceptNone;
         } else if (bipredicate.test(levelaccessor, blockpos)) {
             return DoubleBlockCombiner.Combiner::acceptNone;
         } else {
-            DoubleBlockCombiner.BlockType doubleblockcombiner_blocktype = (DoubleBlockCombiner.BlockType) function.apply(blockstate);
+            DoubleBlockCombiner.BlockType doubleblockcombiner_blocktype = function.apply(blockstate);
             boolean flag = doubleblockcombiner_blocktype == DoubleBlockCombiner.BlockType.SINGLE;
             boolean flag1 = doubleblockcombiner_blocktype == DoubleBlockCombiner.BlockType.FIRST;
 
             if (flag) {
                 return new DoubleBlockCombiner.NeighborCombineResult.Single<>(blockentity);
             } else {
-                BlockPos blockpos1 = blockpos.relative((Direction) function1.apply(blockstate));
+                BlockPos blockpos1 = blockpos.relative(function1.apply(blockstate));
                 BlockState blockstate1 = levelaccessor.getBlockState(blockpos1);
 
                 if (blockstate1.is(blockstate.getBlock())) {
-                    DoubleBlockCombiner.BlockType doubleblockcombiner_blocktype1 = (DoubleBlockCombiner.BlockType) function.apply(blockstate1);
+                    DoubleBlockCombiner.BlockType doubleblockcombiner_blocktype1 = function.apply(blockstate1);
 
                     if (doubleblockcombiner_blocktype1 != DoubleBlockCombiner.BlockType.SINGLE && doubleblockcombiner_blocktype != doubleblockcombiner_blocktype1 && blockstate1.getValue(directionproperty) == blockstate.getValue(directionproperty)) {
                         if (bipredicate.test(levelaccessor, blockpos1)) {
                             return DoubleBlockCombiner.Combiner::acceptNone;
                         }
 
-                        BlockEntity blockentity1 = blockentitytype.getBlockEntity(levelaccessor, blockpos1);
+                        S blockentity1 = blockentitytype.getBlockEntity(levelaccessor, blockpos1);
 
                         if (blockentity1 != null) {
-                            BlockEntity blockentity2 = flag1 ? blockentity : blockentity1;
-                            BlockEntity blockentity3 = flag1 ? blockentity1 : blockentity;
+                            S blockentity2 = flag1 ? blockentity : blockentity1;
+                            S blockentity3 = flag1 ? blockentity1 : blockentity;
 
                             return new DoubleBlockCombiner.NeighborCombineResult.Double<>(blockentity2, blockentity3);
                         }
Index: net/minecraft/world/entity/monster/Phantom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/Phantom.java b/net/minecraft/world/entity/monster/Phantom.java
--- a/net/minecraft/world/entity/monster/Phantom.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/Phantom.java	(date 1611568351194)
@@ -225,22 +225,18 @@
             this.nextScanTick = 20;
         }
 
+        // PistonMC - Fix decompile errors
         @Override
         public boolean canUse() {
             if (this.nextScanTick > 0) {
                 --this.nextScanTick;
-                return false;
             } else {
                 this.nextScanTick = 60;
-                List list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
+                List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
 
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        Player player = (Player) iterator.next();
-
+                    list.sort(Comparator.comparing((java.util.function.Function<Player, Double>) Entity::getY).reversed());
+                    for (Player player : list) {
                         if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
                             Phantom.this.setTarget(player);
                             return true;
@@ -248,8 +244,8 @@
                     }
                 }
 
-                return false;
-            }
+            }
+            return false;
         }
 
         @Override
Index: net/minecraft/world/level/biome/MobSpawnSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/biome/MobSpawnSettings.java b/net/minecraft/world/level/biome/MobSpawnSettings.java
--- a/net/minecraft/world/level/biome/MobSpawnSettings.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/biome/MobSpawnSettings.java	(date 1611588660192)
@@ -25,25 +25,19 @@
 public class MobSpawnSettings {
 
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final MobSpawnSettings EMPTY = new MobSpawnSettings(0.1F, (Map) Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap((mobcategory) -> {
-        return mobcategory;
-    }, (mobcategory) -> {
-        return ImmutableList.of();
-    })), ImmutableMap.of(), false);
+    // PistonMC - Fix decompile errors
+    public static final MobSpawnSettings EMPTY = new MobSpawnSettings(0.1F, Stream.of(MobCategory.values())
+            .collect(ImmutableMap.toImmutableMap((mobcategory) -> mobcategory, (mobcategory) -> ImmutableList.of())), ImmutableMap.of(), false);
     public static final MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        RecordCodecBuilder recordcodecbuilder = Codec.FLOAT.optionalFieldOf("creature_spawn_probability", 0.1F).forGetter((mobspawnsettings) -> {
-            return mobspawnsettings.creatureGenerationProbability;
-        });
-        Codec codec = MobCategory.CODEC;
-        Codec codec1 = MobSpawnSettings.SpawnerData.CODEC.listOf();
+        RecordCodecBuilder<MobSpawnSettings, Float> recordcodecbuilder = Codec.FLOAT.optionalFieldOf("creature_spawn_probability", 0.1F).forGetter((mobspawnsettings) -> mobspawnsettings.creatureGenerationProbability);
+        Codec<MobCategory> codec = MobCategory.CODEC;
+        Codec<List<SpawnerData>> codec1 = MobSpawnSettings.SpawnerData.CODEC.listOf();
         Logger logger = MobSpawnSettings.LOGGER;
 
-        logger.getClass();
-        return instance.group(recordcodecbuilder, Codec.simpleMap(codec, codec1.promotePartial(Util.prefix("Spawn data: ", logger::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((mobspawnsettings) -> {
-            return mobspawnsettings.spawners;
-        }), Codec.simpleMap(Registry.ENTITY_TYPE, MobSpawnSettings.MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((mobspawnsettings) -> {
-            return mobspawnsettings.mobSpawnCosts;
-        }), Codec.BOOL.fieldOf("player_spawn_friendly").orElse(false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply(instance, MobSpawnSettings::new);
+//        logger.getClass();
+        return instance.group(recordcodecbuilder, Codec.simpleMap(codec, codec1.promotePartial(Util.prefix("Spawn data: ", logger::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((mobspawnsettings) -> mobspawnsettings.spawners),
+                Codec.simpleMap(Registry.ENTITY_TYPE, MobSpawnSettings.MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((mobspawnsettings) -> mobspawnsettings.mobSpawnCosts),
+                Codec.BOOL.fieldOf("player_spawn_friendly").orElse(false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply(instance, MobSpawnSettings::new);
     });
     private final float creatureGenerationProbability;
     private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners;
Index: net/minecraft/nbt/ListTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/nbt/ListTag.java b/net/minecraft/nbt/ListTag.java
--- a/net/minecraft/nbt/ListTag.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/nbt/ListTag.java	(date 1611569042155)
@@ -54,7 +54,8 @@
             return "TAG_List";
         }
     };
-    private static final ByteSet INLINE_ELEMENT_TYPES = new ByteOpenHashSet(Arrays.asList(1, 2, 3, 4, 5, 6));
+    // PistonMC - Fix decompile errors
+    private static final ByteSet INLINE_ELEMENT_TYPES = new ByteOpenHashSet(Arrays.asList((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6));
     private final List<Tag> list;
     private byte type;
 
Index: net/minecraft/world/entity/monster/Zoglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/monster/Zoglin.java b/net/minecraft/world/entity/monster/Zoglin.java
--- a/net/minecraft/world/entity/monster/Zoglin.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/monster/Zoglin.java	(date 1611568875497)
@@ -90,8 +90,9 @@
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf<>(Zoglin::isAdult, new MeleeAttack(40)), new RunIf<>(Zoglin::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid<>()), MemoryModuleType.ATTACK_TARGET);
     }
 
+    // PistonMC - Fix decompile errors
     private Optional<? extends LivingEntity> findNearestValidAttackTarget() {
-        return ((List) this.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())).stream().filter(Zoglin::isTargetable).findFirst();
+        return this.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of()).stream().filter(Zoglin::isTargetable).findFirst();
     }
 
     private static boolean isTargetable(LivingEntity livingentity) {
@@ -177,16 +178,18 @@
         this.brain.setMemoryWithExpiry(MemoryModuleType.ATTACK_TARGET, livingentity, 200L);
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public Brain<Zoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Zoglin>) super.getBrain();
     }
 
+    // PistonMC - Fix decompile errors
     protected void updateActivity() {
-        Activity activity = (Activity) this.brain.getActiveNonCoreActivity().orElse((Object) null);
+        Activity activity = this.brain.getActiveNonCoreActivity().orElse(null);
 
         this.brain.setActiveActivityToFirstValid(ImmutableList.of(Activity.FIGHT, Activity.IDLE));
-        Activity activity1 = (Activity) this.brain.getActiveNonCoreActivity().orElse((Object) null);
+        Activity activity1 = this.brain.getActiveNonCoreActivity().orElse(null);
 
         if (activity1 == Activity.FIGHT && activity != Activity.FIGHT) {
             this.playAngrySound();
Index: net/minecraft/network/Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/Connection.java b/net/minecraft/network/Connection.java
--- a/net/minecraft/network/Connection.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/Connection.java	(date 1611569579652)
@@ -136,8 +136,9 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     private static <T extends PacketListener> void genericsFtw(Packet<T> packet, PacketListener packetlistener) {
-        packet.handle(packetlistener);
+        packet.handle((T) packetlistener);
     }
 
     public void setListener(PacketListener packetlistener) {
Index: net/minecraft/network/FriendlyByteBuf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/FriendlyByteBuf.java b/net/minecraft/network/FriendlyByteBuf.java
--- a/net/minecraft/network/FriendlyByteBuf.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/FriendlyByteBuf.java	(date 1611569042162)
@@ -54,15 +54,15 @@
         return 5;
     }
 
+    // PistonMC - Fix decompile errors
     public <T> T readWithCodec(Codec<T> codec) throws IOException {
         CompoundTag compoundtag = this.readAnySizeNbt();
-        DataResult dataresult = codec.parse(NbtOps.INSTANCE, compoundtag);
+        DataResult<T> dataresult = codec.parse(NbtOps.INSTANCE, compoundtag);
 
         if (dataresult.error().isPresent()) {
-            throw new IOException("Failed to decode: " + ((PartialResult) dataresult.error().get()).message() + " " + compoundtag);
-        } else {
-            return dataresult.result().get();
-        }
+            throw new IOException("Failed to decode: " + dataresult.error().get().message() + " " + compoundtag);
+        }
+        return dataresult.result().get();
     }
 
     public <T> void writeWithCodec(Codec<T> codec, T t0) throws IOException {
@@ -163,8 +163,9 @@
         return this.writeUtf(Component.Serializer.toJson(component), 262144);
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Enum<T>> T readEnum(Class<T> oclass) {
-        return ((Enum[]) oclass.getEnumConstants())[this.readVarInt()];
+        return oclass.getEnumConstants()[this.readVarInt()];
     }
 
     public FriendlyByteBuf writeEnum(Enum<?> oenum) {
Index: net/minecraft/network/ConnectionProtocol.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/ConnectionProtocol.java b/net/minecraft/network/ConnectionProtocol.java
--- a/net/minecraft/network/ConnectionProtocol.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/ConnectionProtocol.java	(date 1611571633480)
@@ -163,7 +163,8 @@
 
 public enum ConnectionProtocol {
 
-    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))), PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))), STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))), LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    // PistonMC - Fix decompile errors
+    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.handshake.ServerHandshakePacketListener>().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))), PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.game.ClientGamePacketListener>().addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.game.ServerGamePacketListener>().addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))), STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.status.ServerStatusPacketListener>().addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.status.ClientStatusPacketListener>().addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))), LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.login.ClientLoginPacketListener>().addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.login.ServerLoginPacketListener>().addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
     private static final ConnectionProtocol[] LOOKUP = new ConnectionProtocol[4];
     private static final Map<Class<? extends Packet<?>>, ConnectionProtocol> PROTOCOL_BY_PACKET = Maps.newHashMap();
Index: net/minecraft/network/chat/HoverEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/chat/HoverEvent.java b/net/minecraft/network/chat/HoverEvent.java
--- a/net/minecraft/network/chat/HoverEvent.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/chat/HoverEvent.java	(date 1611634569416)
@@ -139,20 +139,23 @@
             return (HoverEvent.Action) HoverEvent.Action.LOOKUP.get(s);
         }
 
+        // PistonMC - Fix decompile errors
         private T cast(Object object) {
-            return object;
+            return (T) object;
         }
 
+        // PistonMC - Fix decompile errors
         @Nullable
         public HoverEvent deserialize(JsonElement jsonelement) {
-            Object object = this.argDeserializer.apply(jsonelement);
+            T object = this.argDeserializer.apply(jsonelement);
 
             return object == null ? null : new HoverEvent(this, object);
         }
 
+        // PistonMC - Fix decompile errors
         @Nullable
         public HoverEvent deserializeFromLegacy(Component component) {
-            Object object = this.legacyArgDeserializer.apply(component);
+            T object = this.legacyArgDeserializer.apply(component);
 
             return object == null ? null : new HoverEvent(this, object);
         }
Index: net/minecraft/world/level/block/Block.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/Block.java b/net/minecraft/world/level/block/Block.java
--- a/net/minecraft/world/level/block/Block.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/Block.java	(date 1611555788834)
@@ -153,13 +153,14 @@
 
     }
 
+    // PistonMC - Fix decompile errors
     public Block(BlockBehaviour.Properties blockbehaviour_properties) {
         super(blockbehaviour_properties);
-        StateDefinition.Builder statedefinition_builder = new StateDefinition.Builder<>(this);
+        StateDefinition.Builder<Block, BlockState> statedefinition_builder = new StateDefinition.Builder<>(this);
 
         this.createBlockStateDefinition(statedefinition_builder);
         this.stateDefinition = statedefinition_builder.create(Block::defaultBlockState, BlockState::new);
-        this.registerDefaultState((BlockState) this.stateDefinition.any());
+        this.registerDefaultState(this.stateDefinition.any());
     }
 
     public static boolean isExceptionForConnection(Block block) {
Index: net/minecraft/world/entity/schedule/ScheduleBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/entity/schedule/ScheduleBuilder.java b/net/minecraft/world/entity/schedule/ScheduleBuilder.java
--- a/net/minecraft/world/entity/schedule/ScheduleBuilder.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/entity/schedule/ScheduleBuilder.java	(date 1611574661920)
@@ -19,18 +19,17 @@
         return this;
     }
 
+    // PistonMC - Fix decompile errors
     public Schedule build() {
-        Set set = (Set) this.transitions.stream().map(ScheduleBuilder.ActivityTransition::getActivity).collect(Collectors.toSet());
+        Set<Activity> set = this.transitions.stream().map(ActivityTransition::getActivity).collect(Collectors.toSet());
         Schedule schedule = this.schedule;
 
-        this.schedule.getClass();
+//        this.schedule.getClass();
         set.forEach(schedule::ensureTimelineExistsFor);
         this.transitions.forEach((schedulebuilder_activitytransition) -> {
             Activity activity = schedulebuilder_activitytransition.getActivity();
 
-            this.schedule.getAllTimelinesExceptFor(activity).forEach((timeline) -> {
-                timeline.addKeyframe(schedulebuilder_activitytransition.getTime(), 0.0F);
-            });
+            this.schedule.getAllTimelinesExceptFor(activity).forEach((timeline) -> timeline.addKeyframe(schedulebuilder_activitytransition.getTime(), 0.0F));
             this.schedule.getTimelineFor(activity).addKeyframe(schedulebuilder_activitytransition.getTime(), 1.0F);
         });
         return this.schedule;
Index: net/minecraft/world/scores/Scoreboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/scores/Scoreboard.java b/net/minecraft/world/scores/Scoreboard.java
--- a/net/minecraft/world/scores/Scoreboard.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/scores/Scoreboard.java	(date 1611634569453)
@@ -56,8 +56,9 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public final void forAllObjectives(ObjectiveCriteria objectivecriteria, String s, Consumer<Score> consumer) {
-        ((List) this.objectivesByCriteria.getOrDefault(objectivecriteria, Collections.emptyList())).forEach((objective) -> {
+        this.objectivesByCriteria.getOrDefault(objectivecriteria, Collections.emptyList()).forEach((objective) -> {
             consumer.accept(this.getOrCreatePlayerScore(s, objective));
         });
     }
@@ -74,15 +75,14 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public Score getOrCreatePlayerScore(String s, Objective objective) {
         if (s.length() > 40) {
             throw new IllegalArgumentException("The player name '" + s + "' is too long!");
         } else {
-            Map map = (Map) this.playerScores.computeIfAbsent(s, (s1) -> {
-                return Maps.newHashMap();
-            });
+            Map<Objective, Score> map = this.playerScores.computeIfAbsent(s, (s1) -> Maps.newHashMap());
 
-            return (Score) map.computeIfAbsent(objective, (objective1) -> {
+            return map.computeIfAbsent(objective, (objective1) -> {
                 Score score = new Score(this, objective1, s);
 
                 score.setScore(0);
Index: net/minecraft/world/scores/criteria/ObjectiveCriteria.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/scores/criteria/ObjectiveCriteria.java b/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
--- a/net/minecraft/world/scores/criteria/ObjectiveCriteria.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/scores/criteria/ObjectiveCriteria.java	(date 1611634569422)
@@ -53,10 +53,11 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     private static <T> Optional<ObjectiveCriteria> getStat(StatType<T> stattype, ResourceLocation resourcelocation) {
-        Optional optional = stattype.getRegistry().getOptional(resourcelocation);
+        Optional<T> optional = stattype.getRegistry().getOptional(resourcelocation);
 
-        stattype.getClass();
+//        stattype.getClass();
         return optional.map(stattype::get);
     }
 
Index: net/minecraft/resources/RegistryReadOps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/resources/RegistryReadOps.java b/net/minecraft/resources/RegistryReadOps.java
--- a/net/minecraft/resources/RegistryReadOps.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/resources/RegistryReadOps.java	(date 1611553512920)
@@ -57,12 +57,13 @@
         return registryreadops;
     }
 
+    // PistonMC - Fix decompile errors
     private RegistryReadOps(DynamicOps<T> dynamicops, RegistryReadOps.ResourceAccess registryreadops_resourceaccess, RegistryAccess.RegistryHolder registryaccess_registryholder, IdentityHashMap<ResourceKey<? extends Registry<?>>, RegistryReadOps.ReadCache<?>> identityhashmap) {
         super(dynamicops);
         this.resources = registryreadops_resourceaccess;
         this.registryHolder = registryaccess_registryholder;
         this.readCache = identityhashmap;
-        this.jsonOps = dynamicops == JsonOps.INSTANCE ? this : new RegistryReadOps<>(JsonOps.INSTANCE, registryreadops_resourceaccess, registryaccess_registryholder, identityhashmap);
+        this.jsonOps = dynamicops == JsonOps.INSTANCE ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps<>(JsonOps.INSTANCE, registryreadops_resourceaccess, registryaccess_registryholder, identityhashmap);
     }
 
     protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T t0, ResourceKey<? extends Registry<E>> resourcekey, Codec<E> codec, boolean flag) {
@@ -93,14 +94,12 @@
         }
     }
 
+    // PistonMC - Fix decompile errors
     public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> mappedregistry, ResourceKey<? extends Registry<E>> resourcekey, Codec<E> codec) {
-        Collection collection = this.resources.listResources(resourcekey);
-        DataResult dataresult = DataResult.success(mappedregistry, Lifecycle.stable());
+        Collection<ResourceLocation> collection = this.resources.listResources(resourcekey);
+        DataResult<MappedRegistry<E>> dataresult = DataResult.success(mappedregistry, Lifecycle.stable());
         String s = resourcekey.location().getPath() + "/";
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            ResourceLocation resourcelocation = (ResourceLocation) iterator.next();
+        for(ResourceLocation resourcelocation : collection) {
             String s1 = resourcelocation.getPath();
 
             if (!s1.endsWith(".json")) {
@@ -111,62 +110,52 @@
                 String s2 = s1.substring(s.length(), s1.length() - ".json".length());
                 ResourceLocation resourcelocation1 = new ResourceLocation(resourcelocation.getNamespace(), s2);
 
-                dataresult = dataresult.flatMap((mappedregistry1) -> {
-                    return this.readAndRegisterElement(resourcekey, mappedregistry1, codec, resourcelocation1).map((supplier) -> {
-                        return mappedregistry1;
-                    });
-                });
+                dataresult = dataresult.flatMap((mappedregistry1) -> this.readAndRegisterElement(resourcekey, mappedregistry1, codec, resourcelocation1).map((supplier) -> mappedregistry1));
             }
         }
 
         return dataresult.setPartial(mappedregistry);
     }
 
+    // PistonMC - Fix decompile errors
     private <E> DataResult<Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> resourcekey, WritableRegistry<E> writableregistry, Codec<E> codec, ResourceLocation resourcelocation) {
-        ResourceKey resourcekey1 = ResourceKey.create(resourcekey, resourcelocation);
-        RegistryReadOps.ReadCache registryreadops_readcache = this.readCache(resourcekey);
-        DataResult dataresult = (DataResult) registryreadops_readcache.values.get(resourcekey1);
+        ResourceKey<E> resourcekey1 = ResourceKey.create(resourcekey, resourcelocation);
+        RegistryReadOps.ReadCache<E> registryreadops_readcache = this.readCache(resourcekey);
+        DataResult<Supplier<E>> dataresult = registryreadops_readcache.values.get(resourcekey1);
 
         if (dataresult != null) {
             return dataresult;
-        } else {
-            com.google.common.base.Supplier com_google_common_base_supplier = Suppliers.memoize(() -> {
-                Object object = writableregistry.get(resourcekey1);
+        }
+        com.google.common.base.Supplier<E> com_google_common_base_supplier = Suppliers.memoize(() -> {
+            E object = writableregistry.get(resourcekey1);
 
-                if (object == null) {
-                    throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + resourcekey1);
-                } else {
-                    return object;
-                }
-            });
+            if (object == null) {
+                throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + resourcekey1);
+            } else {
+                return object;
+            }
+        });
 
-            registryreadops_readcache.values.put(resourcekey1, DataResult.success(com_google_common_base_supplier));
-            DataResult dataresult1 = this.resources.parseElement(this.jsonOps, resourcekey, resourcekey1, codec);
-            Optional optional = dataresult1.result();
+        registryreadops_readcache.values.put(resourcekey1, DataResult.success(com_google_common_base_supplier));
+        DataResult<Pair<E, OptionalInt>> dataresult1 = this.resources.parseElement(this.jsonOps, resourcekey, resourcekey1, codec);
+        Optional<Pair<E, OptionalInt>> optional = dataresult1.result();
 
-            if (optional.isPresent()) {
-                Pair pair = (Pair) optional.get();
+        if (optional.isPresent()) {
+            Pair<E, OptionalInt> pair = optional.get();
 
-                writableregistry.registerOrOverride((OptionalInt) pair.getSecond(), resourcekey1, pair.getFirst(), dataresult1.lifecycle());
-            }
+            writableregistry.registerOrOverride(pair.getSecond(), resourcekey1, pair.getFirst(), dataresult1.lifecycle());
+        }
 
-            DataResult dataresult2;
+        DataResult<Supplier<E>> dataresult2;
 
-            if (!optional.isPresent() && writableregistry.get(resourcekey1) != null) {
-                dataresult2 = DataResult.success(() -> {
-                    return writableregistry.get(resourcekey1);
-                }, Lifecycle.stable());
-            } else {
-                dataresult2 = dataresult1.map((pair1) -> {
-                    return () -> {
-                        return writableregistry.get(resourcekey1);
-                    };
-                });
-            }
+        if (!optional.isPresent() && writableregistry.get(resourcekey1) != null) {
+            dataresult2 = DataResult.success(() -> writableregistry.get(resourcekey1), Lifecycle.stable());
+        } else {
+            dataresult2 = dataresult1.map((pair1) -> () -> writableregistry.get(resourcekey1));
+        }
 
-            registryreadops_readcache.values.put(resourcekey1, dataresult2);
-            return dataresult2;
-        }
+        registryreadops_readcache.values.put(resourcekey1, dataresult2);
+        return dataresult2;
     }
 
     private <E> RegistryReadOps.ReadCache<E> readCache(ResourceKey<? extends Registry<E>> resourcekey) {
@@ -275,12 +264,13 @@
 
             public MemoryMap() {}
 
+            // PistonMC - Fix decompile errors
             public <E> void add(RegistryAccess.RegistryHolder registryaccess_registryholder, ResourceKey<E> resourcekey, Encoder<E> encoder, int i, E e0, Lifecycle lifecycle) {
-                DataResult dataresult = encoder.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, registryaccess_registryholder), e0);
-                Optional optional = dataresult.error();
+                DataResult<JsonElement> dataresult = encoder.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, registryaccess_registryholder), e0);
+                Optional<DataResult.PartialResult<JsonElement>> optional = dataresult.error();
 
                 if (optional.isPresent()) {
-                    RegistryReadOps.LOGGER.error("Error adding element: {}", ((PartialResult) optional.get()).message());
+                    RegistryReadOps.LOGGER.error("Error adding element: {}", optional.get().message());
                 } else {
                     this.data.put(resourcekey, dataresult.result().get());
                     this.ids.put(resourcekey, i);
Index: net/minecraft/server/ServerFunctionLibrary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/ServerFunctionLibrary.java b/net/minecraft/server/ServerFunctionLibrary.java
--- a/net/minecraft/server/ServerFunctionLibrary.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/ServerFunctionLibrary.java	(date 1611633711606)
@@ -67,42 +67,35 @@
         this.dispatcher = commanddispatcher;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier preparablereloadlistener_preparationbarrier, ResourceManager resourcemanager, ProfilerFiller profilerfiller, ProfilerFiller profilerfiller1, Executor executor, Executor executor1) {
-        CompletableFuture completablefuture = this.tagsLoader.prepare(resourcemanager, executor);
-        CompletableFuture completablefuture1 = CompletableFuture.supplyAsync(() -> {
-            return resourcemanager.listResources("functions", (s) -> {
-                return s.endsWith(".mcfunction");
-            });
-        }, executor).thenCompose((collection) -> {
-            HashMap hashmap = Maps.newHashMap();
-            CommandSourceStack commandsourcestack = new CommandSourceStack(CommandSource.NULL, Vec3.ZERO, Vec2.ZERO, (ServerLevel) null, this.functionCompilationLevel, "", TextComponent.EMPTY, (MinecraftServer) null, (Entity) null);
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                ResourceLocation resourcelocation = (ResourceLocation) iterator.next();
+        CompletableFuture<Map<ResourceLocation, Tag.Builder>> completablefuture = this.tagsLoader.prepare(resourcemanager, executor);
+        CompletableFuture<Map<ResourceLocation, CompletableFuture<CommandFunction>>> completablefuture1 = CompletableFuture.supplyAsync(() -> resourcemanager.listResources("functions", (s) -> s.endsWith(".mcfunction")), executor)
+                .thenCompose((collection) -> {
+            HashMap<ResourceLocation, CompletableFuture<CommandFunction>> hashmap = Maps.newHashMap();
+            CommandSourceStack commandsourcestack = new CommandSourceStack(CommandSource.NULL, Vec3.ZERO, Vec2.ZERO, null, this.functionCompilationLevel, "", TextComponent.EMPTY, null, null);
+            for(ResourceLocation resourcelocation : collection) {
                 String s = resourcelocation.getPath();
                 ResourceLocation resourcelocation1 = new ResourceLocation(resourcelocation.getNamespace(), s.substring(ServerFunctionLibrary.PATH_PREFIX_LENGTH, s.length() - ServerFunctionLibrary.PATH_SUFFIX_LENGTH));
 
                 hashmap.put(resourcelocation1, CompletableFuture.supplyAsync(() -> {
-                    List list = readLines(resourcemanager, resourcelocation);
+                    List<String> list = readLines(resourcemanager, resourcelocation);
 
                     return CommandFunction.fromLines(resourcelocation1, this.dispatcher, commandsourcestack, list);
                 }, executor));
             }
 
-            CompletableFuture[] acompletablefuture = (CompletableFuture[]) hashmap.values().toArray(new CompletableFuture[0]);
+            CompletableFuture<CommandFunction>[] acompletablefuture = hashmap.values().toArray(new CompletableFuture[0]);
 
-            return CompletableFuture.allOf(acompletablefuture).handle((ovoid, throwable) -> {
-                return hashmap;
-            });
+            return CompletableFuture.allOf(acompletablefuture).handle((ovoid, throwable) -> hashmap);
         });
-        CompletableFuture completablefuture2 = completablefuture.thenCombine(completablefuture1, Pair::of);
+        CompletableFuture<Pair<Map<ResourceLocation, Tag.Builder>, Map<ResourceLocation, CompletableFuture<CommandFunction>>>> completablefuture2 = completablefuture.thenCombine(completablefuture1, Pair::of);
 
-        preparablereloadlistener_preparationbarrier.getClass();
+//        preparablereloadlistener_preparationbarrier.getClass();
         return completablefuture2.thenCompose(preparablereloadlistener_preparationbarrier::wait).thenAcceptAsync((pair) -> {
-            Map map = (Map) pair.getSecond();
-            Builder builder = ImmutableMap.builder();
+            Map<ResourceLocation, CompletableFuture<CommandFunction>> map = pair.getSecond();
+            Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
 
             map.forEach((resourcelocation, completablefuture3) -> {
                 completablefuture3.handle((commandfunction, throwable) -> {
@@ -116,7 +109,7 @@
                 }).join();
             });
             this.functions = builder.build();
-            this.tags = this.tagsLoader.load((Map) pair.getFirst());
+            this.tags = this.tagsLoader.load(pair.getFirst());
         }, executor1);
     }
 
Index: net/minecraft/server/MinecraftServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
--- a/net/minecraft/server/MinecraftServer.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/MinecraftServer.java	(date 1611508050313)
@@ -222,16 +222,13 @@
     private final StructureManager structureManager;
     protected final WorldData worldData;
 
+    // PistonMC - Fix decompile errors
     public static <S extends MinecraftServer> S spin(Function<Thread, S> function) {
-        AtomicReference atomicreference = new AtomicReference();
-        Thread thread = new Thread(() -> {
-            ((MinecraftServer) atomicreference.get()).runServer();
-        }, "Server thread");
+        AtomicReference<S> atomicreference = new AtomicReference<>();
+        Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
 
-        thread.setUncaughtExceptionHandler((thread1, throwable) -> {
-            MinecraftServer.LOGGER.error(throwable);
-        });
-        MinecraftServer minecraftserver = (MinecraftServer) function.apply(thread);
+        thread.setUncaughtExceptionHandler((thread1, throwable) -> MinecraftServer.LOGGER.error(throwable));
+        S minecraftserver = function.apply(thread);
 
         atomicreference.set(minecraftserver);
         thread.start();
@@ -1316,16 +1313,15 @@
         return this.functionManager;
     }
 
+    // PistonMC - Fix decompile errors
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
-        CompletableFuture completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+        CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
+            Stream<String> stream = collection.stream();
             PackRepository packrepository = this.packRepository;
 
             this.packRepository.getClass();
-            return (ImmutableList) stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
-        }, this).thenCompose((immutablelist) -> {
-            return ServerResources.loadResources(immutablelist, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
-        }).thenAcceptAsync((serverresources) -> {
+            return stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
+        }, this).thenCompose((immutablelist) -> ServerResources.loadResources(immutablelist, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverresources) -> {
             this.resources.close();
             this.resources = serverresources;
             this.packRepository.setSelected(collection);
Index: net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
--- a/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java	(date 1611574661924)
@@ -59,9 +59,10 @@
         })).fromNetwork(resourcelocation1, friendlybytebuf);
     }
 
+    // PistonMC - Fix decompile errors
     public static <T extends Recipe<?>> void toNetwork(T t0, FriendlyByteBuf friendlybytebuf) {
         friendlybytebuf.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(t0.getSerializer()));
         friendlybytebuf.writeResourceLocation(t0.getId());
-        t0.getSerializer().toNetwork(friendlybytebuf, t0);
+        ((RecipeSerializer<T>) t0.getSerializer()).toNetwork(friendlybytebuf, t0);
     }
 }
Index: net/minecraft/server/commands/LootCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/server/commands/LootCommand.java b/net/minecraft/server/commands/LootCommand.java
--- a/net/minecraft/server/commands/LootCommand.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/server/commands/LootCommand.java	(date 1611658076217)
@@ -88,22 +88,9 @@
         }));
     }
 
+    // PistonMC - Fix decompile errors
     private static <T extends ArgumentBuilder<CommandSourceStack, T>> T addTargets(T t0, LootCommand.TailProvider lootcommand_tailprovider) {
-        return t0.then(((LiteralArgumentBuilder) Commands.literal("replace").then(Commands.literal("entity").then(Commands.argument("entities", EntityArgument.entities()).then(lootcommand_tailprovider.construct(Commands.argument("slot", SlotArgument.slot()), (commandcontext, list, lootcommand_callback) -> {
-            return entityReplace(EntityArgument.getEntities(commandcontext, "entities"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, lootcommand_callback);
-        }).then(lootcommand_tailprovider.construct(Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, lootcommand_callback) -> {
-            return entityReplace(EntityArgument.getEntities(commandcontext, "entities"), SlotArgument.getSlot(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, lootcommand_callback);
-        })))))).then(Commands.literal("block").then(Commands.argument("targetPos", BlockPosArgument.blockPos()).then(lootcommand_tailprovider.construct(Commands.argument("slot", SlotArgument.slot()), (commandcontext, list, lootcommand_callback) -> {
-            return blockReplace((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, lootcommand_callback);
-        }).then(lootcommand_tailprovider.construct(Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, lootcommand_callback) -> {
-            return blockReplace((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), IntegerArgumentType.getInteger(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, lootcommand_callback);
-        })))))).then(Commands.literal("insert").then(lootcommand_tailprovider.construct(Commands.argument("targetPos", BlockPosArgument.blockPos()), (commandcontext, list, lootcommand_callback) -> {
-            return blockDistribute((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), list, lootcommand_callback);
-        }))).then(Commands.literal("give").then(lootcommand_tailprovider.construct(Commands.argument("players", EntityArgument.players()), (commandcontext, list, lootcommand_callback) -> {
-            return playerGive(EntityArgument.getPlayers(commandcontext, "players"), list, lootcommand_callback);
-        }))).then(Commands.literal("spawn").then(lootcommand_tailprovider.construct(Commands.argument("targetPos", Vec3Argument.vec3()), (commandcontext, list, lootcommand_callback) -> {
-            return dropInWorld((CommandSourceStack) commandcontext.getSource(), Vec3Argument.getVec3(commandcontext, "targetPos"), list, lootcommand_callback);
-        })));
+        return t0.then(Commands.literal("replace").then(Commands.literal("entity").then(Commands.argument("entities", EntityArgument.entities()).then(lootcommand_tailprovider.construct(Commands.argument("slot", SlotArgument.slot()), (commandcontext, list, lootcommand_callback) -> entityReplace(EntityArgument.getEntities(commandcontext, "entities"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, lootcommand_callback)).then(lootcommand_tailprovider.construct(Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, lootcommand_callback) -> entityReplace(EntityArgument.getEntities(commandcontext, "entities"), SlotArgument.getSlot(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, lootcommand_callback))))))).then(Commands.literal("block").then(Commands.argument("targetPos", BlockPosArgument.blockPos()).then(lootcommand_tailprovider.construct(Commands.argument("slot", SlotArgument.slot()), (commandcontext, list, lootcommand_callback) -> blockReplace(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, lootcommand_callback)).then(lootcommand_tailprovider.construct(Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, lootcommand_callback) -> blockReplace(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), IntegerArgumentType.getInteger(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, lootcommand_callback)))))).then(Commands.literal("insert").then(lootcommand_tailprovider.construct(Commands.argument("targetPos", BlockPosArgument.blockPos()), (commandcontext, list, lootcommand_callback) -> blockDistribute(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), list, lootcommand_callback)))).then(Commands.literal("give").then(lootcommand_tailprovider.construct(Commands.argument("players", EntityArgument.players()), (commandcontext, list, lootcommand_callback) -> playerGive(EntityArgument.getPlayers(commandcontext, "players"), list, lootcommand_callback)))).then(Commands.literal("spawn").then(lootcommand_tailprovider.construct(Commands.argument("targetPos", Vec3Argument.vec3()), (commandcontext, list, lootcommand_callback) -> dropInWorld(commandcontext.getSource(), Vec3Argument.getVec3(commandcontext, "targetPos"), list, lootcommand_callback))));
     }
 
     private static Container getContainer(CommandSourceStack commandsourcestack, BlockPos blockpos) throws CommandSyntaxException {
Index: net/minecraft/world/inventory/MenuType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/inventory/MenuType.java b/net/minecraft/world/inventory/MenuType.java
--- a/net/minecraft/world/inventory/MenuType.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/inventory/MenuType.java	(date 1611575644926)
@@ -40,5 +40,8 @@
         this.constructor = menutype_menusupplier;
     }
 
-    interface MenuSupplier<T extends AbstractContainerMenu> {}
+    // PistonMC - Fix decompile errors - Add missing indy method
+    interface MenuSupplier<T extends AbstractContainerMenu> {
+        AbstractContainerMenu create(int i, net.minecraft.world.entity.player.Inventory inventory);
+    }
 }
Index: net/minecraft/data/models/ModelProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/models/ModelProvider.java b/net/minecraft/data/models/ModelProvider.java
--- a/net/minecraft/data/models/ModelProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/models/ModelProvider.java	(date 1611653827811)
@@ -38,40 +38,38 @@
         this.generator = datagenerator;
     }
 
+    // PistonMC - Fix decompile errors
     @Override
     public void run(HashCache hashcache) {
         Path path = this.generator.getOutputFolder();
-        HashMap hashmap = Maps.newHashMap();
-        Consumer consumer = (blockstategenerator) -> {
+        HashMap<Block, BlockStateGenerator> hashmap = Maps.newHashMap();
+        Consumer<BlockStateGenerator> consumer = (blockstategenerator) -> {
             Block block = blockstategenerator.getBlock();
-            BlockStateGenerator blockstategenerator1 = (BlockStateGenerator) hashmap.put(block, blockstategenerator);
+            BlockStateGenerator blockstategenerator1 = hashmap.put(block, blockstategenerator);
 
             if (blockstategenerator1 != null) {
                 throw new IllegalStateException("Duplicate blockstate definition for " + block);
             }
         };
-        HashMap hashmap1 = Maps.newHashMap();
-        HashSet hashset = Sets.newHashSet();
-        BiConsumer biconsumer = (resourcelocation, supplier) -> {
-            Supplier supplier1 = (Supplier) hashmap1.put(resourcelocation, supplier);
+        HashMap<ResourceLocation, Supplier<JsonElement>> hashmap1 = Maps.newHashMap();
+        HashSet<Item> hashset = Sets.newHashSet();
+        BiConsumer<ResourceLocation, Supplier<JsonElement>> biconsumer = (resourcelocation, supplier) -> {
+            Supplier<JsonElement> supplier1 = hashmap1.put(resourcelocation, supplier);
 
             if (supplier1 != null) {
                 throw new IllegalStateException("Duplicate model definition for " + resourcelocation);
             }
         };
-        Consumer consumer1 = hashset::add;
 
-        (new BlockModelGenerators(consumer, biconsumer, consumer1)).run();
-        (new ItemModelGenerators(biconsumer)).run();
-        List list = (List) Registry.BLOCK.stream().filter((block) -> {
-            return !hashmap.containsKey(block);
-        }).collect(Collectors.toList());
+        new BlockModelGenerators(consumer, biconsumer, hashset::add).run();
+        new ItemModelGenerators(biconsumer).run();
+        List<Block> list = Registry.BLOCK.stream().filter((block) -> !hashmap.containsKey(block)).collect(Collectors.toList());
 
         if (!list.isEmpty()) {
             throw new IllegalStateException("Missing blockstate definitions for: " + list);
         } else {
             Registry.BLOCK.forEach((block) -> {
-                Item item = (Item) Item.BY_BLOCK.get(block);
+                Item item = Item.BY_BLOCK.get(block);
 
                 if (item != null) {
                     if (hashset.contains(item)) {
Index: net/minecraft/data/tags/FluidTagsProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/data/tags/FluidTagsProvider.java b/net/minecraft/data/tags/FluidTagsProvider.java
--- a/net/minecraft/data/tags/FluidTagsProvider.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/data/tags/FluidTagsProvider.java	(date 1611506829985)
@@ -16,8 +16,9 @@
 
     @Override
     protected void addTags() {
-        this.tag(FluidTags.WATER).add((Object[])(Fluids.WATER, Fluids.FLOWING_WATER));
-        this.tag(FluidTags.LAVA).add((Object[])(Fluids.LAVA, Fluids.FLOWING_LAVA));
+        // PistonMC - Fix decompile errors
+        this.tag(FluidTags.WATER).add(Fluids.WATER, Fluids.FLOWING_WATER);
+        this.tag(FluidTags.LAVA).add(Fluids.LAVA, Fluids.FLOWING_LAVA);
     }
 
     @Override
Index: net/minecraft/world/level/block/state/StateDefinition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/state/StateDefinition.java b/net/minecraft/world/level/block/state/StateDefinition.java
--- a/net/minecraft/world/level/block/state/StateDefinition.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/state/StateDefinition.java	(date 1611565399227)
@@ -34,71 +34,62 @@
     private final ImmutableSortedMap<String, Property<?>> propertiesByName;
     private final ImmutableList<S> states;
 
+    // PistonMC - Fix decompile errors
     protected StateDefinition(Function<O, S> function, O o0, StateDefinition.Factory<O, S> statedefinition_factory, Map<String, Property<?>> map) {
         this.owner = o0;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier supplier = () -> {
-            return (StateHolder) function.apply(o0);
-        };
-        MapCodec mapcodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
+        Supplier<S> supplier = () -> function.apply(o0);
+        MapCodec<S> mapcodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
-        Entry entry;
+        Entry<String, Property<?>> entry;
 
-        for (UnmodifiableIterator unmodifiableiterator = this.propertiesByName.entrySet().iterator(); unmodifiableiterator.hasNext(); mapcodec = appendPropertyCodec(mapcodec, supplier, (String) entry.getKey(), (Property) entry.getValue())) {
-            entry = (Entry) unmodifiableiterator.next();
+        for (UnmodifiableIterator<Entry<String, Property<?>>> unmodifiableiterator = this.propertiesByName.entrySet().iterator(); unmodifiableiterator.hasNext(); mapcodec = appendPropertyCodec(mapcodec, supplier, entry.getKey(), entry.getValue())) {
+            entry = unmodifiableiterator.next();
         }
 
-        LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
-        ArrayList arraylist = Lists.newArrayList();
-        Stream stream = Stream.of(Collections.emptyList());
+        LinkedHashMap<Map<Property<?>, Comparable<?>>, S> linkedhashmap = Maps.newLinkedHashMap();
+        ArrayList<S> arraylist = Lists.newArrayList();
+        Stream<java.util.List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property property;
-
-        for (UnmodifiableIterator unmodifiableiterator1 = this.propertiesByName.values().iterator(); unmodifiableiterator1.hasNext();stream = stream.flatMap((list) -> {
-            return property.getPossibleValues().stream().map((comparable) -> {
-                ArrayList arraylist1 = Lists.newArrayList(list);
+        for (Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((list) -> {
+                return property.getPossibleValues().stream().map((comparable) -> {
+                    ArrayList<Pair<Property<?>, Comparable<?>>> arraylist1 = Lists.newArrayList(list);
 
-                arraylist1.add(Pair.of(property, comparable));
-                return arraylist1;
+                    arraylist1.add(Pair.of(property, comparable));
+                    return arraylist1;
+                });
             });
-        })) {
-            property = (Property) unmodifiableiterator1.next();
         }
 
+        MapCodec<S> finalMapcodec = mapcodec;
         stream.forEach((list) -> {
-            ImmutableMap immutablemap = (ImmutableMap) list.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
-            StateHolder stateholder = (StateHolder) statedefinition_factory.create(o0, immutablemap, mapcodec);
+            ImmutableMap<Property<?>, Comparable<?>> immutablemap = list.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+            S stateholder = statedefinition_factory.create(o0, immutablemap, finalMapcodec);
 
             linkedhashmap.put(immutablemap, stateholder);
             arraylist.add(stateholder);
         });
-        Iterator iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            StateHolder stateholder = (StateHolder) iterator.next();
-
+        for (S stateholder : arraylist) {
             stateholder.populateNeighbours(linkedhashmap);
         }
 
         this.states = ImmutableList.copyOf(arraylist);
     }
 
+    // PistonMC - Fix decompile errors
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapcodec, Supplier<S> supplier, String s, Property<T> property) {
-        return Codec.mapPair(mapcodec, property.valueCodec().fieldOf(s).setPartial(() -> {
-            return property.value((StateHolder) supplier.get());
-        })).xmap((pair) -> {
-            return (StateHolder) ((StateHolder) pair.getFirst()).setValue(property, ((Property.Value) pair.getSecond()).value());
-        }, (stateholder) -> {
-            return Pair.of(stateholder, property.value(stateholder));
-        });
+        return Codec.mapPair(mapcodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value(supplier.get())))
+                .xmap((pair) -> pair.getFirst().setValue(property, pair.getSecond().value()), (stateholder) -> Pair.of(stateholder, property.value(stateholder)));
     }
 
     public ImmutableList<S> getPossibleStates() {
         return this.states;
     }
 
+    // PistonMC - Fix decompile errors
     public S any() {
-        return (StateHolder) this.states.get(0);
+        return this.states.get(0);
     }
 
     public O getOwner() {
@@ -141,38 +132,37 @@
             return this;
         }
 
+        // PistonMC - Fix decompile errors
         private <T extends Comparable<T>> void validateProperty(Property<T> property) {
             String s = property.getName();
 
             if (!StateDefinition.NAME_PATTERN.matcher(s).matches()) {
                 throw new IllegalArgumentException(this.owner + " has invalidly named property: " + s);
-            } else {
-                Collection collection = property.getPossibleValues();
+            }
+            Collection<T> collection = property.getPossibleValues();
 
-                if (collection.size() <= 1) {
-                    throw new IllegalArgumentException(this.owner + " attempted use property " + s + " with <= 1 possible values");
-                } else {
-                    Iterator iterator = collection.iterator();
+            if (collection.size() <= 1) {
+                throw new IllegalArgumentException(this.owner + " attempted use property " + s + " with <= 1 possible values");
+            }
+            Iterator<T> iterator = collection.iterator();
 
-                    String s1;
+            String s1;
 
-                    do {
-                        if (!iterator.hasNext()) {
-                            if (this.properties.containsKey(s)) {
-                                throw new IllegalArgumentException(this.owner + " has duplicate property: " + s);
-                            }
+            do {
+                if (!iterator.hasNext()) {
+                    if (this.properties.containsKey(s)) {
+                        throw new IllegalArgumentException(this.owner + " has duplicate property: " + s);
+                    }
 
-                            return;
-                        }
+                    return;
+                }
 
-                        Comparable comparable = (Comparable) iterator.next();
+                T comparable = iterator.next();
 
-                        s1 = property.getName(comparable);
-                    } while (StateDefinition.NAME_PATTERN.matcher(s1).matches());
+                s1 = property.getName(comparable);
+            } while (StateDefinition.NAME_PATTERN.matcher(s1).matches());
 
-                    throw new IllegalArgumentException(this.owner + " has property: " + s + " with invalidly named value: " + s1);
-                }
-            }
+            throw new IllegalArgumentException(this.owner + " has property: " + s + " with invalidly named value: " + s1);
         }
 
         public StateDefinition<O, S> create(Function<O, S> function, StateDefinition.Factory<O, S> statedefinition_factory) {
Index: net/minecraft/world/level/block/state/StateHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/net/minecraft/world/level/block/state/StateHolder.java b/net/minecraft/world/level/block/state/StateHolder.java
--- a/net/minecraft/world/level/block/state/StateHolder.java	(revision 334b00ff3ffc3306d92655a52a52bf2fa391e07c)
+++ b/net/minecraft/world/level/block/state/StateHolder.java	(date 1611567863560)
@@ -22,19 +22,20 @@
 
 public abstract class StateHolder<O, S> {
 
+    // PistonMC - Fix decompile errors
     private static final Function<Entry<Property<?>, Comparable<?>>, String> PROPERTY_ENTRY_TO_STRING_FUNCTION = new Function<Entry<Property<?>, Comparable<?>>, String>() {
         public String apply(@Nullable Entry<Property<?>, Comparable<?>> entry) {
             if (entry == null) {
                 return "<NULL>";
             } else {
-                Property property = (Property) entry.getKey();
+                Property<?> property = entry.getKey();
 
-                return property.getName() + "=" + this.getName(property, (Comparable) entry.getValue());
+                return property.getName() + "=" + this.getName(property, entry.getValue());
             }
         }
 
         private <T extends Comparable<T>> String getName(Property<T> property, Comparable<?> comparable) {
-            return property.getName(comparable);
+            return property.getName((T) comparable);
         }
     };
     protected final O owner;
@@ -48,12 +49,14 @@
         this.propertiesCodec = mapcodec;
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Comparable<T>> S cycle(Property<T> property) {
-        return this.setValue(property, (Comparable) findNextInCollection(property.getPossibleValues(), this.getValue(property)));
+        return this.setValue(property, findNextInCollection(property.getPossibleValues(), this.getValue(property)));
     }
 
+    // PistonMC - Fix decompile errors
     protected static <T> T findNextInCollection(Collection<T> collection, T t0) {
-        Iterator iterator = collection.iterator();
+        Iterator<T> iterator = collection.iterator();
 
         do {
             if (!iterator.hasNext()) {
@@ -89,13 +92,14 @@
         return this.values.containsKey(property);
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Comparable<T>> T getValue(Property<T> property) {
-        Comparable comparable = (Comparable) this.values.get(property);
+        Comparable<?> comparable = this.values.get(property);
 
         if (comparable == null) {
             throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
         } else {
-            return (Comparable) property.getValueClass().cast(comparable);
+            return property.getValueClass().cast(comparable);
         }
     }
 
@@ -105,21 +109,21 @@
         return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
+    // PistonMC - Fix decompile errors
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V v0) {
-        Comparable comparable = (Comparable) this.values.get(property);
+        Comparable<?> comparable = this.values.get(property);
 
         if (comparable == null) {
             throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.owner);
         } else if (comparable == v0) {
-            return this;
-        } else {
-            Object object = this.neighbours.get(property, v0);
+            return (S) this;
+        }
+        S object = this.neighbours.get(property, v0);
 
-            if (object == null) {
-                throw new IllegalArgumentException("Cannot set property " + property + " to " + v0 + " on " + this.owner + ", it is not an allowed value");
-            } else {
-                return object;
-            }
+        if (object == null) {
+            throw new IllegalArgumentException("Cannot set property " + property + " to " + v0 + " on " + this.owner + ", it is not an allowed value");
+        } else {
+            return object;
         }
     }
 
@@ -159,11 +163,10 @@
         return this.values;
     }
 
+    // PistonMC - Fix decompile errors
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
-        return codec.dispatch("Name", (stateholder) -> {
-            return stateholder.owner;
-        }, (object) -> {
-            StateHolder stateholder = (StateHolder) function.apply(object);
+        return codec.dispatch("Name", (stateholder) -> stateholder.owner, (object) -> {
+            S stateholder = function.apply(object);
 
             return stateholder.getValues().isEmpty() ? Codec.unit(stateholder) : stateholder.propertiesCodec.fieldOf("Properties").codec();
         });
