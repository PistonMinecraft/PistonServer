plugins {
    id 'java-library'
}

archivesBaseName = 'piston-api'
version = "${rootProject.ext.MC_VERSION}-${rootProject.ext.VERSION}+${rootProject.ext.BUILD}"

sourceSets {
    pluginApi {
        java.srcDirs =  ['src/pluginapi/java']
        resources.srcDirs =  ['src/pluginapi/resources']
        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
    moddingApi {
        java.srcDirs =  ['src/moddingapi/java']
        resources.srcDirs =  ['src/moddingapi/resources']
        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
    main {
        java.srcDirs = ['src/common/java']
        resources.srcDirs = ['src/common/resources']
    }
}

configurations {
    pluginApiAnnotationProcessor.extendsFrom annotationProcessor
    moddingApiAnnotationProcessor.extendsFrom annotationProcessor
    expose {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom api
    }
    implementation {
        canBeResolved = true
    }
    pluginApiImplementation {
        canBeResolved = true
    }
    moddingApiImplementation {
        canBeResolved = true
    }
}

dependencies {
    pluginApiImplementation 'net.md-5:bungeecord-chat:1.16-R0.5-SNAPSHOT'

    moddingApiImplementation 'cpw.mods:modlauncher:8.0.9'

    api 'org.slf4j:slf4j-api:2.0.0-alpha1'

    implementation 'org.snakeyaml:snakeyaml-engine:2.2.1'
}

task pluginApiJar(type: Jar) {
    archiveClassifier = 'pluginapi'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from sourceSets.pluginApi.output
    from sourceSets.main.output
    from configurations.pluginApiImplementation.collect {zipTree(it) }
    from configurations.implementation.collect {zipTree(it) }
}

task moddingApiJar(type: Jar) {
    archiveClassifier = 'moddingapi'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from sourceSets.moddingApi.output
    from sourceSets.main.output
    from configurations.moddingApiImplementation.collect {zipTree(it) }
    from configurations.implementation.collect {zipTree(it) }
}

jar { // This will gen uber jar
    dependsOn pluginApiJar, moddingApiJar
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from sourceSets.pluginApi.output
    from sourceSets.moddingApi.output
    from configurations.moddingApiImplementation.collect {zipTree(it) }
    from configurations.pluginApiImplementation.collect {zipTree(it) }
    from configurations.implementation.collect {zipTree(it) }
}

artifacts {
    expose pluginApiJar
    expose moddingApiJar
    expose jar
}